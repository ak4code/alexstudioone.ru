!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,e){if(x[t]&&y[t]){for(var n in y[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(p[n]=e[n]);0==--v&&0===m&&L()}}(t,n),e&&e(t,n)};var n,i=!0,r="d8d0b8967d8ea4348aff",o=1e4,s={},a=[],l=[];function c(t){var e=$[t];if(!e)return E;var i=function(i){return e.hot.active?($[i]?-1===$[i].parents.indexOf(t)&&$[i].parents.push(t):(a=[t],n=i),-1===e.children.indexOf(i)&&e.children.push(i)):(console.warn("[HMR] unexpected require("+i+") from disposed module "+t),a=[]),E(i)},r=function(t){return{configurable:!0,enumerable:!0,get:function(){return E[t]},set:function(e){E[t]=e}}};for(var o in E)Object.prototype.hasOwnProperty.call(E,o)&&"e"!==o&&Object.defineProperty(i,o,r(o));return i.e=function(t){return"ready"===h&&d("prepare"),m++,E.e(t).then(e,function(t){throw e(),t});function e(){m--,"prepare"===h&&(w[t]||k(t),0===m&&0===v&&L())}},i}var u=[],h="idle";function d(t){h=t;for(var e=0;e<u.length;e++)u[e].call(null,t)}var f,p,g,v=0,m=0,w={},y={},x={};function b(t){return+t+""===t?+t:t}function C(t){if("idle"!==h)throw new Error("check() is only allowed in idle status");return i=t,d("check"),(e=o,e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var i=new XMLHttpRequest,o=E.p+""+r+".hot-update.json";i.open("GET",o,!0),i.timeout=e,i.send(null)}catch(t){return n(t)}i.onreadystatechange=function(){if(4===i.readyState)if(0===i.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===i.status)t();else if(200!==i.status&&304!==i.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(i.responseText)}catch(t){return void n(t)}t(e)}}})).then(function(t){if(!t)return d("idle"),null;y={},w={},x=t.c,g=t.h,d("prepare");var e=new Promise(function(t,e){f={resolve:t,reject:e}});return p={},k(0),"prepare"===h&&0===m&&0===v&&L(),e});var e}function k(t){x[t]?(y[t]=!0,v++,function(t){var e=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=E.p+""+t+"."+r+".hot-update.js",e.appendChild(n)}(t)):w[t]=!0}function L(){d("ready");var t=f;if(f=null,t)if(i)Promise.resolve().then(function(){return T(i)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var n in p)Object.prototype.hasOwnProperty.call(p,n)&&e.push(b(n));t.resolve(e)}}function T(e){if("ready"!==h)throw new Error("apply() is only allowed in ready status");var n,i,o,l,c;function u(t){for(var e=[t],n={},i=e.slice().map(function(t){return{chain:[t],id:t}});i.length>0;){var r=i.pop(),o=r.id,s=r.chain;if((l=$[o])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:o};if(l.hot._main)return{type:"unaccepted",chain:s,moduleId:o};for(var a=0;a<l.parents.length;a++){var c=l.parents[a],u=$[c];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:s.concat([c]),moduleId:o,parentId:c};-1===e.indexOf(c)&&(u.hot._acceptedDependencies[o]?(n[c]||(n[c]=[]),f(n[c],[o])):(delete n[c],e.push(c),i.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function f(t,e){for(var n=0;n<e.length;n++){var i=e[n];-1===t.indexOf(i)&&t.push(i)}}e=e||{};var v={},m=[],w={},y=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var C in p)if(Object.prototype.hasOwnProperty.call(p,C)){var k;c=b(C);var L=!1,T=!1,M=!1,S="";switch((k=p[C]?u(c):{type:"disposed",moduleId:C}).chain&&(S="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":e.onDeclined&&e.onDeclined(k),e.ignoreDeclined||(L=new Error("Aborted because of self decline: "+k.moduleId+S));break;case"declined":e.onDeclined&&e.onDeclined(k),e.ignoreDeclined||(L=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+S));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(k),e.ignoreUnaccepted||(L=new Error("Aborted because "+c+" is not accepted"+S));break;case"accepted":e.onAccepted&&e.onAccepted(k),T=!0;break;case"disposed":e.onDisposed&&e.onDisposed(k),M=!0;break;default:throw new Error("Unexception type "+k.type)}if(L)return d("abort"),Promise.reject(L);if(T)for(c in w[c]=p[c],f(m,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,c)&&(v[c]||(v[c]=[]),f(v[c],k.outdatedDependencies[c]));M&&(f(m,[k.moduleId]),w[c]=y)}var A,B=[];for(i=0;i<m.length;i++)c=m[i],$[c]&&$[c].hot._selfAccepted&&B.push({module:c,errorHandler:$[c].hot._selfAccepted});d("dispose"),Object.keys(x).forEach(function(t){!1===x[t]&&function(t){delete installedChunks[t]}(t)});for(var N,D,I=m.slice();I.length>0;)if(c=I.pop(),l=$[c]){var _={},O=l.hot._disposeHandlers;for(o=0;o<O.length;o++)(n=O[o])(_);for(s[c]=_,l.hot.active=!1,delete $[c],delete v[c],o=0;o<l.children.length;o++){var j=$[l.children[o]];j&&(A=j.parents.indexOf(c))>=0&&j.parents.splice(A,1)}}for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(l=$[c]))for(D=v[c],o=0;o<D.length;o++)N=D[o],(A=l.children.indexOf(N))>=0&&l.children.splice(A,1);for(c in d("apply"),r=g,w)Object.prototype.hasOwnProperty.call(w,c)&&(t[c]=w[c]);var H=null;for(c in v)if(Object.prototype.hasOwnProperty.call(v,c)&&(l=$[c])){D=v[c];var P=[];for(i=0;i<D.length;i++)if(N=D[i],n=l.hot._acceptedDependencies[N]){if(-1!==P.indexOf(n))continue;P.push(n)}for(i=0;i<P.length;i++){n=P[i];try{n(D)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:D[i],error:t}),e.ignoreErrored||H||(H=t)}}}for(i=0;i<B.length;i++){var z=B[i];c=z.module,a=[c];try{E(c)}catch(t){if("function"==typeof z.errorHandler)try{z.errorHandler(t)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:n,originalError:t}),e.ignoreErrored||H||(H=n),H||(H=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:c,error:t}),e.ignoreErrored||H||(H=t)}}return H?(d("fail"),Promise.reject(H)):(d("idle"),new Promise(function(t){t(m)}))}var $={};function E(e){if($[e])return $[e].exports;var i=$[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(t,n){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var i=0;i<t.length;i++)e._acceptedDependencies[t[i]]=n||function(){};else e._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._declinedDependencies[t[n]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=e._disposeHandlers.indexOf(t);n>=0&&e._disposeHandlers.splice(n,1)},check:C,apply:T,status:function(t){if(!t)return h;u.push(t)},addStatusHandler:function(t){u.push(t)},removeStatusHandler:function(t){var e=u.indexOf(t);e>=0&&u.splice(e,1)},data:s[t]};return n=void 0,e}(e),parents:(l=a,a=[],l),children:[]};return t[e].call(i.exports,i,i.exports,c(e)),i.l=!0,i.exports}E.m=t,E.c=$,E.d=function(t,e,n){E.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},E.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},E.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return E.d(e,"a",e),e},E.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},E.p="",E.h=function(){return r},c(7)(E.s=7)}([function(t,e){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){
/*! UIkit 3.0.0-beta.42 | http://www.getuikit.com | (c) 2014 - 2017 YOOtheme | MIT License */
t.exports=function(){"use strict";var t={album:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="5" y="2" width="10" height="1" /> <rect x="3" y="4" width="14" height="1" /> <rect fill="none" stroke="#000" x="1.5" y="6.5" width="17" height="11" /></svg>',ban:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <line fill="none" stroke="#000" stroke-width="1.1" x1="4" y1="3.5" x2="16" y2="16.5" /></svg>',behance:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z" /> <path d="M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z" /> <rect x="13" y="4" width="5" height="1.4" /></svg>',bell:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z" /> <path fill="none" stroke="#000" d="M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16" /></svg>',bold:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z" /></svg>',bolt:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z" /></svg>',bookmark:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5" /></svg>',calendar:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z" /> <rect width="1" height="3" x="6" y="2" /> <rect width="1" height="3" x="13" y="2" /></svg>',camera:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10.8" r="3.8" /> <path fill="none" stroke="#000" d="M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z" /></svg>',cart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="7.3" cy="17.3" r="1.4" /> <circle cx="13.3" cy="17.3" r="1.4" /> <polyline fill="none" stroke="#000" points="0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5" /></svg>',check:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.1" points="4,10 8,15 17,4" /></svg>',clock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <rect x="9" y="4" width="1" height="7" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625" /></svg>',close:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.06" d="M16,16 L4,4" /> <path fill="none" stroke="#000" stroke-width="1.06" d="M16,4 L4,16" /></svg>',code:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.01" points="13,4 19,10 13,16" /> <polyline fill="none" stroke="#000" stroke-width="1.01" points="7,4 1,10 7,16" /></svg>',cog:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" cx="9.997" cy="10" r="3.31" /> <path fill="none" stroke="#000" d="M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z" /></svg>',comment:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z" /></svg>',commenting:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5" /> <circle cx="10" cy="8" r="1" /> <circle cx="6" cy="8" r="1" /> <circle cx="14" cy="8" r="1" /></svg>',comments:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="2 0.5 19.5 0.5 19.5 13" /> <path d="M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z" /></svg>',copy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="2.5" width="12" height="16" /> <polyline fill="none" stroke="#000" points="5 0.5 17.5 0.5 17.5 17" /></svg>',database:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <ellipse fill="none" stroke="#000" cx="10" cy="4.64" rx="7.5" ry="3.14" /> <path fill="none" stroke="#000" d="M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11" /> <path fill="none" stroke="#000" d="M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25" /> <path fill="none" stroke="#000" d="M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64" /></svg>',desktop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="8" y="15" width="1" height="2" /> <rect x="11" y="15" width="1" height="2" /> <rect x="5" y="16" width="10" height="1" /> <rect fill="none" stroke="#000" x="1.5" y="3.5" width="17" height="11" /></svg>',download:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="14,10 9.5,14.5 5,10" /> <rect x="3" y="17" width="13" height="1" /> <line fill="none" stroke="#000" x1="9.5" y1="13.91" x2="9.5" y2="3" /></svg>',dribbble:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.4" d="M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5" /> <path fill="none" stroke="#000" stroke-width="1.4" d="M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6" /> <path fill="none" stroke="#000" stroke-width="1.4" d="M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4" /> <circle fill="none" stroke="#000" stroke-width="1.4" cx="10" cy="10" r="9" /></svg>',expand:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="13 2 18 2 18 7 17 7 17 3 13 3" /> <polygon points="2 13 3 13 3 17 7 17 7 18 2 18" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M11,9 L17,3" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M3,17 L9,11" /></svg>',facebook:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z" /></svg>',file:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="1.5" width="13" height="17" /></svg>',flickr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="5.5" cy="9.5" r="3.5" /> <circle cx="14.5" cy="9.5" r="3.5" /></svg>',folder:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5" /></svg>',forward:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z" /></svg>',foursquare:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z" /></svg>',future:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline points="19 2 18 2 18 6 14 6 14 7 19 7 19 2" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10" /> <rect x="9" y="4" width="1" height="7" /> <path d="M13.018,14.197 L9.445,10.625" fill="none" stroke="#000" stroke-width="1.1" /></svg>',github:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z" /></svg>',gitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="3.5" y="1" width="1.531" height="11.471" /> <rect x="7.324" y="4.059" width="1.529" height="15.294" /> <rect x="11.148" y="4.059" width="1.527" height="15.294" /> <rect x="14.971" y="4.059" width="1.529" height="8.412" /></svg>',google:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z" /></svg>',grid:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="2" y="2" width="3" height="3" /> <rect x="8" y="2" width="3" height="3" /> <rect x="14" y="2" width="3" height="3" /> <rect x="2" y="8" width="3" height="3" /> <rect x="8" y="8" width="3" height="3" /> <rect x="14" y="8" width="3" height="3" /> <rect x="2" y="14" width="3" height="3" /> <rect x="8" y="14" width="3" height="3" /> <rect x="14" y="14" width="3" height="3" /></svg>',happy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="13" cy="7" r="1" /> <circle cx="7" cy="7" r="1" /> <circle fill="none" stroke="#000" cx="10" cy="10" r="8.5" /> <path fill="none" stroke="#000" d="M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4" /></svg>',hashtag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z" /></svg>',heart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.03" d="M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z" /></svg>',history:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="#000" points="1 2 2 2 2 6 6 6 6 7 1 7 1 2" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10" /> <rect x="9" y="4" width="1" height="7" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625" id="Shape" /></svg>',home:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65" /> <polygon points="15 4 18 4 18 7 17 7 17 5 15 5" /> <polygon points="3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19" /></svg>',image:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="16.1" cy="6.1" r="1.1" /> <rect fill="none" stroke="#000" x="0.5" y="2.5" width="19" height="15" /> <polyline fill="none" stroke="#000" stroke-width="1.01" points="4,13 8,9 13,14" /> <polyline fill="none" stroke="#000" stroke-width="1.01" points="11,12 12.5,10.5 16,14" /></svg>',info:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /></svg>',instagram:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z" /> <circle cx="14.87" cy="5.26" r="1.09" /> <path d="M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z" /></svg>',italic:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z" /></svg>',joomla:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z" /> <path d="M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8" /> <path d="M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8" /> <path d="M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7" /></svg>',laptop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect y="16" width="20" height="1" /> <rect fill="none" stroke="#000" x="2.5" y="4.5" width="15" height="10" /></svg>',lifesaver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z" /></svg>',link:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M7.925,11.875 L11.925,7.975" /></svg>',linkedin:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z" /> <path d="M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z" /></svg>',list:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="6" y="4" width="12" height="1" /> <rect x="6" y="9" width="12" height="1" /> <rect x="6" y="14" width="12" height="1" /> <rect x="2" y="4" width="2" height="1" /> <rect x="2" y="9" width="2" height="1" /> <rect x="2" y="14" width="2" height="1" /></svg>',location:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.01" d="M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z" /> <circle fill="none" stroke="#000" cx="10" cy="6.8" r="2.3" /></svg>',lock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" height="10" width="13" y="8.5" x="3.5" /> <path fill="none" stroke="#000" d="M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8" /></svg>',mail:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="1.4,6.5 10,11 18.6,6.5" /> <path d="M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z" /></svg>',menu:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="2" y="4" width="16" height="1" /> <rect x="2" y="9" width="16" height="1" /> <rect x="2" y="14" width="16" height="1" /></svg>',minus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect height="1" width="18" y="9" x="1" /></svg>',more:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="3" cy="10" r="2" /> <circle cx="10" cy="10" r="2" /> <circle cx="17" cy="10" r="2" /></svg>',move:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="4,5 1,5 1,9 2,9 2,6 4,6 " /> <polygon points="1,16 2,16 2,18 4,18 4,19 1,19 " /> <polygon points="14,16 14,19 11,19 11,18 13,18 13,16 " /> <rect fill="none" stroke="#000" x="5.5" y="1.5" width="13" height="13" /> <rect x="1" y="11" width="1" height="3" /> <rect x="6" y="18" width="3" height="1" /></svg>',nut:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3" /> <circle fill="none" stroke="#000" cx="10" cy="10" r="3.5" /></svg>',pagekit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19 " /></svg>',pencil:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z" /> <path fill="none" stroke="#000" d="M15.98,7.268 L13.851,5.148" /></svg>',phone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z" /> <circle cx="10.5" cy="16.5" r="0.8" /></svg>',pinterest:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1" /></svg>',play:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="6.5,5 14.5,10 6.5,15" /></svg>',plus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="9" y="1" width="1" height="17" /> <rect x="1" y="9" width="17" height="1" /></svg>',pull:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7" /> <line fill="none" stroke="#000" x1="9.5" y1="11" x2="9.5" y2="2" /> <polyline fill="none" stroke="#000" points="6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5" /></svg>',push:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3" /> <line fill="none" stroke="#000" x1="9.5" y1="10" x2="9.5" y2="1" /> <polyline fill="none" stroke="#000" points="6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5" /></svg>',question:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <circle cx="10.44" cy="14.42" r="1.05" /> <path fill="none" stroke="#000" stroke-width="1.2" d="M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75" /></svg>',receiver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.01" d="M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611" /></svg>',refresh:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5" /> <polyline fill="none" stroke="#000" points="9.9 2 12.79 4.89 9.79 7.9" /></svg>',reply:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z" /></svg>',rss:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="3.12" cy="16.8" r="1.85" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5" /></svg>',search:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z" /></svg>',server:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="3" y="3" width="1" height="2" /> <rect x="5" y="3" width="1" height="2" /> <rect x="7" y="3" width="1" height="2" /> <rect x="16" y="3" width="1" height="1" /> <rect x="16" y="10" width="1" height="1" /> <circle fill="none" stroke="#000" cx="9.9" cy="17.4" r="1.4" /> <rect x="3" y="10" width="1" height="2" /> <rect x="5" y="10" width="1" height="2" /> <rect x="9.5" y="14" width="1" height="2" /> <rect x="3" y="17" width="6" height="1" /> <rect x="11" y="17" width="6" height="1" /> <rect fill="none" stroke="#000" x="1.5" y="1.5" width="17" height="5" /> <rect fill="none" stroke="#000" x="1.5" y="8.5" width="17" height="5" /></svg>',settings:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <ellipse fill="none" stroke="#000" cx="6.11" cy="3.55" rx="2.11" ry="2.15" /> <ellipse fill="none" stroke="#000" cx="6.11" cy="15.55" rx="2.11" ry="2.15" /> <circle fill="none" stroke="#000" cx="13.15" cy="9.55" r="2.15" /> <rect x="1" y="3" width="3" height="1" /> <rect x="10" y="3" width="8" height="1" /> <rect x="1" y="9" width="8" height="1" /> <rect x="15" y="9" width="3" height="1" /> <rect x="1" y="15" width="3" height="1" /> <rect x="10" y="15" width="8" height="1" /></svg>',shrink:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="11 4 12 4 12 8 16 8 16 9 11 9" /> <polygon points="4 11 9 11 9 16 8 16 8 12 4 12" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M12,8 L18,2" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M2,18 L8,12" /></svg>',social:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <line fill="none" stroke="#000" stroke-width="1.1" x1="13.4" y1="14" x2="6.3" y2="10.7" /> <line fill="none" stroke="#000" stroke-width="1.1" x1="13.5" y1="5.5" x2="6.5" y2="8.8" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="4.6" r="2.3" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="14.8" r="2.3" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="4.5" cy="9.8" r="2.3" /></svg>',soundcloud:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z" /> <rect x="6" y="6.5" width="1.5" height="8.5" /> <rect x="3" y="8" width="1.5" height="7" /> <rect y="10" width="1.5" height="5" /></svg>',star:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" stroke-width="1.01" points="10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27" /></svg>',strikethrough:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z" /> <rect x="3" y="10" width="15" height="1" /></svg>',table:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="1" y="3" width="18" height="1" /> <rect x="1" y="7" width="18" height="1" /> <rect x="1" y="11" width="18" height="1" /> <rect x="1" y="15" width="18" height="1" /></svg>',tablet:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z" /> <circle cx="10.5" cy="16.3" r="0.8" /></svg>',tag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z" /> <circle cx="14" cy="6" r="1" /></svg>',thumbnails:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="3.5" width="5" height="5" /> <rect fill="none" stroke="#000" x="11.5" y="3.5" width="5" height="5" /> <rect fill="none" stroke="#000" x="11.5" y="11.5" width="5" height="5" /> <rect fill="none" stroke="#000" x="3.5" y="11.5" width="5" height="5" /></svg>',trash:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="6.5 3 6.5 1.5 13.5 1.5 13.5 3" /> <polyline fill="none" stroke="#000" points="4.5 4 4.5 18.5 15.5 18.5 15.5 4" /> <rect x="8" y="7" width="1" height="9" /> <rect x="11" y="7" width="1" height="9" /> <rect x="2" y="3" width="16" height="1" /></svg>',tripadvisor:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z" /></svg>',tumblr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z" /></svg>',tv:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="7" y="16" width="6" height="1" /> <rect fill="none" stroke="#000" x="0.5" y="3.5" width="19" height="11" /></svg>',twitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74" /></svg>',uikit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3" /> <polygon points="9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3" /></svg>',unlock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="8.5" width="13" height="10" /> <path fill="none" stroke="#000" d="M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9" /></svg>',upload:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="5 8 9.5 3.5 14 8 " /> <rect x="3" y="17" width="13" height="1" /> <line fill="none" stroke="#000" x1="9.5" y1="15" x2="9.5" y2="4" /></svg>',user:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.9" cy="6.4" r="4.4" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2" /></svg>',users:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="7.7" cy="8.6" r="3.5" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1" /></svg>',vimeo:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z" /></svg>',warning:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="10" cy="14" r="1" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <path d="M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z" /></svg>',whatsapp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9" /></svg>',wordpress:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z" /></svg>',world:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M1,10.5 L19,10.5" /> <path fill="none" stroke="#000" d="M2.35,15.5 L17.65,15.5" /> <path fill="none" stroke="#000" d="M2.35,5.5 L17.523,5.5" /> <path fill="none" stroke="#000" d="M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z" /> <circle fill="none" stroke="#000" cx="10" cy="10.5" r="9" /></svg>',xing:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z" /> <path d="M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z" /></svg>',yelp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z" /></svg>',youtube:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z" /></svg>',"500px":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719\t\tc0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449\t\tc-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045\t\tc-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z" /> <path d="M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066\t\tc0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564\t\tc0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271\t\tc0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z" /> <path d="M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521\t\tc-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53\t\tc-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203\t\tc-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604\t\tc0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645\t\tc1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z" /> <path d="M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461\t\tc0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882\t\tc0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881\t\tc-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461\t\tc-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915\t\tC5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0\t\tc0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408\t\tc0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406\t\tc-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799\t\tc0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468\t\tc-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607\t\tc0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038\t\tc-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113\t\tc-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z" /></svg>',"arrow-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66" /> <line fill="none" stroke="#000" x1="10.5" y1="4" x2="10.5" y2="15" /></svg>',"arrow-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="10 14 5 9.5 10 5" /> <line fill="none" stroke="#000" x1="16" y1="9.5" x2="5" y2="9.52" /></svg>',"arrow-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="10 5 15 9.5 10 14" /> <line fill="none" stroke="#000" x1="4" y1="9.5" x2="15" y2="9.5" /></svg>',"arrow-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4" /> <line fill="none" stroke="#000" x1="10.5" y1="16" x2="10.5" y2="5" /></svg>',"chevron-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="16 7 10 13 4 7" /></svg>',"chevron-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="13 16 7 10 13 4" /></svg>',"chevron-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="7 4 13 10 7 16" /></svg>',"chevron-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="4 13 10 7 16 13" /></svg>',"cloud-download":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6" /> <polyline fill="none" stroke="#000" points="11.75 16 9.5 18.25 7.25 16" /> <path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5" /></svg>',"cloud-upload":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6" /> <polyline fill="none" stroke="#000" points="7.25 11.75 9.5 9.5 11.75 11.75" /> <path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5" /></svg>',"credit-card":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="1.5" y="4.5" width="17" height="12" /> <rect x="1" y="7" width="18" height="3" /></svg>',"file-edit":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z" /> <polyline fill="none" stroke="#000" points="16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5" /></svg>',"git-branch":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="3" r="2" /> <circle fill="none" stroke="#000" stroke-width="1.2" cx="14" cy="6" r="2" /> <circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="17" r="2" /> <path fill="none" stroke="#000" stroke-width="2" d="M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5" /></svg>',"git-fork":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.2" cx="5.79" cy="2.79" r="1.79" /> <circle fill="none" stroke="#000" stroke-width="1.2" cx="14.19" cy="2.79" r="1.79" /> <ellipse fill="none" stroke="#000" stroke-width="1.2" cx="10.03" cy="16.79" rx="1.79" ry="1.79" /> <path fill="none" stroke="#000" stroke-width="2" d="M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57" /></svg>',"github-alt":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z" /></svg>',"google-plus":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.9,9c0,2.7-0.6,5-3.2,6.3c-3.7,1.8-8.1,0.2-9.4-3.6C-1.1,7.6,1.9,3.3,6.1,3c1.7-0.1,3.2,0.3,4.6,1.3 c0.1,0.1,0.3,0.2,0.4,0.4c-0.5,0.5-1.2,1-1.7,1.6c-1-0.8-2.1-1.1-3.5-0.9C5,5.6,4.2,6,3.6,6.7c-1.3,1.3-1.5,3.4-0.5,5 c1,1.7,2.6,2.3,4.6,1.9c1.4-0.3,2.4-1.2,2.6-2.6H6.9V9H12.9z" /> <polygon points="20,9 20,11 18,11 18,13 16,13 16,11 14,11 14,9 16,9 16,7 18,7 18,9 " /></svg>',"minus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9" /> <line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5" /></svg>',"more-vertical":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="10" cy="3" r="2" /> <circle cx="10" cy="10" r="2" /> <circle cx="10" cy="17" r="2" /></svg>',"paint-bucket":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.42,2.33 L11.7,7.61" /> <path d="M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z" /></svg>',"phone-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z" /> <circle cx="3.8" cy="10.5" r="0.8" /></svg>',"play-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" stroke-width="1.1" points="8.5 7 13.5 10 8.5 13" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /></svg>',"plus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9" /> <line fill="none" stroke="#000" x1="9.5" y1="5" x2="9.5" y2="14" /> <line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5" /></svg>',"quote-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z" /> <path d="M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z" /></svg>',"sign-in":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3" /> <polygon points="9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5" /></svg>',"sign-out":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5" /> <polygon points="13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3" /></svg>',"tablet-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z" /> <circle cx="3.7" cy="10.5" r="0.8" /></svg>',"triangle-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="5 7 15 7 10 12" /></svg>',"triangle-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="12 5 7 10 12 15" /></svg>',"triangle-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="8 5 13 10 8 15" /></svg>',"triangle-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="5 13 10 8 15 13" /></svg>',"video-camera":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="18,6 18,14 12,10 " /> <rect x="2" y="5" width="12" height="10" /></svg>'};function e(n){e.installed||n.icon.add(t)}return"undefined"!=typeof window&&window.UIkit&&window.UIkit.use(e),e}()},function(t,e){var n,i,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var l,c=[],u=!1,h=-1;function d(){u&&l&&(u=!1,l.length?c=l.concat(c):h=-1,c.length&&f())}function f(){if(!u){var t=a(d);u=!0;for(var e=c.length;e;){for(l=c,c=[];++h<e;)l&&l[h].run();h=-1,e=c.length}l=null,u=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||u||a(f)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=g,r.addListener=g,r.once=g,r.off=g,r.removeListener=g,r.removeAllListeners=g,r.emit=g,r.prependListener=g,r.prependOnceListener=g,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var i,r,o,s,a,l=1,c={},u=!1,h=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?i=function(t){e.nextTick(function(){p(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),i=function(e){t.postMessage(s+e,"*")}):t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},i=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(r=h.documentElement,i=function(t){var e=h.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,r.removeChild(e),e=null},r.appendChild(e)}):i=function(t){setTimeout(p,0,t)},d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var r={callback:t,args:e};return c[l]=r,i(l),l++},d.clearImmediate=f}function f(t){delete c[t]}function p(t){if(u)setTimeout(p,0,t);else{var e=c[t];if(e){u=!0;try{!function(t){var e=t.callback,i=t.args;switch(i.length){case 0:e();break;case 1:e(i[0]);break;case 2:e(i[0],i[1]);break;case 3:e(i[0],i[1],i[2]);break;default:e.apply(n,i)}}(e)}finally{f(t),u=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(0),n(2))},function(t,e,n){(function(t){var i=Function.prototype.apply;function r(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new r(i.call(setTimeout,window,arguments),clearTimeout)},e.setInterval=function(){return new r(i.call(setInterval,window,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(window,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(3),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(t,e,n){(function(e){/*! UIkit 3.0.0-beta.42 | http://www.getuikit.com | (c) 2014 - 2017 YOOtheme | MIT License */
t.exports=function(){"use strict";function t(t,e){return function(n){var i=arguments.length;return i?i>1?t.apply(e,arguments):t.call(e,n):t.call(e)}}var n=Object.prototype.hasOwnProperty;function i(t,e){return n.call(t,e)}var r=/([a-z\d])([A-Z])/g;function o(t){return t.replace(r,"$1-$2").toLowerCase()}var s=/-(\w)/g;function a(t){return t.replace(s,l)}function l(t,e){return e?e.toUpperCase():""}function c(t){return t.length?l(0,t.charAt(0))+t.slice(1):""}var u=String.prototype,h=u.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function d(t,e){return h.call(t,e)}var f=u.endsWith||function(t){return this.substr(-t.length)===t};function p(t,e){return f.call(t,e)}var g=function(t){return~this.indexOf(t)},v=u.includes||g,m=Array.prototype.includes||g;function w(t,e){return t&&(S(t)?v:m).call(t,e)}var y=Array.isArray;function x(t){return"function"==typeof t}function b(t){return null!==t&&"object"==typeof t}function C(t){return b(t)&&Object.getPrototypeOf(t)===Object.prototype}function k(t){return b(t)&&t===t.window}function L(t){return b(t)&&9===t.nodeType}function T(t){return b(t)&&!!t.jquery}function $(t){return t instanceof Node||b(t)&&1===t.nodeType}function E(t){return t instanceof NodeList||t instanceof HTMLCollection}function M(t){return"boolean"==typeof t}function S(t){return"string"==typeof t}function A(t){return"number"==typeof t}function B(t){return A(t)||S(t)&&!isNaN(t-parseFloat(t))}function N(t){return void 0===t}function D(t){return M(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function I(t){var e=Number(t);return!isNaN(e)&&e}function _(t){return parseFloat(t)||0}function O(t){return $(t)||k(t)||L(t)?t:E(t)||T(t)?t[0]:y(t)?O(t[0]):null}var j=Array.prototype;function H(t){return $(t)?[t]:E(t)?j.slice.call(t):y(t)?t.map(O).filter(Boolean):T(t)?t.toArray():[]}function P(t){return y(t)?t:S(t)?t.split(/,(?![^(]*\))/).map(function(t){return B(t)?I(t):D(t.trim())}):[t]}function z(t){return t?p(t,"ms")?_(t):1e3*_(t):0}function q(t,e,n){return t.replace(new RegExp(e+"|"+n,"mg"),function(t){return t===e?n:e})}var W=Object.assign||function(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];t=Object(t);for(var r=0;r<e.length;r++){var o=e[r];if(null!==o)for(var s in o)i(o,s)&&(t[s]=o[s])}return t};function R(t,e){for(var n in t)if(!1===e.call(t[n],t[n],n))break}function F(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),Math.min(Math.max(t,e),n)}function V(){}function Z(t,e){return t.left<=e.right&&e.left<=t.right&&t.top<=e.bottom&&e.top<=t.bottom}function U(t,e){return Z({top:t.y,bottom:t.y,left:t.x,right:t.x},e)}var Y={ratio:function(t,e,n){var i,r="width"===e?"height":"width";return(i={})[r]=Math.round(n*t[r]/t[e]),i[e]=n,i},contain:function(t,e){var n=this;return R(t=W({},t),function(i,r){return t=t[r]>e[r]?n.ratio(t,r,e[r]):t}),t},cover:function(t,e){var n=this;return R(t=this.contain(t,e),function(i,r){return t=t[r]<e[r]?n.ratio(t,r,e[r]):t}),t}};function X(t,e,n){if(b(e))for(var i in e)X(t,i,e[i]);else{if(N(n))return(t=O(t))&&t.getAttribute(e);H(t).forEach(function(t){x(n)&&(n=n.call(t,X(t,e))),null===n?J(t,e):t.setAttribute(e,n)})}}function G(t,e){return H(t).some(function(t){return t.hasAttribute(e)})}function J(t,e){t=H(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.removeAttribute(e)})})}function Q(t,e,n,i){X(t,e,function(t){return t?t.replace(n,i):t})}function K(t,e){for(var n=0,i=[e,"data-"+e];n<i.length;n++)if(G(t,i[n]))return X(t,i[n])}function tt(t,e){return O(t)||nt(t,at(t)?e:document)}function et(t,e){var n=H(t);return n.length&&n||it(t,at(t)?e:document)}function nt(t,e){return O(rt(t,e,"querySelector"))}function it(t,e){return H(rt(t,e,"querySelectorAll"))}function rt(t,e,n){if(void 0===e&&(e=document),!t||!S(t))return null;var i;at(t=t.replace(st,"$1 *"))&&(i=[],t=t.split(",").map(function(t,n){var r=e;if("!"===(t=t.trim())[0]){var o=t.substr(1).trim().split(" ");r=dt(e.parentNode,o[0]),t=o.slice(1).join(" ")}return r?(r.id||(r.id="uk-"+Date.now()+n,i.push(function(){return J(r,"id")})),"#"+gt(r.id)+" "+t):null}).filter(Boolean).join(","),e=document);try{return e[n](t)}catch(t){return null}finally{i&&i.forEach(function(t){return t()})}}var ot=/(^|,)\s*[!>+~]/,st=/([!>+~])(?=\s+[!>+~]|\s*$)/g;function at(t){return S(t)&&t.match(ot)}var lt=Element.prototype,ct=lt.matches||lt.webkitMatchesSelector||lt.msMatchesSelector;function ut(t,e){return H(t).some(function(t){return ct.call(t,e)})}var ht=lt.closest||function(t){var e=this;do{if(ut(e,t))return e;e=e.parentNode}while(e&&1===e.nodeType)};function dt(t,e){return d(e,">")&&(e=e.slice(1)),$(t)?t.parentNode&&ht.call(t,e):H(t).map(function(t){return t.parentNode&&ht.call(t,e)}).filter(Boolean)}function ft(t,e){for(var n=[],i=O(t).parentNode;i&&1===i.nodeType;)ut(i,e)&&n.push(i),i=i.parentNode;return n}var pt=window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,function(t){return"\\"+t})};function gt(t){return S(t)?pt.call(null,t):""}var vt={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function mt(t){return H(t).some(function(t){return vt[t.tagName.toLowerCase()]})}function wt(t){return H(t).some(function(t){return t.offsetHeight||t.getBoundingClientRect().height})}var yt="input,select,textarea,button";function xt(t){return H(t).some(function(t){return ut(t,yt)})}function bt(t,e){return H(t).filter(function(t){return ut(t,e)})}function Ct(t,e){return S(e)?ut(t,e)||dt(t,e):t===e||(L(e)?e.documentElement:O(e)).contains(O(t))}function kt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Mt(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4];return i=At(i),o&&(s=function(t,e,n){var i=this;return function(r){var o=r.target,s=">"===e[0]?it(e,t).reverse().filter(function(t){return Ct(o,t)})[0]:dt(o,e);s&&(r.delegate=t,r.current=s,n.call(i,r))}}(i,o,s)),s.length>1&&(s=function(t){return function(e){return y(e.detail)?t.apply(t,[e].concat(e.detail)):t(e)}}(s)),r.split(" ").forEach(function(t){return i&&i.addEventListener(t,s,a)}),function(){return Lt(i,r,s,a)}}function Lt(t,e,n,i){void 0===i&&(i=!1),(t=At(t))&&e.split(" ").forEach(function(e){return t.removeEventListener(e,n,i)})}function Tt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Mt(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4],l=n[5],c=kt(i,r,o,function(t){var e=!l||l(t);e&&(c(),s(t,e))},a);return c}function $t(t,e,n){return Bt(t).reduce(function(t,i){return t&&i.dispatchEvent(Et(e,!0,!0,n))},!0)}function Et(t,e,n,i){if(void 0===e&&(e=!0),void 0===n&&(n=!1),S(t)){var r=document.createEvent("CustomEvent");r.initCustomEvent(t,e,n,i),t=r}return t}function Mt(t){return S(t[0])&&(t[0]=nt(t[0])),x(t[2])&&t.splice(2,0,!1),t}function St(t){return"EventTarget"in window?t instanceof EventTarget:t&&"addEventListener"in t}function At(t){return St(t)?t:O(t)}function Bt(t){return St(t)?[t]:y(t)?t.map(At).filter(Boolean):H(t)}var Nt="Promise"in window?window.Promise:_t,Dt=2,It="setImmediate"in window?e:setTimeout;function _t(t){this.state=Dt,this.value=void 0,this.deferred=[];var e=this;try{t(function(t){e.resolve(t)},function(t){e.reject(t)})}catch(t){e.reject(t)}}_t.reject=function(t){return new _t(function(e,n){n(t)})},_t.resolve=function(t){return new _t(function(e,n){e(t)})},_t.all=function(t){return new _t(function(e,n){var i=[],r=0;function o(n){return function(o){i[n]=o,(r+=1)===t.length&&e(i)}}0===t.length&&e(i);for(var s=0;s<t.length;s+=1)_t.resolve(t[s]).then(o(s),n)})},_t.race=function(t){return new _t(function(e,n){for(var i=0;i<t.length;i+=1)_t.resolve(t[i]).then(e,n)})};var Ot=_t.prototype;function jt(t,e){return new Nt(function(n,i){var r=W({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:V,responseType:""},e);r.beforeSend(r);var o=r.xhr;for(var s in r)if(s in o)try{o[s]=r[s]}catch(t){}for(var a in o.open(r.method.toUpperCase(),t),r.headers)o.setRequestHeader(a,r.headers[a]);kt(o,"load",function(){0===o.status||o.status>=200&&o.status<300||304===o.status?n(o):i(W(Error(o.statusText),{xhr:o,status:o.status}))}),kt(o,"error",function(){return i(W(Error("Network Error"),{xhr:o}))}),kt(o,"timeout",function(){return i(W(Error("Network Timeout"),{xhr:o}))}),o.send(r.data)})}function Ht(){return"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll}function Pt(t){if(Ht())t();else var e=function(){n(),i(),t()},n=kt(document,"DOMContentLoaded",e),i=kt(window,"load",e)}function zt(t,e){return e?H(t).indexOf(O(e)):H((t=O(t))&&t.parentNode.children).indexOf(t)}function qt(t,e,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var r=(e=H(e)).length;return t=B(t)?I(t):"next"===t?n+1:"previous"===t?n-1:zt(e,t),i?F(t,0,r-1):(t%=r)<0?t+r:t}function Wt(t){return(t=O(t)).innerHTML="",t}function Rt(t,e){return t=O(t),N(e)?t.innerHTML:Ft(t.hasChildNodes()?Wt(t):t,e)}function Ft(t,e){return t=O(t),Ut(e,function(e){return t.appendChild(e)})}function Vt(t,e){return t=O(t),Ut(e,function(e){return t.parentNode.insertBefore(e,t)})}function Zt(t,e){return t=O(t),Ut(e,function(e){return t.nextSibling?Vt(t.nextSibling,e):Ft(t.parentNode,e)})}function Ut(t,e){return(t=S(t)?te(t):t)?"length"in t?H(t).map(e):e(t):null}function Yt(t){H(t).map(function(t){return t.parentNode&&t.parentNode.removeChild(t)})}function Xt(t,e){for(e=O(Vt(t,e));e.firstChild;)e=e.firstChild;return Ft(e,t),e}function Gt(t,e){return H(H(t).map(function(t){return t.hasChildNodes?Xt(H(t.childNodes),e):Ft(t,e)}))}function Jt(t){H(t).map(function(t){return t.parentNode}).filter(function(t,e,n){return n.indexOf(t)===e}).forEach(function(t){Vt(t,t.childNodes),Yt(t)})}Ot.resolve=function(t){var e=this;if(e.state===Dt){if(t===e)throw new TypeError("Promise settled with itself.");var n=!1;try{var i=t&&t.then;if(null!==t&&b(t)&&x(i))return void i.call(t,function(t){n||e.resolve(t),n=!0},function(t){n||e.reject(t),n=!0})}catch(t){return void(n||e.reject(t))}e.state=0,e.value=t,e.notify()}},Ot.reject=function(t){if(this.state===Dt){if(t===this)throw new TypeError("Promise settled with itself.");this.state=1,this.value=t,this.notify()}},Ot.notify=function(){var t=this;It(function(){if(t.state!==Dt)for(;t.deferred.length;){var e=t.deferred.shift(),n=e[0],i=e[1],r=e[2],o=e[3];try{0===t.state?x(n)?r(n.call(void 0,t.value)):r(t.value):1===t.state&&(x(i)?r(i.call(void 0,t.value)):o(t.value))}catch(t){o(t)}}})},Ot.then=function(t,e){var n=this;return new _t(function(i,r){n.deferred.push([t,e,i,r]),n.notify()})},Ot.catch=function(t){return this.then(void 0,t)};var Qt=/^\s*<(\w+|!)[^>]*>/,Kt=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function te(t){var e=Kt.exec(t);if(e)return document.createElement(e[1]);var n=document.createElement("div");return Qt.test(t)?n.insertAdjacentHTML("beforeend",t.trim()):n.textContent=t,n.childNodes.length>1?H(n.childNodes):n.firstChild}function ee(t,e){if(t&&1===t.nodeType)for(e(t),t=t.firstElementChild;t;)ee(t,e),t=t.nextElementSibling}function ne(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];le(t,e,"add")}function ie(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];le(t,e,"remove")}function re(t,e){Q(t,"class",new RegExp("(^|\\s)"+e+"(?!\\S)","g"),"")}function oe(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];e[0]&&ie(t,e[0]),e[1]&&ne(t,e[1])}function se(t,e){return H(t).some(function(t){return t.classList.contains(e)})}function ae(t){for(var e=[],n=arguments.length-1;n-- >0;)e[n]=arguments[n+1];if(e.length){var i=S((e=ce(e))[e.length-1])?[]:e.pop();e=e.filter(Boolean),H(t).forEach(function(t){for(var n=t.classList,r=0;r<e.length;r++)he.Force?n.toggle.apply(n,[e[r]].concat(i)):n[(N(i)?!n.contains(e[r]):i)?"add":"remove"](e[r])})}}function le(t,e,n){(e=ce(e).filter(Boolean)).length&&H(t).forEach(function(t){var i=t.classList;he.Multiple?i[n].apply(i,e):e.forEach(function(t){return i[n](t)})})}function ce(t){return t.reduce(function(t,e){return t.concat.call(t,S(e)&&w(e," ")?e.trim().split(" "):e)},[])}var ue,he={};(ue=document.createElement("_").classList)&&(ue.add("a","b"),ue.toggle("c",!1),he.Multiple=ue.contains("b"),he.Force=!ue.contains("c")),ue=null;var de={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,widows:!0,"z-index":!0,zoom:!0};function fe(t,e,n){return H(t).map(function(t){if(S(e)){if(e=ye(e),N(n))return ge(t,e);n||0===n?t.style[e]=B(n)&&!de[e]?n+"px":n:t.style.removeProperty(e)}else{if(y(e)){var i=pe(t);return e.reduce(function(t,e){return t[e]=i[ye(e)],t},{})}b(e)&&R(e,function(e,n){return fe(t,n,e)})}return t})[0]}function pe(t,e){return(t=O(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function ge(t,e,n){return pe(t,n)[e]}var ve={};function me(t){if(!(t in ve)){var e=Ft(document.documentElement,document.createElement("div"));ne(e,"var-"+t);try{ve[t]=ge(e,"content",":before").replace(/^["'](.*)["']$/,"$1"),ve[t]=JSON.parse(ve[t])}catch(t){}document.documentElement.removeChild(e)}return ve[t]}var we={};function ye(t){var e=we[t];return e||(e=we[t]=function(t){if((t=o(t))in be)return t;for(var e,n=xe.length;n--;)if((e="-"+xe[n]+"-"+t)in be)return e}(t)||t),e}var xe=["webkit","moz","ms"],be=document.createElement("_").style;function Ce(t,e,n,i){return void 0===n&&(n=400),void 0===i&&(i="linear"),Nt.all(H(t).map(function(t){return new Nt(function(r,o){for(var s in e){var a=fe(t,s);""===a&&fe(t,s,a)}var l=setTimeout(function(){return $t(t,"transitionend")},n);Tt(t,"transitionend transitioncanceled",function(e){var n=e.type;clearTimeout(l),ie(t,"uk-transition"),fe(t,{"transition-property":"","transition-duration":"","transition-timing-function":""}),"transitioncanceled"===n?o():r()},!1,function(e){var n=e.target;return t===n}),ne(t,"uk-transition"),fe(t,W({"transition-property":Object.keys(e).map(ye).join(","),"transition-duration":n+"ms","transition-timing-function":i},e))})}))}var ke={start:Ce,stop:function(t){return $t(t,"transitionend"),Nt.resolve()},cancel:function(t){$t(t,"transitioncanceled")},inProgress:function(t){return se(t,"uk-transition")}},Le="uk-animation-",Te="uk-cancel-animation";function $e(t,e,n,i,r){var o=arguments;return void 0===n&&(n=200),Nt.all(H(t).map(function(t){return new Nt(function(s,a){if(se(t,Te))requestAnimationFrame(function(){return Nt.resolve().then(function(){return $e.apply(void 0,o).then(s,a)})});else{var l=e+" "+Le+(r?"leave":"enter");d(e,Le)&&(i&&(l+=" uk-transform-origin-"+i),r&&(l+=" "+Le+"reverse")),c(),Tt(t,"animationend animationcancel",function(e){var n=!1;"animationcancel"===e.type?(a(),c()):(s(),Nt.resolve().then(function(){n=!0,c()})),requestAnimationFrame(function(){n||(ne(t,Te),requestAnimationFrame(function(){return ie(t,Te)}))})},!1,function(e){var n=e.target;return t===n}),fe(t,"animationDuration",n+"ms"),ne(t,l)}function c(){fe(t,"animationDuration",""),re(t,Le+"\\S*")}})}))}var Ee=new RegExp(Le+"(enter|leave)"),Me={in:function(t,e,n,i){return $e(t,e,n,i,!1)},out:function(t,e,n,i){return $e(t,e,n,i,!0)},inProgress:function(t){return Ee.test(X(t,"class"))},cancel:function(t){$t(t,"animationcancel")}};function Se(t,e){return S(t)?Be(t)?O(te(t)):nt(t,e):O(t)}function Ae(t,e){return S(t)?Be(t)?H(te(t)):it(t,e):H(t)}function Be(t){return"<"===t[0]||t.match(/^\s*</)}var Ne={width:["x","left","right"],height:["y","top","bottom"]};function De(t,e,n,i,r,o,s,a){n=We(n),i=We(i);var l={element:n,target:i};if(!t||!e)return l;var c=_e(t),u=_e(e),h=u;return qe(h,n,c,-1),qe(h,i,u,1),r=Re(r,c.width,c.height),o=Re(o,u.width,u.height),r.x+=o.x,r.y+=o.y,h.left+=r.x,h.top+=r.y,a=_e(a||Ze(t)),s&&R(Ne,function(t,e){var o=t[0],d=t[1],f=t[2];if(!0===s||w(s,o)){var p=n[o]===d?-c[e]:n[o]===f?c[e]:0,g=i[o]===d?u[e]:i[o]===f?-u[e]:0;if(h[d]<a[d]||h[d]+c[e]>a[f]){var v=c[e]/2,m="center"===i[o]?-u[e]/2:0;"center"===n[o]&&(y(v,m)||y(-v,-m))||y(p,g)}}function y(t,n){var i=h[d]+t+n-2*r[o];if(i>=a[d]&&i+c[e]<=a[f])return h[d]=i,["element","target"].forEach(function(n){l[n][o]=t?l[n][o]===Ne[e][1]?Ne[e][2]:Ne[e][1]:l[n][o]}),!0}}),Ie(t,h),l}function Ie(t,e){if(t=O(t),!e)return _e(t);var n=Ie(t),i=fe(t,"position");["left","top"].forEach(function(r){if(r in e){var o=fe(t,r);t.style[r]=e[r]-n[r]+_("absolute"===i&&"auto"===o?Oe(t)[r]:o)+"px"}})}function _e(t){var e=Ze(t=O(t)),n=e.pageYOffset,i=e.pageXOffset;if(k(t)){var r=t.innerHeight,o=t.innerWidth;return{top:n,left:i,height:r,width:o,bottom:n+r,right:i+o}}var s=!1;wt(t)||(s=t.style.display,t.style.display="block");var a=t.getBoundingClientRect();return!1!==s&&(t.style.display=s),{height:a.height,width:a.width,top:a.top+n,left:a.left+i,bottom:a.bottom+n,right:a.right+i}}function Oe(t){var e=function(t){for(var e=O(t).offsetParent;e&&"static"===fe(e,"position");)e=e.offsetParent;return e||Ye(t)}(t=O(t)),n=e===Ye(t)?{top:0,left:0}:Ie(e),i=["top","left"].reduce(function(i,r){var o=c(r);return i[r]-=n[r]+(_(fe(t,"margin"+o))||0)+(_(fe(e,"border"+o+"Width"))||0),i},Ie(t));return{top:i.top,left:i.left}}var je=Pe("height"),He=Pe("width");function Pe(t){var e=c(t);return function(n,i){if(n=O(n),N(i)){if(k(n))return n["inner"+e];if(L(n)){var r=n.documentElement;return Math.max(r["offset"+e],r["scroll"+e])}return(i="auto"===(i=fe(n,t))?n["offset"+e]:_(i)||0)-ze(t,n)}fe(n,t,i||0===i?+i+ze(t,n)+"px":"")}}function ze(t,e){return"border-box"===fe(e,"boxSizing")?Ne[t].slice(1).map(c).reduce(function(t,n){return t+_(fe(e,"padding"+n))+_(fe(e,"border"+n+"Width"))},0):0}function qe(t,e,n,i){R(Ne,function(r,o){var s=r[0],a=r[1],l=r[2];e[s]===l?t[a]+=n[o]*i:"center"===e[s]&&(t[a]+=n[o]*i/2)})}function We(t){var e=/left|center|right/,n=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat(["center"]):n.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:n.test(t[1])?t[1]:"center"}}function Re(t,e,n){var i=(t||"").split(" "),r=i[0],o=i[1];return{x:r?_(r)*(p(r,"%")?e/100:1):0,y:o?_(o)*(p(o,"%")?n/100:1):0}}function Fe(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function Ve(t,e,n){void 0===e&&(e=0),void 0===n&&(n=0);var i=Ze(t=O(t));return wt(t)&&Z(t.getBoundingClientRect(),{top:e,left:n,bottom:e+je(i),right:n+He(i)})}function Ze(t){return k(t)?t:Ue(t).defaultView}function Ue(t){return O(t).ownerDocument}function Ye(t){return Ue(t).documentElement}var Xe="rtl"===X(document.documentElement,"dir"),Ge="ontouchstart"in window,Je=window.PointerEvent,Qe=Ge||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints,Ke=Qe?"mousedown "+(Ge?"touchstart":"pointerdown"):"mousedown",tn=Qe?"mousemove "+(Ge?"touchmove":"pointermove"):"mousemove",en=Qe?"mouseup "+(Ge?"touchend":"pointerup"):"mouseup",nn=Qe&&Je?"pointerenter":"mouseenter",rn=Qe&&Je?"pointerleave":"mouseleave",on={reads:[],writes:[],read:function(t){return this.reads.push(t),sn(),t},write:function(t){return this.writes.push(t),sn(),t},clear:function(t){return ln(this.reads,t)||ln(this.writes,t)},flush:function(){an(this.reads),an(this.writes.splice(0,this.writes.length)),this.scheduled=!1,(this.reads.length||this.writes.length)&&sn()}};function sn(){on.scheduled||(on.scheduled=!0,requestAnimationFrame(on.flush.bind(on)))}function an(t){for(var e;e=t.shift();)e()}function ln(t,e){var n=t.indexOf(e);return!!~n&&!!t.splice(n,1)}function cn(){}function un(t,e){return(e.y-t.y)/(e.x-t.x)}cn.prototype={positions:[],position:null,init:function(){var t=this;this.positions=[],this.position=null;var e=!1;this.unbind=kt(document,"mousemove",function(n){e||(setTimeout(function(){var i=Date.now(),r=t.positions.length;r&&i-t.positions[r-1].time>100&&t.positions.splice(0,r),t.positions.push({time:i,x:n.pageX,y:n.pageY}),t.positions.length>5&&t.positions.shift(),e=!1},5),e=!0)})},cancel:function(){this.unbind&&this.unbind()},movesTo:function(t){if(this.positions.length<2)return!1;var e=Ie(t),n=this.positions[this.positions.length-1],i=this.positions[0];if(e.left<=n.x&&n.x<=e.right&&e.top<=n.y&&n.y<=e.bottom)return!1;var r=[[{x:e.left,y:e.top},{x:e.right,y:e.bottom}],[{x:e.right,y:e.top},{x:e.left,y:e.bottom}]];return e.right<=n.x||(e.left>=n.x?(r[0].reverse(),r[1].reverse()):e.bottom<=n.y?r[0].reverse():e.top>=n.y&&r[1].reverse()),!!r.reduce(function(t,e){return t+(un(i,e[0])<un(n,e[0])&&un(i,e[1])>un(n,e[1]))},0)}};var hn={};hn.args=hn.events=hn.init=hn.created=hn.beforeConnect=hn.connected=hn.ready=hn.beforeDisconnect=hn.disconnected=hn.destroy=function(t,e){return t=t&&!y(t)?[t]:t,e?t?t.concat(e):y(e)?e:[e]:t},hn.update=function(t,e){return hn.args(t,x(e)?{read:e}:e)},hn.props=function(t,e){return y(e)&&(e=e.reduce(function(t,e){return t[e]=String,t},{})),hn.methods(t,e)},hn.computed=hn.defaults=hn.methods=function(t,e){return e?t?W({},t,e):e:t};var dn=function(t,e){return N(e)?t:e};function fn(t,e){var n={};if(e.mixins)for(var r=0,o=e.mixins.length;r<o;r++)t=fn(t,e.mixins[r]);for(var s in t)l(s);for(var a in e)i(t,a)||l(a);function l(i){n[i]=(hn[i]||dn)(t[i],e[i])}return n}var pn=0,gn=function(t){this.id=++pn,this.el=O(t)};function vn(t,e){try{t.contentWindow.postMessage(JSON.stringify(W({event:"command"},e)),"*")}catch(t){}}gn.prototype.isVideo=function(){return this.isYoutube()||this.isVimeo()||this.isHTML5()},gn.prototype.isHTML5=function(){return"VIDEO"===this.el.tagName},gn.prototype.isIFrame=function(){return"IFRAME"===this.el.tagName},gn.prototype.isYoutube=function(){return this.isIFrame()&&!!this.el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)},gn.prototype.isVimeo=function(){return this.isIFrame()&&!!this.el.src.match(/vimeo\.com\/video\/.*/)},gn.prototype.enableApi=function(){var t=this;if(this.ready)return this.ready;var e,n=this.isYoutube(),i=this.isVimeo();return n||i?this.ready=new Nt(function(r){var o;Tt(t.el,"load",function(){if(n){var i=function(){return vn(t.el,{event:"listening",id:t.id})};e=setInterval(i,100),i()}}),(o=function(e){return n&&e.id===t.id&&"onReady"===e.event||i&&Number(e.player_id)===t.id},new Nt(function(t){Tt(window,"message",function(e,n){return t(n)},!1,function(t){var e=t.data;if(e&&S(e)){try{e=JSON.parse(e)}catch(t){return}return e&&o(e)}})})).then(function(){r(),e&&clearInterval(e)}),X(t.el,"src",t.el.src+(w(t.el.src,"?")?"&":"?")+(n?"enablejsapi=1":"api=1&player_id="+t.id))}):Nt.resolve()},gn.prototype.play=function(){var t=this;if(this.isVideo())if(this.isIFrame())this.enableApi().then(function(){return vn(t.el,{func:"playVideo",method:"play"})});else if(this.isHTML5())try{var e=this.el.play();e&&e.catch(V)}catch(t){}},gn.prototype.pause=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return vn(t.el,{func:"pauseVideo",method:"pause"})}):this.isHTML5()&&this.el.pause())},gn.prototype.mute=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return vn(t.el,{func:"mute",method:"setVolume",value:0})}):this.isHTML5()&&(this.el.muted=!0,X(this.el,"muted","")))};var mn,wn,yn,xn,bn={};function Cn(){mn&&clearTimeout(mn),wn&&clearTimeout(wn),yn&&clearTimeout(yn),mn=wn=yn=null,bn={}}Pt(function(){kt(document,"click",function(){return xn=!0},!0),kt(document,Ke,function(t){var e=t.target,n=Tn(t),i=n.x,r=n.y,o=Date.now(),s=$n(t.type);bn.type&&bn.type!==s||(bn.el="tagName"in e?e:e.parentNode,mn&&clearTimeout(mn),bn.x1=i,bn.y1=r,bn.last&&o-bn.last<=250&&(bn={}),bn.type=s,bn.last=o,xn=t.button>0)}),kt(document,tn,function(t){if(!t.defaultPrevented){var e=Tn(t),n=e.x,i=e.y;bn.x2=n,bn.y2=i}}),kt(document,en,function(t){var e=t.type,n=t.target;bn.type===$n(e)&&(bn.x2&&Math.abs(bn.x1-bn.x2)>30||bn.y2&&Math.abs(bn.y1-bn.y2)>30?wn=setTimeout(function(){var t,e,n,i,r;bn.el&&($t(bn.el,"swipe"),$t(bn.el,"swipe"+(e=(t=bn).x1,n=t.x2,i=t.y1,r=t.y2,Math.abs(e-n)>=Math.abs(i-r)?e-n>0?"Left":"Right":i-r>0?"Up":"Down"))),bn={}}):"last"in bn?(yn=setTimeout(function(){return $t(bn.el,"tap")}),bn.el&&"mouseup"!==e&&Ct(n,bn.el)&&(mn=setTimeout(function(){mn=null,bn.el&&!xn&&$t(bn.el,"click"),bn={}},350))):bn={})}),kt(document,"touchcancel",Cn),kt(window,"scroll",Cn)});var kn=!1;function Ln(t){return kn||"touch"===t.pointerType}function Tn(t){var e=t.touches,n=t.changedTouches,i=e&&e[0]||n&&n[0]||t;return{x:i.pageX,y:i.pageY}}function $n(t){return t.slice(0,5)}kt(document,"touchstart",function(){return kn=!0},!0),kt(document,"click",function(){kn=!1}),kt(document,"touchcancel",function(){return kn=!1},!0);var En=Object.freeze({ajax:jt,getImage:function(t){return new Nt(function(e,n){var i=new Image;i.onerror=n,i.onload=function(){return e(i)},i.src=t})},transition:Ce,Transition:ke,animate:$e,Animation:Me,attr:X,hasAttr:G,removeAttr:J,filterAttr:Q,data:K,addClass:ne,removeClass:ie,removeClasses:re,replaceClass:oe,hasClass:se,toggleClass:ae,$:Se,$$:Ae,positionAt:De,offset:Ie,position:Oe,height:je,width:He,flipPosition:Fe,isInView:Ve,scrolledOver:function(t){if(!wt(t))return 0;var e=Ze(t=O(t)),n=Ue(t),i=t.offsetHeight,r=function(t){var e=0;do{e+=t.offsetTop}while(t=t.offsetParent);return e}(t),o=je(e),s=o+Math.min(0,r-o),a=Math.max(0,o-(je(n)-(r+i)));return F((s+e.pageYOffset-r)/((s+(i-(a<o?a:0)))/100)/100)},isReady:Ht,ready:Pt,index:zt,getIndex:qt,empty:Wt,html:Rt,prepend:function(t,e){return(t=O(t)).hasChildNodes()?Ut(e,function(e){return t.insertBefore(e,t.firstChild)}):Ft(t,e)},append:Ft,before:Vt,after:Zt,remove:Yt,wrapAll:Xt,wrapInner:Gt,unwrap:Jt,fragment:te,apply:ee,isRtl:Xe,hasTouch:Qe,pointerDown:Ke,pointerMove:tn,pointerUp:en,pointerEnter:nn,pointerLeave:rn,on:kt,off:Lt,once:Tt,trigger:$t,createEvent:Et,toEventTargets:Bt,preventClick:function(){var t=setTimeout(Tt(document,"click",function(e){e.preventDefault(),e.stopImmediatePropagation(),clearTimeout(t)},!0));$t(document,"touchcancel")},fastdom:on,isVoidElement:mt,isVisible:wt,selInput:yt,isInput:xt,filter:bt,within:Ct,bind:t,hasOwn:i,hyphenate:o,camelize:a,ucfirst:c,startsWith:d,endsWith:p,includes:w,isArray:y,isFunction:x,isObject:b,isPlainObject:C,isWindow:k,isDocument:L,isJQuery:T,isNode:$,isNodeCollection:E,isBoolean:M,isString:S,isNumber:A,isNumeric:B,isUndefined:N,toBoolean:D,toNumber:I,toFloat:_,toNode:O,toNodes:H,toList:P,toMs:z,swap:q,assign:W,each:R,sortBy:function(t,e){return t.sort(function(t,n){return t[e]-n[e]})},clamp:F,noop:V,intersectRect:Z,pointInRect:U,Dimensions:Y,MouseTracker:cn,mergeOptions:fn,Player:gn,Promise:Nt,Deferred:function(){var t=this;this.promise=new Nt(function(e,n){t.reject=n,t.resolve=e})},query:tt,queryAll:et,find:nt,findAll:it,matches:ut,closest:dt,parents:ft,escape:gt,css:fe,getStyles:pe,getStyle:ge,getCssVar:me,propName:ye,isTouch:Ln,getPos:Tn});function Mn(t){return!(!d(t,"uk-")&&!d(t,"data-uk-"))&&a(t.replace("data-uk-","").replace("uk-",""))}var Sn,An=function(t){this._init(t)};An.util=En,An.data="__uikit__",An.prefix="uk-",An.options={},function(t){var e,n=t.data;function i(t,e){if(t)for(var n in t)t[n]._isReady&&t[n]._callUpdate(e)}t.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},t.mixin=function(e,n){n=(S(n)?t.components[n]:n)||this,(e=fn({},e)).mixins=n.options.mixins,delete n.options.mixins,n.options=fn(e,n.options)},t.extend=function(t){t=t||{};var e=function(t){this._init(t)};return(e.prototype=Object.create(this.prototype)).constructor=e,e.options=fn(this.options,t),e.super=this,e.extend=this.extend,e},t.update=function(t,e){for(e=Et(e||"update"),ee(t=t?O(t):document.body,function(t){return i(t[n],e)});t&&t.parentNode;)i(t.parentNode[n],e),t=t.parentNode},Object.defineProperty(t,"container",{get:function(){return e||document.body},set:function(t){e=Se(t)}})}(An),(Sn=An).prototype._callHook=function(t){var e=this,n=this.$options[t];n&&n.forEach(function(t){return t.call(e)})},Sn.prototype._callConnected=function(){var t=this;this._connected||(this._data={},this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObserver(),this._callHook("connected"),this._isReady||Pt(function(){return t._callReady()}),this._callUpdate())},Sn.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._observer&&(this._observer.disconnect(),this._observer=null),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1)},Sn.prototype._callReady=function(){this._isReady||(this._isReady=!0,this._callHook("ready"),this._resetComputeds(),this._callUpdate())},Sn.prototype._callUpdate=function(t){var e=this,n=(t=Et(t||"update")).type;w(["update","load","resize"],n)&&this._resetComputeds();var i=this.$options.update,r=this._frames,o=r.reads,s=r.writes;i&&i.forEach(function(i,r){var a=i.read,l=i.write,c=i.events;("update"===n||w(c,n))&&(a&&!w(on.reads,o[r])&&(o[r]=on.read(function(){var n=a.call(e,e._data,t);!1===n&&l?(on.clear(s[r]),delete s[r]):C(n)&&W(e._data,n),delete o[r]})),l&&!w(on.writes,s[r])&&(s[r]=on.write(function(){l.call(e,e._data,t),delete s[r]})))})},function(e){var n=0;function r(t,e){var n={},i=t.args;void 0===i&&(i=[]);var r=t.props;void 0===r&&(r={});var s=t.el;if(!r)return n;for(var l in r){var c=o(l);if(G(s,c)){var h=u(r[l],X(s,c),s);if("target"===c&&(!h||d(h,"_")))continue;n[l]=h}}var f=function(t,e){var n;void 0===e&&(e=[]);try{return t?d(t,"{")?JSON.parse(t):e.length&&!w(t,":")?((n={})[e[0]]=t,n):t.split(";").reduce(function(t,e){var n=e.split(/:(.+)/),i=n[0],r=n[1];return i&&r&&(t[i.trim()]=r.trim()),t},{}):{}}catch(t){return{}}}(K(s,e),i);for(var p in f){var g=a(p);void 0!==r[g]&&(n[g]=u(r[g],f[p],s))}return n}function s(t,e,n){Object.defineProperty(t,e,{enumerable:!0,get:function(){var r=t._computeds,o=t.$props,s=t.$el;return i(r,e)||(r[e]=n.call(t,o,s)),r[e]},set:function(n){t._computeds[e]=n}})}function l(e,n,i){C(n)||(n={name:i,handler:n});var r,o=n.name,s=n.el,a=n.handler,c=n.capture,u=n.delegate,h=n.filter,d=n.self;s=x(s)?s.call(e):s||e.$el,y(s)?s.forEach(function(t){return l(e,W({},n,{el:t}),i)}):!s||h&&!h.call(e)||(r=S(a)?e[a]:t(a,e),a=function(t){return y(t.detail)?r.apply(void 0,[t].concat(t.detail)):r(t)},d&&(a=function(t){return function(e){if(e.target===e.currentTarget||e.target===e.current)return t.call(null,e)}}(a)),e._events.push(kt(s,o,u?S(u)?u:u.call(e):null,a,c)))}function c(t,e){return t.every(function(t){return!t||!i(t,e)})}function u(t,e,n){return t===Boolean?D(e):t===Number?I(e):"query"===t?tt(e,n):"list"===t?P(e):"media"===t?function(t){if(S(t))if("@"===t[0]){t=_(me("media-"+t.substr(1)))}else if(isNaN(t))return t;return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(e):t?t(e):e}e.prototype.props={},e.prototype._init=function(t){t=t||{},t=this.$options=fn(this.constructor.options,t),this.$el=null,this.$name=e.prefix+o(this.$options.name),this.$props={},this._frames={reads:{},writes:{}},this._events=[],this._uid=n++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},e.prototype._initData=function(){var t=this.$options,e=t.defaults,n=t.data;void 0===n&&(n={});var r=t.args;void 0===r&&(r=[]);var o=t.props;void 0===o&&(o={});var s=t.el;for(var a in r.length&&y(n)&&(n=n.slice(0,r.length).reduce(function(t,e,n){return C(e)?W(t,e):t[r[n]]=e,t},{})),W({},e,o))this.$props[a]=this[a]=i(n,a)&&!N(n[a])?u(o[a],n[a],s):e?e[a]&&y(e[a])?e[a].concat():e[a]:null},e.prototype._initMethods=function(){var e=this.$options.methods;if(e)for(var n in e)this[n]=t(e[n],this)},e.prototype._initComputeds=function(){var t=this.$options.computed;if(this._resetComputeds(),t)for(var e in t)s(this,e,t[e])},e.prototype._resetComputeds=function(){this._computeds={}},e.prototype._initProps=function(t){var e;for(e in this._resetComputeds(),t=t||r(this.$options,this.$name))N(t[e])||(this.$props[e]=t[e]);var n=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&c(n,e)&&(this[e]=this.$props[e])},e.prototype._initEvents=function(){var t=this,e=this.$options.events;e&&e.forEach(function(e){if(i(e,"handler"))l(t,e);else for(var n in e)l(t,e[n],n)})},e.prototype._unbindEvents=function(){this._events.forEach(function(t){return t()}),this._events=[]},e.prototype._initObserver=function(){var t=this,e=this.$options,n=e.attrs,i=e.props,s=e.el;!this._observer&&i&&n&&(n=y(n)?n:Object.keys(i).map(function(t){return o(t)}),this._observer=new MutationObserver(function(){var e=r(t.$options,t.$name);n.some(function(n){return!N(e[n])&&e[n]!==t.$props[n]})&&t.$reset(e)}),this._observer.observe(s,{attributes:!0,attributeFilter:n.concat([this.$name,"data-"+this.$name])}))}}(An),function(t){var e=t.data;t.prototype.$mount=function(t){var n=this.$options.name;t[e]||(t[e]={}),t[e][n]||(t[e][n]=this,this.$el=this.$options.el=this.$options.el||t,this._initProps(),this._callHook("init"),Ct(t,document)&&this._callConnected())},t.prototype.$emit=function(t){this._callUpdate(t)},t.prototype.$reset=function(t){this._callDisconnected(),this._initProps(t),this._callConnected()},t.prototype.$destroy=function(t){void 0===t&&(t=!1);var n=this.$options,i=n.el,r=n.name;i&&this._callDisconnected(),this._callHook("destroy"),i&&i[e]&&(delete i[e][r],Object.keys(i[e]).length||delete i[e],t&&Yt(this.$el))}}(An),function(t){var e=t.data;t.components={},t.component=function(e,n){var i=a(e);if(C(n))n.name=i,n=t.extend(n);else{if(N(n))return t.components[i];n.options.name=i}return t.components[i]=n,t[i]=function(e,n){for(var r=arguments.length,o=Array(r);r--;)o[r]=arguments[r];return C(e)?new t.components[i]({data:e}):t.components[i].options.functional?new t.components[i]({data:[].concat(o)}):e&&e.nodeType?s(e):Ae(e).map(s)[0];function s(e){var r=t.getComponent(e,i);return r&&n&&r.$reset(n),r||new t.components[i]({el:e,data:n||{}})}},t._initialized&&!n.options.functional&&on.read(function(){return t[i]("[uk-"+e+"],[data-uk-"+e+"]")}),t.components[i]},t.getComponents=function(t){return t&&t[e]||{}},t.getComponent=function(e,n){return t.getComponents(e)[n]},t.connect=function(n){if(n[e])for(var i in n[e])n[e][i]._callConnected();for(var r=0;r<n.attributes.length;r++){var o=Mn(n.attributes[r].name);o&&o in t.components&&t[o](n)}},t.disconnect=function(t){for(var n in t[e])t[e][n]._callDisconnected()}}(An);var Bn,Nn,Dn={init:function(){ne(this.$el,this.$name)}},In={props:{container:Boolean},defaults:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&An.container||e&&Se(e)}}},_n={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String,queued:Boolean},defaults:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",queued:!1,initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,e,n){var i=this;return new Nt(function(r){var o,s=function(t){return Nt.all(t.map(function(t){return i._toggleElement(t,e,n)}))},a=(t=H(t)).filter(function(t){return i.isToggled(t)}),l=t.filter(function(t){return!w(a,t)});if(i.queued&&N(n)&&N(e)&&i.hasAnimation&&!(t.length<2)){var c=document.body,u=c.scrollTop,h=a[0],d=Me.inProgress(h)&&se(h,"uk-animation-leave")||ke.inProgress(h)&&"0px"===h.style.height;o=s(a),d||(o=o.then(function(){var t=s(l);return c.scrollTop=u,t}))}else o=s(l.concat(a));o.then(r,V)})},toggleNow:function(t,e){var n=this;return new Nt(function(i){return Nt.all(H(t).map(function(t){return n._toggleElement(t,e,!1)})).then(i,V)})},isToggled:function(t){var e=H(t||this.$el);return this.cls?se(e,this.cls.split(" ")[0]):!G(e,"hidden")},updateAria:function(t){!1===this.cls&&X(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,n){var i=this;if(e=M(e)?e:Me.inProgress(t)?se(t,"uk-animation-leave"):ke.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!$t(t,"before"+(e?"show":"hide"),[this]))return Nt.reject();var r=(!1!==n&&this.hasAnimation?this.hasTransition?this._toggleHeight:this._toggleAnimation:this._toggleImmediate)(t,e);return $t(t,e?"show":"hide",[this]),r.then(function(){$t(t,e?"shown":"hidden",[i]),$t(t,"resize")})},_toggle:function(t,e){var n;t&&(this.cls?(n=w(this.cls," ")||Boolean(e)!==se(t,this.cls))&&ae(t,this.cls,w(this.cls," ")?void 0:e):(n=Boolean(e)===G(t,"hidden"))&&X(t,"hidden",e?null:""),Ae("[autofocus]",t).some(function(t){return wt(t)&&(t.focus()||!0)}),this.updateAria(t),n&&$t(t,"resize"))},_toggleImmediate:function(t,e){return this._toggle(t,e),Nt.resolve()},_toggleHeight:function(t,e){var n=this,i=ke.inProgress(t),r=t.hasChildNodes?_(fe(t.firstElementChild,"marginTop"))+_(fe(t.lastElementChild,"marginBottom")):0,o=wt(t)?je(t)+(i?0:r):0;ke.cancel(t),this.isToggled(t)||this._toggle(t,!0),je(t,""),on.flush();var s=je(t)+(i?0:r);return je(t,o),(e?ke.start(t,W({},this.initProps,{overflow:"hidden",height:s}),Math.round(this.duration*(1-o/s)),this.transition):ke.start(t,this.hideProps,Math.round(this.duration*(o/s)),this.transition).then(function(){return n._toggle(t,!1)})).then(function(){return fe(t,n.initProps)})},_toggleAnimation:function(t,e){var n=this;return Me.cancel(t),e?(this._toggle(t,!0),Me.in(t,this.animation[0],this.duration,this.origin)):Me.out(t,this.animation[1]||this.animation[0],this.duration,this.origin).then(function(){return n._toggle(t,!1)})}}},On={mixins:[Dn,In,_n],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},defaults:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return Se(t.selPanel,e)},transitionElement:function(){return this.panel},transitionDuration:function(){return z(fe(this.transitionElement,"transitionDuration"))}},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){var e=Bn&&Bn!==this&&Bn;if(Bn=this,e){if(!this.stack)return e.hide().then(this.show),void t.preventDefault();this.prev=e}Nn||(Nn=[kt(document,"click",function(t){var e=t.target,n=t.defaultPrevented;!Bn||!Bn.bgClose||n||Bn.overlay&&!Ct(e,Bn.$el)||Bn.panel&&Ct(e,Bn.panel)||Bn.hide()}),kt(document,"keydown",function(t){27===t.keyCode&&Bn&&Bn.escClose&&(t.preventDefault(),Bn.hide())})])}},{name:"beforehide",self:!0,handler:function(){(Bn=Bn&&Bn!==this&&Bn||this.prev)||(Nn&&Nn.forEach(function(t){return t()}),Nn=null)}},{name:"show",self:!0,handler:function(){se(document.documentElement,this.clsPage)||(this.scrollbarWidth=He(window)-He(document),fe(document.body,"overflowY",this.scrollbarWidth&&this.overlay?"scroll":"")),ne(document.documentElement,this.clsPage)}},{name:"hidden",self:!0,handler:function(){for(var t,e=this.prev;e;){if(e.clsPage===this.clsPage){t=!0;break}e=e.prev}t||ie(document.documentElement,this.clsPage),!this.prev&&fe(document.body,"overflowY","")}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){if(!this.isToggled())return this.container&&this.$el.parentNode!==this.container&&(Ft(this.container,this.$el),this._callConnected()),this.toggleNow(this.$el,!0)},hide:function(){if(this.isToggled())return this.toggleNow(this.$el,!1)},getActive:function(){return Bn},_toggleImmediate:function(t,e){var n=this;return new Nt(function(i){return requestAnimationFrame(function(){n._toggle(t,e),n.transitionDuration?Tt(n.transitionElement,"transitionend",i,!1,function(t){return t.target===n.transitionElement}):i()})})}}},jn={props:{pos:String,offset:null,flip:Boolean,clsPos:String},defaults:{pos:"bottom-"+(Xe?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(w(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,n){var i;re(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?"),fe(t,{top:"",left:""});var r=this.offset;r=B(r)?r:(i=Se(r))?Ie(i)["x"===o?"left":"top"]-Ie(e)["x"===o?"right":"bottom"]:0;var o=this.getAxis(),s=De(t,e,"x"===o?Fe(this.dir)+" "+this.align:this.align+" "+Fe(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-r:r):" "+("top"===this.dir?-r:r),null,this.flip,n).target,a=s.x,l=s.y;this.dir="x"===o?a:l,this.align="x"===o?l:a,ae(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}};function Hn(t){t.component("accordion",{mixins:[Dn,_n],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String},defaults:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease"},computed:{items:function(t,e){return Ae(t.targets,e)}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(zt(Ae(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],connected:function(){if(!1!==this.active){var t=this.items[Number(this.active)];t&&!se(t,this.clsOpen)&&this.toggle(t,!1)}},update:function(){var t=this;this.items.forEach(function(e){return t._toggleImmediate(Se(t.content,e),se(e,t.clsOpen))});var e=!this.collapsible&&!se(this.items,this.clsOpen)&&this.items[0];e&&this.toggle(e,!1)},methods:{toggle:function(t,e){var n=this,i=qt(t,this.items),r=bt(this.items,"."+this.clsOpen);(t=this.items[i])&&[t].concat(!this.multiple&&!w(r,t)&&r||[]).forEach(function(i){var o=i===t,s=o&&!se(i,n.clsOpen);if(s||!o||n.collapsible||!(r.length<2)){ae(i,n.clsOpen,s);var a=i._wrapper?i._wrapper.firstElementChild:Se(n.content,i);i._wrapper||(i._wrapper=Xt(a,"<div>"),X(i._wrapper,"hidden",s?"":null)),n._toggleImmediate(a,!0),n.toggleElement(i._wrapper,s,e).then(function(){se(i,n.clsOpen)===s&&(s||n._toggleImmediate(a,!1),i._wrapper=null,Jt(a))})}})}}})}function Pn(t){t.component("alert",{attrs:!0,mixins:[Dn,_n],args:"animation",props:{close:String},defaults:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:W({opacity:0},_n.defaults.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then(function(){return t.$destroy(!0)})}}})}function zn(t){Pt(function(){var e=0,n=0;if(kt(window,"load resize",function(e){return t.update(null,e)}),kt(window,"scroll",function(n){n.dir=e<=window.pageYOffset?"down":"up",n.scrollY=e=window.pageYOffset,t.update(null,n)}),kt(document,"animationstart",function(t){var e=t.target;(fe(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(n++,fe(document.body,"overflowX","hidden"),setTimeout(function(){--n||fe(document.body,"overflowX","")},z(fe(e,"animationDuration"))+100))},!0),Qe){var i="uk-hover";kt(document,"tap",function(t){var e=t.target;return Ae("."+i).forEach(function(t){return!Ct(e,t)&&ie(t,i)})}),Object.defineProperty(t,"hoverSelector",{set:function(t){kt(document,"tap",t,function(t){return ne(t.current,i)})}}),t.hoverSelector=".uk-animation-toggle, .uk-transition-toggle, [uk-hover]"}})}function qn(t){t.component("cover",{mixins:[Dn,t.components.video.options],props:{width:Number,height:Number},defaults:{automute:!0},update:{write:function(){var t=this.$el;if(wt(t)){var e=t.parentNode,n=e.offsetHeight,i=e.offsetWidth;fe(fe(t,{width:"",height:""}),Y.cover({width:this.width||t.clientWidth,height:this.height||t.clientHeight},{width:i+(i%2?1:0),height:n+(n%2?1:0)}))}},events:["load","resize"]},events:{loadedmetadata:function(){this.$emit()}}})}function Wn(t){var e,n;t.component("drop",{mixins:[jn,_n],args:"pos",props:{mode:"list",toggle:Boolean,boundary:"query",boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},defaults:{mode:["click","hover"],toggle:!0,boundary:window,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,hoverIdle:200,animation:["uk-animation-fade"],cls:"uk-open"},computed:{clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},init:function(){this.tracker=new cn,ne(this.$el,this.clsDrop)},connected:function(){var e=this.$props.toggle;this.toggle=e&&t.toggle(S(e)?tt(e,this.$el):this.$el.previousElementSibling,{target:this.$el,mode:this.mode}),this.updateAria(this.$el)},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){if(!t.defaultPrevented){var e=t.target.hash;e||t.preventDefault(),e&&Ct(e,this.$el)||this.hide(!1)}}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:nn,filter:function(){return w(this.mode,"hover")},handler:function(t){Ln(t)||(e&&e!==this&&e.toggle&&w(e.toggle.mode,"hover")&&!Ct(t.target,e.toggle.$el)&&!U({x:t.pageX,y:t.pageY},Ie(e.$el))&&e.hide(!1),t.preventDefault(),this.show(this.toggle))}},{name:"toggleshow",handler:function(t,e){e&&!w(e.target,this.$el)||(t.preventDefault(),this.show(e||this.toggle))}},{name:"togglehide "+rn,handler:function(t,e){Ln(t)||e&&!w(e.target,this.$el)||(t.preventDefault(),this.toggle&&w(this.toggle.mode,"hover")&&this.hide())}},{name:"beforeshow",self:!0,handler:function(){this.clearTimers(),Me.cancel(this.$el),this.position()}},{name:"show",self:!0,handler:function(){this.tracker.init(),this.toggle&&(ne(this.toggle.$el,this.cls),X(this.toggle.$el,"aria-expanded","true")),n||(n=!0,kt(document,"click",function(t){var n,i=t.target;if(!t.defaultPrevented)for(;e&&e!==n&&!Ct(i,e.$el)&&(!e.toggle||!Ct(i,e.toggle.$el));)n=e,e.hide(!1)}))}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var n=t.target;this.$el===n?(e=this.isActive()?null:e,this.toggle&&(ie(this.toggle.$el,this.cls),X(this.toggle.$el,"aria-expanded","false"),this.toggle.$el.blur(),Ae("a, button",this.toggle.$el).forEach(function(t){return t.blur()})),this.tracker.cancel()):e=null===e&&Ct(n,this.$el)&&this.isToggled()?this:e}}],update:{write:function(){this.isToggled()&&!Me.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,n){var i=this;void 0===n&&(n=!0);var r=function(){return!i.isToggled()&&i.toggleElement(i.$el,!0)},o=function(){if(i.toggle=t||i.toggle,i.clearTimers(),!i.isActive())if(n&&e&&e!==i&&e.isDelaying)i.showTimer=setTimeout(i.show,10);else{if(i.isParentOf(e)){if(!e.hideTimer)return;e.hide(!1)}else if(e&&!i.isChildOf(e)&&!i.isParentOf(e))for(var o;e&&e!==o&&!i.isChildOf(e);)o=e,e.hide(!1);n&&i.delayShow?i.showTimer=setTimeout(r,i.delayShow):r(),e=i}};t&&this.toggle&&t.$el!==this.toggle.$el?(Tt(this.$el,"hide",o),this.hide(!1)):o()},hide:function(t){var e=this;void 0===t&&(t=!0);var n=function(){return e.toggleNow(e.$el,!1)};this.clearTimers(),this.isDelaying=this.tracker.movesTo(this.$el),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,this.hoverIdle):t&&this.delayHide?this.hideTimer=setTimeout(n,this.delayHide):n()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return e===this},isChildOf:function(t){return t&&t!==this&&Ct(this.$el,t.$el)},isParentOf:function(t){return t&&t!==this&&Ct(t.$el,this.$el)},position:function(){re(this.$el,this.clsDrop+"-(stack|boundary)"),fe(this.$el,{top:"",left:"",display:"block"}),ae(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=Ie(this.boundary),e=this.boundaryAlign?t:Ie(this.toggle.$el);if("justify"===this.align){var n="y"===this.getAxis()?"width":"height";fe(this.$el,n,e[n])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&ne(this.$el,this.clsDrop+"-stack");this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary),fe(this.$el,"display","")}}}),t.drop.getActive=function(){return e}}function Rn(t){t.component("dropdown",t.components.drop.extend({name:"dropdown"}))}function Fn(t){t.component("form-custom",{mixins:[Dn],args:"target",props:{target:Boolean},defaults:{target:!1},computed:{input:function(t,e){return Se(yt,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var n=t.target;return n&&(!0===n&&this.input.parentNode===e&&this.input.nextElementSibling||tt(n,e))}},update:function(){var t,e=this.target,n=this.input;e&&(e[xt(e)?"value":"textContent"]=n.files&&n.files[0]?n.files[0].name:ut(n,"select")&&(t=Ae("option",n).filter(function(t){return t.selected})[0])?t.textContent:n.value)},events:[{name:"focusin focusout mouseenter mouseleave",delegate:yt,handler:function(t){var e=t.type;t.current===this.input&&ae(this.state,"uk-"+(w(e,"focus")?"focus":"hover"),w(["focusin","mouseenter"],e))}},{name:"change",handler:function(){this.$emit()}}]})}function Vn(t){t.component("gif",{update:{read:function(t){var e=Ve(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=this.$el.src},events:["scroll","load","resize"]}})}function Zn(t){t.component("grid",t.components.margin.extend({mixins:[Dn],name:"grid",defaults:{margin:"uk-grid-margin",clsStack:"uk-grid-stack"},update:{write:function(t){var e=t.stacks;ae(this.$el,this.clsStack,e)},events:["load","resize"]}}))}function Un(t){t.component("height-match",{args:"target",props:{target:String,row:Boolean},defaults:{target:"> *",row:!0},computed:{elements:function(t,e){return Ae(t.target,e)}},update:{read:function(){var t=this,e=!1;return fe(this.elements,"minHeight",""),{rows:this.row?this.elements.reduce(function(t,n){return e!==n.offsetTop?t.push([n]):t[t.length-1].push(n),e=n.offsetTop,t},[]).map(function(e){return t.match(e)}):[this.match(this.elements)]}},write:function(t){t.rows.forEach(function(t){var e=t.height;return fe(t.elements,"minHeight",e)})},events:["load","resize"]},methods:{match:function(t){if(t.length<2)return{};var e=[],n=0;return t.forEach(function(t){var i,r;wt(t)||(i=X(t,"style"),r=X(t,"hidden"),X(t,{style:(i||"")+";display:block !important;",hidden:null})),n=Math.max(n,t.offsetHeight),e.push(t.offsetHeight),N(i)||X(t,{style:i,hidden:r})}),t=t.filter(function(t,i){return e[i]<n}),{height:n,elements:t}}}})}function Yn(t){function e(t){return t&&t.offsetHeight||0}t.component("height-viewport",{props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},defaults:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{write:function(){fe(this.$el,"boxSizing","border-box");var t,n=je(window),i=0;if(this.expand){fe(this.$el,{height:"",minHeight:""});var r=n-e(document.documentElement);r>0&&(t=e(this.$el)+r)}else{var o=Ie(this.$el).top;o<n/2&&this.offsetTop&&(i+=o),!0===this.offsetBottom?i+=e(this.$el.nextElementSibling):B(this.offsetBottom)?i+=n/100*this.offsetBottom:this.offsetBottom&&p(this.offsetBottom,"px")?i+=_(this.offsetBottom):S(this.offsetBottom)&&(i+=e(tt(this.offsetBottom,this.$el))),t=i?"calc(100vh - "+i+"px)":"100vh"}if(t){fe(this.$el,{height:"",minHeight:t});var s=this.$el.offsetHeight;this.minHeight&&this.minHeight>s&&fe(this.$el,"minHeight",this.minHeight),n-i>=s&&fe(this.$el,"height",t)}},events:["load","resize"]}})}var Xn,Gn='<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',Jn='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',Qn='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',Kn='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',ti='<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',ei='<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',ni='<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',ii='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',ri='<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',oi='<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',si='<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',ai='<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',li='<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',ci='<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>',ui='<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',hi='<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>';function di(t){var e={},n={spinner:ui,totop:hi,marker:Qn,"close-icon":Gn,"close-large":Jn,"navbar-toggle-icon":Kn,"overlay-icon":ti,"pagination-next":ei,"pagination-previous":ni,"search-icon":ii,"search-large":ri,"search-navbar":oi,"slidenav-next":si,"slidenav-next-large":ai,"slidenav-previous":li,"slidenav-previous-large":ci};function i(e,n){t.component(e,t.components.icon.extend({name:e,mixins:n?[n]:[],defaults:{icon:e}}))}t.component("icon",t.components.svg.extend({attrs:["icon","ratio"],mixins:[Dn],name:"icon",args:"icon",props:["icon"],defaults:{exclude:["id","style","class","src","icon"]},init:function(){ne(this.$el,"uk-icon"),Xe&&(this.icon=q(q(this.icon,"left","right"),"previous","next"))},methods:{getSvg:function(){var t=function(t){return n[t]?(e[t]||(e[t]=Se(n[t].trim())),e[t]):null}(this.icon);return t?Nt.resolve(t):Nt.reject("Icon not found.")}}})),["marker","navbar-toggle-icon","overlay-icon","pagination-previous","pagination-next","totop"].forEach(function(t){return i(t)}),["slidenav-previous","slidenav-next"].forEach(function(t){return i(t,{init:function(){ne(this.$el,"uk-slidenav"),se(this.$el,"uk-slidenav-large")&&(this.icon+="-large")}})}),i("search-icon",{init:function(){se(this.$el,"uk-search-icon")&&ft(this.$el,".uk-search-large").length?this.icon="search-large":ft(this.$el,".uk-search-navbar").length&&(this.icon="search-navbar")}}),i("close",{init:function(){this.icon="close-"+(se(this.$el,"uk-close-large")?"large":"icon")}}),i("spinner",{connected:function(){var t=this;this.svg.then(function(e){return 1!==t.ratio&&fe(Se("circle",e),"stroke-width",1/t.ratio)},V)}}),t.icon.add=function(i){Object.keys(i).forEach(function(t){n[t]=i[t],delete e[t]}),t._initialized&&ee(document.body,function(e){var n=t.getComponent(e,"icon");n&&n.$reset()})}}function fi(t){t.component("leader",{mixins:[Dn],props:{fill:String,media:"media"},defaults:{fill:"",media:!1,clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||me("leader-fill")}},connected:function(){var t;t=Gt(this.$el,'<span class="'+this.clsWrapper+'">'),this.wrapper=t[0]},disconnected:function(){Jt(this.wrapper.childNodes)},update:[{read:function(t){var e=t.changed,n=t.width,i=n;return{width:n=Math.floor(this.$el.offsetWidth/2),changed:e||i!==n,hide:this.media&&!window.matchMedia(this.media).matches}},write:function(t){ae(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,X(this.wrapper,this.attrFill,new Array(t.width).join(this.fill)))},events:["load","resize"]}]})}function pi(t){t.component("margin",{props:{margin:String,firstColumn:Boolean},defaults:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(t){var e=this.$el.children;if(!e.length||!wt(this.$el))return t.rows=!1;t.stacks=!0;for(var n=[[]],i=0;i<e.length;i++){var r=e[i],o=r.getBoundingClientRect();if(o.height)for(var s=n.length-1;s>=0;s--){var a=n[s];if(!a[0]){a.push(r);break}var l=a[0].getBoundingClientRect();if(o.top>=Math.floor(l.bottom)){n.push([r]);break}if(Math.floor(o.bottom)>l.top){if(t.stacks=!1,o.left<l.left&&!Xe){a.unshift(r);break}a.push(r);break}if(0===s){n.unshift([r]);break}}}t.rows=n},write:function(t){var e=this;t.rows.forEach(function(t,n){return t.forEach(function(t,i){ae(t,e.margin,0!==n),ae(t,e.firstColumn,0===i)})})},events:["load","resize"]}})}function gi(t){t.component("modal",{mixins:[On],defaults:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){se(this.panel,"uk-margin-auto-vertical")?ne(this.$el,"uk-flex"):fe(this.$el,"display","block"),je(this.$el)}},{name:"hidden",self:!0,handler:function(){fe(this.$el,"display",""),ie(this.$el,"uk-flex")}}]}),t.component("overflow-auto",{mixins:[Dn],computed:{modal:function(t,e){return dt(e,".uk-modal")},panel:function(t,e){return dt(e,".uk-modal-dialog")}},connected:function(){fe(this.$el,"minHeight",150)},update:{write:function(){if(this.panel&&this.modal){var t=fe(this.$el,"maxHeight");fe(fe(this.$el,"maxHeight",150),"maxHeight",Math.max(150,150+je(this.modal)-this.panel.offsetHeight)),t!==fe(this.$el,"maxHeight")&&$t(this.$el,"resize")}},events:["load","resize"]}}),t.modal.dialog=function(e,n){var i=t.modal(' <div class="uk-modal"> <div class="uk-modal-dialog">'+e+"</div> </div> ",n);return i.show(),kt(i.$el,"hidden",function(t){t.target===t.currentTarget&&i.$destroy(!0)}),i},t.modal.alert=function(e,n){return n=W({bgClose:!1,escClose:!1,labels:t.modal.labels},n),new Nt(function(i){return kt(t.modal.dialog(' <div class="uk-modal-body">'+(S(e)?e:Rt(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+n.labels.ok+"</button> </div> ",n).$el,"hide",i)})},t.modal.confirm=function(e,n){return n=W({bgClose:!1,escClose:!0,labels:t.modal.labels},n),new Nt(function(i,r){var o=t.modal.dialog(' <form> <div class="uk-modal-body">'+(S(e)?e:Rt(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+n.labels.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+n.labels.ok+"</button> </div> </form> ",n),s=!1;kt(o.$el,"submit","form",function(t){t.preventDefault(),i(),s=!0,o.hide()}),kt(o.$el,"hide",function(){s||r()})})},t.modal.prompt=function(e,n,i){return i=W({bgClose:!1,escClose:!0,labels:t.modal.labels},i),new Nt(function(r){var o=t.modal.dialog(' <form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(S(e)?e:Rt(e))+'</label> <input class="uk-input" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+i.labels.cancel+'</button> <button class="uk-button uk-button-primary">'+i.labels.ok+"</button> </div> </form> ",i),s=Se("input",o.$el);s.value=n;var a=!1;kt(o.$el,"submit","form",function(t){t.preventDefault(),r(s.value),a=!0,o.hide()}),kt(o.$el,"hide",function(){a||r(null)})})},t.modal.labels={ok:"Ok",cancel:"Cancel"}}function vi(t){t.component("nav",t.components.accordion.extend({name:"nav",defaults:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}}))}function mi(t){t.component("navbar",{mixins:[Dn],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:"query",duration:Number},defaults:{dropdown:".uk-navbar-nav > li",align:Xe?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200},computed:{boundary:function(t,e){var n=t.boundary,i=t.boundaryAlign;return!0===n||i?e:n},pos:function(t){return"bottom-"+t.align}},beforeConnect:function(){var t=this.$props.dropbar;this.dropbar=t&&(S(t)&&tt(t,this.$el)||Se("<div></div>")),this.dropbar&&(ne(this.dropbar,"uk-navbar-dropbar"),"slide"===this.dropbarMode&&ne(this.dropbar,"uk-navbar-dropbar-slide"))},disconnected:function(){this.dropbar&&Yt(this.dropbar)},update:function(){t.drop(Ae(this.dropdown+" ."+this.clsDrop,this.$el).filter(function(e){return!t.getComponent(e,"drop")&&!t.getComponent(e,"dropdown")}),W({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,n=this.getActive();n&&n.toggle&&!Ct(n.toggle.$el,e)&&!n.tracker.movesTo(n.$el)&&n.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!ut(this.dropbar,":hover")&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){this.dropbar.parentNode||Zt(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",capture:!0,filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=e.dir;this.clsDrop&&ne(n,this.clsDrop+"-dropbar"),"bottom"===i&&this.transitionTo(n.offsetHeight+_(fe(n,"marginTop"))+_(fe(n,"marginBottom")),n)}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=this.getActive();ut(this.dropbar,":hover")&&i&&i.$el===n&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=this.getActive();(!i||i&&i.$el===n)&&this.transitionTo(0)}}],methods:{getActive:function(){var e=t.drop.getActive();return e&&w(e.mode,"hover")&&Ct(e.toggle.$el,this.$el)&&e},transitionTo:function(t,e){var n=this.dropbar,i=wt(n)?je(n):0;return fe(e=i<t&&e,{height:i,overflow:"hidden"}),je(n,i),ke.cancel([e,n]),ke.start([e,n],{height:t},this.duration).catch(V).then(function(){return fe(e,{height:"",overflow:""})})}}})}function wi(t){t.component("offcanvas",{mixins:[On],args:"mode",props:{content:String,mode:String,flip:Boolean,overlay:Boolean},defaults:{content:".uk-offcanvas-content",mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContent:"uk-offcanvas-content",clsContentAnimation:"uk-offcanvas-content-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close"},computed:{content:function(t){return Se(t.content)||document.body},clsFlip:function(t){var e=t.flip,n=t.clsFlip;return e?n:""},clsOverlay:function(t){var e=t.overlay,n=t.clsOverlay;return e?n:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,n=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":n},clsContentAnimation:function(t){var e=t.mode,n=t.clsContentAnimation;return"push"!==e&&"reveal"!==e?"":n},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},update:{write:function(){this.getActive()===this&&((this.overlay||this.clsContentAnimation)&&He(this.content,He(window)-this.scrollbarWidth),this.overlay&&(je(this.content,je(window)),Xn&&(this.content.scrollTop=Xn.y)))},events:["resize"]},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current;e.hash&&Se(e.hash,this.content)&&(Xn=null,this.hide())}},{name:"beforescroll",filter:function(){return this.overlay},handler:function(t,e,n){e&&n&&this.isToggled()&&Se(n,this.content)&&(Tt(this.$el,"hidden",function(){return e.scrollTo(n)}),t.preventDefault())}},{name:"show",self:!0,handler:function(){Xn=Xn||{x:window.pageXOffset,y:window.pageYOffset},"reveal"!==this.mode||se(this.panel,this.clsMode)||(Xt(this.panel,"<div>"),ne(this.panel.parentNode,this.clsMode)),fe(document.documentElement,"overflowY",(!this.clsContentAnimation||this.flip)&&this.scrollbarWidth&&this.overlay?"scroll":""),ne(document.body,this.clsContainer,this.clsFlip,this.clsOverlay),je(document.body),ne(this.content,this.clsContentAnimation),ne(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),ne(this.$el,this.clsOverlay),fe(this.$el,"display","block"),je(this.$el)}},{name:"hide",self:!0,handler:function(){ie(this.content,this.clsContentAnimation);var t=this.getActive();("none"===this.mode||t&&t!==this&&t!==this.prev)&&$t(this.panel,"transitionend")}},{name:"hidden",self:!0,handler:function(){if("reveal"===this.mode&&Jt(this.panel),this.overlay){if(!Xn){var t=this.content,e=t.scrollLeft,n=t.scrollTop;Xn={x:e,y:n}}}else Xn={x:window.pageXOffset,y:window.pageYOffset};ie(this.panel,this.clsSidebarAnimation,this.clsMode),ie(this.$el,this.clsOverlay),fe(this.$el,"display",""),ie(document.body,this.clsContainer,this.clsFlip,this.clsOverlay),document.body.scrollTop=Xn.y,fe(document.documentElement,"overflowY",""),He(this.content,""),je(this.content,""),window.scrollTo(Xn.x,Xn.y),Xn=null}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&Ln(t)&&("swipeLeft"===t.type&&!this.flip||"swipeRight"===t.type&&this.flip)&&this.hide()}}]})}function yi(t){t.component("responsive",{props:["width","height"],init:function(){ne(this.$el,"uk-responsive-width")},update:{read:function(){return!!(wt(this.$el)&&this.width&&this.height)&&{width:He(this.$el.parentNode),height:this.height}},write:function(t){je(this.$el,Y.contain({height:this.height,width:this.width},t).height)},events:["load","resize"]}})}function xi(t){t.component("scroll",{props:{duration:Number,offset:Number},defaults:{duration:1e3,offset:0},methods:{scrollTo:function(t){var e=this;t=t&&Se(t)||document.body;var n=je(document),i=je(window),r=Ie(t).top-this.offset;if(r+i>n&&(r=n-i),$t(this.$el,"beforescroll",[this,t])){var o=Date.now(),s=window.pageYOffset,a=function(){var n,i=s+(r-s)*(n=F((Date.now()-o)/e.duration),.5*(1-Math.cos(Math.PI*n)));window.scrollTo(window.pageXOffset,i),i!==r?requestAnimationFrame(a):$t(e.$el,"scrolled",[e,t])};a()}}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(gt(this.$el.hash).substr(1)))}}})}function bi(t){t.component("scrollspy",{args:"cls",props:{cls:"list",target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},defaults:{cls:[],target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"},computed:{elements:function(t,e){var n=t.target;return n?Ae(n,e):[e]}},update:[{write:function(){this.hidden&&fe(bt(this.elements,":not(."+this.inViewClass+")"),"visibility","hidden")}},{read:function(e){var n=this;if(!t._initialized)return"complete"===document.readyState&&requestAnimationFrame(function(){return n.$emit()}),!1;this.elements.forEach(function(t,i){var r=e[i];if(!r||r.el!==t){var o=K(t,"uk-scrollspy-class");r={el:t,toggles:o&&o.split(",")||n.cls}}r.show=Ve(t,n.offsetTop,n.offsetLeft),e[i]=r})},write:function(e){var n=this,i=1===this.elements.length?1:0;this.elements.forEach(function(r,o){var s=e[o],a=s.toggles[o]||s.toggles[0];if(!s.show||s.inview||s.timer)!s.show&&s.inview&&n.repeat&&(s.timer&&(clearTimeout(s.timer),delete s.timer),fe(r,"visibility",n.hidden?"hidden":""),ie(r,n.inViewClass),ae(r,a),$t(r,"outview"),t.update(r),s.inview=!1);else{var l=function(){fe(r,"visibility",""),ne(r,n.inViewClass),ae(r,a),$t(r,"inview"),t.update(r),s.inview=!0,delete s.timer};n.delay&&i?s.timer=setTimeout(l,n.delay*i):l(),i++}})},events:["scroll","load","resize"]}]})}function Ci(t){t.component("scrollspy-nav",{props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},defaults:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:function(t,e){return Ae('a[href^="#"]',e).filter(function(t){return t.hash})},elements:function(){return this.closest?dt(this.links,this.closest):this.links},targets:function(){return Ae(this.links.map(function(t){return t.hash}).join(","))}},update:[{read:function(){this.scroll&&t.scroll(this.links,{offset:this.offset||0})}},{read:function(t){var e=this,n=window.pageYOffset+this.offset+1,i=je(document)-je(window)+this.offset;t.active=!1,this.targets.every(function(r,o){var s=Ie(r).top,a=o+1===e.targets.length;if(!e.overflow&&(0===o&&s>n||a&&s+r.offsetTop<n))return!1;if(!a&&Ie(e.targets[o+1]).top<=n)return!0;if(n>=i)for(var l=e.targets.length-1;l>o;l--)if(Ve(e.targets[l])){r=e.targets[l];break}return!(t.active=Se(bt(e.links,'[href="#'+r.id+'"]')))})},write:function(t){var e=t.active;this.links.forEach(function(t){return t.blur()}),ie(this.elements,this.cls),e&&$t(this.$el,"active",[e,ne(this.closest?dt(e,this.closest):e,this.cls)])},events:["scroll","load","resize"]}]})}function ki(t){function e(t,e){var n=e.$props,i=e.$el,r=e[t+"Offset"],o=n[t];if(o){if(B(o))return r+_(o);if(S(o)&&o.match(/^-?\d+vh$/))return je(window)*_(o)/100;var s=!0===o?i.parentNode:tt(o,i);return s?Ie(s).top+s.offsetHeight:void 0}}t.component("sticky",{mixins:[Dn],attrs:!0,props:{top:null,bottom:Boolean,offset:Number,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:"query",showOnUp:Boolean,media:"media",target:Number},defaults:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,media:!1,target:!1},computed:{selTarget:function(t,e){var n=t.selTarget;return n&&Se(n,e)||e}},connected:function(){this.placeholder=Se('<div class="uk-sticky-placeholder"></div>'),this.widthElement=this.$props.widthElement||this.placeholder,this.isActive||this.hide()},disconnected:function(){this.isActive&&(this.isActive=!1,this.hide(),ie(this.selTarget,this.clsInactive)),Yt(this.placeholder),this.placeholder=null,this.widthElement=null},ready:function(){var t=this;if(this.target&&location.hash&&window.pageYOffset>0){var e=Se(location.hash);e&&on.read(function(){var n=Ie(e).top,i=Ie(t.$el).top,r=t.$el.offsetHeight;i+r>=n&&i<=n+e.offsetHeight&&window.scrollTo(0,n-r-t.target-t.offset)})}},events:[{name:"active",self:!0,handler:function(){oe(this.selTarget,this.clsInactive,this.clsActive)}},{name:"inactive",self:!0,handler:function(){oe(this.selTarget,this.clsActive,this.clsInactive)}}],update:[{write:function(){var t=this.placeholder,n=(this.isActive?t:this.$el).offsetHeight;fe(t,W({height:"absolute"!==fe(this.$el,"position")?n:""},fe(this.$el,["marginTop","marginBottom","marginLeft","marginRight"]))),Ct(t,document)||(Zt(this.$el,t),X(t,"hidden","")),X(this.widthElement,"hidden",null),this.width=this.widthElement.offsetWidth,X(this.widthElement,"hidden",this.isActive?null:""),this.topOffset=Ie(this.isActive?t:this.$el).top,this.bottomOffset=this.topOffset+n;var i=e("bottom",this);this.top=Math.max(_(e("top",this)),this.topOffset)-this.offset,this.bottom=i&&i-n,this.inactive=this.media&&!window.matchMedia(this.media).matches,this.isActive&&this.update()},events:["load","resize"]},{read:function(t,e){var n=e.scrollY;return void 0===n&&(n=window.pageYOffset),{scroll:this.scroll=n,visible:wt(this.$el)}},write:function(t,e){var n=this,i=t.visible,r=t.scroll;void 0===e&&(e={});var o=e.dir;if(!(r<0||!i||this.disabled||this.showOnUp&&!o))if(this.inactive||r<this.top||this.showOnUp&&(r<=this.top||"down"===o||"up"===o&&!this.isActive&&r<=this.bottomOffset)){if(!this.isActive)return;this.isActive=!1,this.animation&&r>this.topOffset?(Me.cancel(this.$el),Me.out(this.$el,this.animation).then(function(){return n.hide()},V)):this.hide()}else this.isActive?this.update():this.animation?(Me.cancel(this.$el),this.show(),Me.in(this.$el,this.animation).catch(V)):this.show()},events:["scroll"]}],methods:{show:function(){this.isActive=!0,this.update(),X(this.placeholder,"hidden",null)},hide:function(){this.isActive&&!se(this.selTarget,this.clsActive)||$t(this.$el,"inactive"),ie(this.$el,this.clsFixed,this.clsBelow),fe(this.$el,{position:"",top:"",width:""}),X(this.placeholder,"hidden","")},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);this.bottom&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),fe(this.$el,{position:"fixed",top:e+"px",width:this.width}),se(this.selTarget,this.clsActive)?t||$t(this.$el,"inactive"):t&&$t(this.$el,"active"),ae(this.$el,this.clsBelow,this.scroll>this.bottomOffset),ne(this.$el,this.clsFixed)}}})}var Li={};function Ti(t){t.component("svg",{attrs:!0,props:{id:String,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String},defaults:{ratio:1,id:!1,exclude:["src"],class:""},init:function(){this.class+=" uk-svg"},connected:function(){var t=this;if(!this.icon&&w(this.src,"#")){var i,r=this.src.split("#");r.length>1&&(i=r,this.src=i[0],this.icon=i[1])}this.svg=this.getSvg().then(function(i){var r;if(S(i)?(t.icon&&w(i,"<symbol")&&(i=function(t,i){var r;if(!n[t])for(n[t]={};r=e.exec(t);)n[t][r[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+r[1]+"svg>";return n[t][i]}(i,t.icon)||i),r=Se(i.substr(i.indexOf("<svg")))):r=i.cloneNode(!0),!r)return Nt.reject("SVG not found.");var o=X(r,"viewBox");for(var s in o&&(o=o.split(" "),t.width=t.$props.width||o[2],t.height=t.$props.height||o[3]),t.width*=t.ratio,t.height*=t.ratio,t.$options.props)t[s]&&!w(t.exclude,s)&&X(r,s,t[s]);t.id||J(r,"id"),t.width&&!t.height&&J(r,"height"),t.height&&!t.width&&J(r,"width");var a=t.$el;if(mt(a)||"CANVAS"===a.tagName){X(a,{hidden:!0,id:null});var l=a.nextElementSibling;l&&r.isEqualNode(l)?r=l:Zt(a,r)}else{var c=a.lastElementChild;c&&r.isEqualNode(c)?r=c:Ft(a,r)}return t.svgEl=r,r},V)},disconnected:function(){var t=this;mt(this.$el)&&X(this.$el,{hidden:null,id:this.id||null}),this.svg&&this.svg.then(function(e){return(!t._connected||e!==t.svgEl)&&Yt(e)},V),this.svg=this.svgEl=null},methods:{getSvg:function(){var t=this;return this.src?Li[this.src]?Li[this.src]:(Li[this.src]=new Nt(function(e,n){d(t.src,"data:")?e(decodeURIComponent(t.src.split(",")[1])):jt(t.src).then(function(t){return e(t.response)},function(){return n("SVG not found.")})}),Li[this.src]):Nt.reject()}}});var e=/<symbol(.*?id=(['"])(.*?)\2[^]*?<\/)symbol>/g,n={}}function $i(t){t.component("switcher",{mixins:[_n],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},defaults:{connect:"~.uk-switcher",toggle:"> *",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item",queued:!0},computed:{connects:function(t,e){return et(t.connect,e)},toggles:function(t,e){return Ae(t.toggle,e)}},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(K(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){Ln(t)&&(t.preventDefault(),window.getSelection().toString()||this.show("swipeLeft"===t.type?"next":"previous"))}}],update:function(){var t=this;this.connects.forEach(function(e){return t.updateAria(e.children)}),this.show(bt(this.toggles,"."+this.cls)[0]||this.toggles[this.active]||this.toggles[0])},methods:{show:function(t){for(var e,n=this,i=this.toggles.length,r=!!this.connects.length&&zt(bt(this.connects[0].children,"."+this.cls)[0]),o=r>=0,s="previous"===t?-1:1,a=qt(t,this.toggles,r),l=0;l<i;l++,a=(a+s+i)%i)if(!ut(n.toggles[a],".uk-disabled, [disabled]")){e=n.toggles[a];break}!e||r>=0&&se(e,this.cls)||r===a||(ie(this.toggles,this.cls),X(this.toggles,"aria-expanded",!1),ne(e,this.cls),X(e,"aria-expanded",!0),this.connects.forEach(function(t){o?n.toggleElement([t.children[r],t.children[a]]):n.toggleNow(t.children[a])}))}}})}function Ei(t){t.component("tab",t.components.switcher.extend({mixins:[Dn],name:"tab",props:{media:"media"},defaults:{media:960,attrItem:"uk-tab-item"},init:function(){var e=se(this.$el,"uk-tab-left")?"uk-tab-left":!!se(this.$el,"uk-tab-right")&&"uk-tab-right";e&&t.toggle(this.$el,{cls:e,mode:"media",media:this.media})}}))}function Mi(t){t.component("toggle",{mixins:[t.mixin.togglable],args:"target",props:{href:String,target:null,mode:"list",media:"media"},defaults:{href:!1,target:!1,mode:"click",queued:!0,media:!1},computed:{target:function(t,e){var n=t.href,i=t.target;return(i=et(i||n,e)).length&&i||[e]}},events:[{name:nn+" "+rn,filter:function(){return w(this.mode,"hover")},handler:function(t){Ln(t)||this.toggle("toggle"+(t.type===nn?"show":"hide"))}},{name:"click",filter:function(){return w(this.mode,"click")||Qe},handler:function(t){var e;(Ln(t)||w(this.mode,"click"))&&((dt(t.target,'a[href="#"], button')||(e=dt(t.target,"a[href]"))&&(this.cls||!wt(this.target)||e.hash&&ut(this.target,e.hash)))&&Tt(document,"click",function(t){return t.preventDefault()}),this.toggle())}}],update:{write:function(){if(w(this.mode,"media")&&this.media){var t=this.isToggled(this.target);(window.matchMedia(this.media).matches?!t:t)&&this.toggle()}},events:["load","resize"]},methods:{toggle:function(t){$t(this.target,t||"toggle",[this])&&this.toggleElement(this.target)}}})}function Si(t){t.component("video",{args:"autoplay",props:{automute:Boolean,autoplay:Boolean},defaults:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!G(this.$el,"preload")&&(this.$el.preload="none")},ready:function(){this.player=new gn(this.$el),this.automute&&this.player.mute()},update:[{read:function(t,e){var n=e.type;return!(!this.player||!("scroll"!==n&&"resize"!==n||this.inView))&&{visible:wt(this.$el)&&"hidden"!==fe(this.$el,"visibility"),inView:this.inView&&Ve(this.$el)}},write:function(t){var e=t.visible,n=t.inView;!e||this.inView&&!n?this.player.pause():(!0===this.autoplay||this.inView&&n)&&this.player.play()},events:["load","resize","scroll"]}]})}function Ai(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),"translateX("+t+(t?e:"")+")"}function Bi(t){return"scale3d("+t+", "+t+", 1)"}function Ni(t){if(!Ni.installed){var e=t.util,n=e.$,i=e.assign,r=e.clamp,o=e.fastdom,s=e.getIndex,a=e.hasClass,l=e.isNumber,c=e.isRtl,u=e.Promise,h=e.toNodes,d=e.trigger;t.mixin.slider={attrs:!0,mixins:[function(t){var e=t.util.pointerDown;return{props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},defaults:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.startAutoplay()},disconnected:function(){this.stopAutoplay()},events:[{name:"visibilitychange",el:document,handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}},{name:e,handler:"stopAutoplay"},{name:"mouseenter",filter:function(){return this.autoplay},handler:function(){this.isHovering=!0}},{name:"mouseleave",filter:function(){return this.autoplay},handler:function(){this.isHovering=!1}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.autoplay&&(this.interval=setInterval(function(){return!(t.isHovering&&t.pauseOnHover)&&!t.stack.length&&t.show("next")},this.autoplayInterval))},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}}}(t),function(t){var e=t.util,n=e.getPos,i=e.includes,r=e.isRtl,o=e.isTouch,s=e.off,a=e.on,l=e.pointerDown,c=e.pointerMove,u=e.pointerUp,h=e.preventClick,d=e.trigger;return{defaults:{threshold:10,preventCatch:!1},init:function(){var t=this;["start","move","end"].forEach(function(e){var i=t[e];t[e]=function(e){var o=n(e).x*(r?-1:1);t.prevPos=o!==t.pos?t.pos:t.prevPos,t.pos=o,i(e)}})},events:[{name:l,delegate:function(){return this.slidesSelector},handler:function(t){var e;!o(t)&&!(e=t.target).children.length&&e.childNodes.length||t.button>0||this.length<2||this.preventCatch||this.start(t)}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.translate(this.percent),this._transitioner.cancel(),this.dragging=!0,this.stack=[]):this.prevIndex=this.index,this.unbindMove=a(document,c,this.move,{capture:!0,passive:!1}),a(window,"scroll",this.unbindMove),a(document,u,this.end,!0)},move:function(t){var e=this,n=this.pos-this.drag;if(!(0===n||this.prevPos===this.pos||!this.dragging&&Math.abs(n)<this.threshold)){t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=n<0?1:-1;for(var r=this.slides,o=this.prevIndex,s=Math.abs(n),a=this.getIndex(o+this.dir,o),l=this._getDistance(o,a)||r[o].offsetWidth;a!==o&&s>l;)e.drag-=l*e.dir,o=a,s-=l,a=e.getIndex(o+e.dir,o),l=e._getDistance(o,a)||r[o].offsetWidth;this.percent=s/l;var c,u=r[o],h=r[a],f=this.index!==a,p=o===a;[this.index,this.prevIndex].filter(function(t){return!i([a,o],t)}).forEach(function(t){d(r[t],"itemhidden",[e]),p&&(c=!0,e.prevIndex=o)}),(this.index===o&&this.prevIndex!==o||c)&&d(r[this.index],"itemshown",[this]),f&&(this.prevIndex=o,this.index=a,!p&&d(u,"beforeitemhide",[this]),d(h,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),u,!p&&h),f&&(!p&&d(u,"itemhide",[this]),d(h,"itemshow",[this]))}},end:function(){if(s(window,"scroll",this.unbindMove),this.unbindMove(),s(document,u,this.end,!0),this.dragging){if(this.dragging=null,this.index===this.prevIndex)this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null;else{var t=(r?this.dir*(r?1:-1):this.dir)<0==this.prevPos>this.pos;this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(this.dir>0&&!t||this.dir<0&&t?"next":"previous",!0)}h()}this.drag=this.percent=null}}}}(t),function(t){var e=t.util,n=e.$,i=e.$$,r=e.data,o=e.html,s=e.toggleClass,a=e.toNumber;return{defaults:{selNav:!1},computed:{nav:function(t,e){var i=t.selNav;return n(i,e)},navItemSelector:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return i(this.navItemSelector,e)}},update:[{write:function(){var t=this;this.nav&&this.length!==this.nav.children.length&&o(this.nav,this.slides.map(function(e,n){return"<li "+t.attrItem+'="'+n+'"><a href="#"></a></li>'}).join("")),s(i(this.navItemSelector,this.$el).concat(this.nav),"uk-hidden",!this.maxIndex),this.updateNav()},events:["load","resize"]}],events:[{name:"click",delegate:function(){return this.navItemSelector},handler:function(t){t.preventDefault(),t.current.blur(),this.show(r(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var t=this,e=this.getValidIndex();this.navItems.forEach(function(n){var i=r(n,t.attrItem);s(n,t.clsActive,a(i)===e),s(n,"uk-invisible",t.finite&&("previous"===i&&0===e||"next"===i&&e>=t.maxIndex))})}}}}(t)],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number},defaults:{easing:"ease",finite:!1,velocity:1,index:0,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}},computed:{duration:function(t,e){var n=t.velocity;return Di(e.offsetWidth/n)},length:function(){return this.slides.length},list:function(t,e){var i=t.selList;return n(i,e)},maxIndex:function(){return this.length-1},slidesSelector:function(t){return t.selList+" > *"},slides:function(){return h(this.list.children)}},methods:{show:function(t,e){var n=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var i=this.stack,r=e?0:i.length,s=function(){i.splice(r,1),i.length&&n.show(i.shift(),!0)};if(i[e?"unshift":"push"](t),!e&&i.length>1)2===i.length&&this._transitioner.forward(Math.min(this.duration,200));else{var l=this.index,c=a(this.slides,this.clsActive)&&this.slides[l],h=this.getIndex(t,this.index),f=this.slides[h];if(c!==f){if(this.dir=function(t,e){return"next"===t?1:"previous"===t?-1:t<l?-1:1}(t),this.prevIndex=l,this.index=h,c&&d(c,"beforeitemhide",[this]),!d(f,"beforeitemshow",[this,c]))return this.index=this.prevIndex,void s();var p=this._show(c,f,e).then(function(){return c&&d(c,"itemhidden",[n]),d(f,"itemshown",[n]),new u(function(t){o.write(function(){i.shift(),i.length?n.show(i.shift(),!0):n._transitioner=null,t()})})});return c&&d(c,"itemhide",[this]),d(f,"itemshow",[this]),p}s()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),r(s(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,n){if(this._transitioner=this._getTransitioner(t,e,this.dir,i({easing:n?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!n&&!t)return this._transitioner.translate(1),u.resolve();var r=this.stack.length;return this._transitioner[r>1?"forward":"show"](r>1?Math.min(this.duration,75+75/(r-1)):this.duration,this.percent)},_getDistance:function(t,e){return new this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,n){void 0===e&&(e=this.prevIndex),void 0===n&&(n=this.index);var i=this._getTransitioner(e!==n&&e,n);return i.translate(t),i},_getTransitioner:function(t,e,n,i){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===n&&(n=this.dir||1),void 0===i&&(i=this.transitionOptions),new this.Transitioner(l(t)?this.slides[t]:t,l(e)?this.slides[e]:e,n*(c?-1:1),i)}}}}}function Di(t){return.5*t+300}function Ii(t){if(!Ii.installed){t.use(Ni);var e=t.mixin,n=t.util,i=n.addClass,r=n.assign,o=n.fastdom,s=n.isNumber,a=n.removeClass,l=function(t){var e=t.util.css,n={slide:{show:function(t){return[{transform:Ai(-100*t)},{transform:Ai()}]},percent:function(t){return n.translated(t)},translate:function(t,e){return[{transform:Ai(-100*e*t)},{transform:Ai(100*e*(1-t))}]}},translated:function(t){return Math.abs(e(t,"transform").split(",")[4]/t.offsetWidth)||0}};return n}(t),c=function(t){var e=t.util,n=e.createEvent,i=e.clamp,r=e.css,o=e.Deferred,s=e.noop,a=e.Promise,l=e.Transition,c=e.trigger;function u(t,e,i){c(t,n(e,!1,!1,i))}return function(t,e,n,c){var h=c.animation,d=c.easing,f=h.percent,p=h.translate,g=h.show;void 0===g&&(g=s);var v=g(n),m=new o;return{dir:n,show:function(r,o,c){var h=this;void 0===o&&(o=0);var f=c?"linear":d;return r-=Math.round(r*i(o,-1,1)),this.translate(o),u(e,"itemin",{percent:o,duration:r,timing:f,dir:n}),u(t,"itemout",{percent:1-o,duration:r,timing:f,dir:n}),a.all([l.start(e,v[1],r,f),l.start(t,v[0],r,f)]).then(function(){h.reset(),m.resolve()},s),m.promise},stop:function(){return l.stop([e,t])},cancel:function(){l.cancel([e,t])},reset:function(){for(var n in v[0])r([e,t],n,"")},forward:function(n,i){return void 0===i&&(i=this.percent()),l.cancel([e,t]),this.show(n,i,!0)},translate:function(i){this.reset();var o=p(i,n);r(e,o[1]),r(t,o[0]),u(e,"itemtranslatein",{percent:i,dir:n}),u(t,"itemtranslateout",{percent:1-i,dir:n})},percent:function(){return f(t||e,e,n)},getDistance:function(){return t.offsetWidth}}}}(t);t.mixin.slideshow={mixins:[e.slider],props:{animation:String},defaults:{animation:"slide",clsActivated:"uk-transition-active",Animations:l,Transitioner:c},computed:{animation:function(t){var e=t.animation,n=t.Animations;return r(e in n?n[e]:n.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(e){var n=e.target;t.update(n)},itemshow:function(){s(this.prevIndex)&&o.flush()},beforeitemshow:function(t){var e=t.target;i(e,this.clsActive)},itemshown:function(t){var e=t.target;i(e,this.clsActivated)},itemhidden:function(t){var e=t.target;a(e,this.clsActive,this.clsActivated)}}}}}function _i(t){if(!_i.installed){t.use(Ii);var e=t.mixin,n=t.util,i=n.$,r=n.addClass,o=n.ajax,s=n.append,a=n.assign,l=n.attr,c=n.css,u=n.getImage,h=n.html,d=n.index,f=n.on,p=n.pointerDown,g=n.pointerMove,v=n.removeClass,m=n.Transition,w=n.trigger,y=function(t){var e=t.mixin,n=t.util,i=n.assign,r=n.css;return i({},e.slideshow.defaults.Animations,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-r(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:Bi(.8)},{opacity:1,transform:Bi(1)}]},percent:function(t){return 1-r(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:Bi(1-.2*t)},{opacity:t,transform:Bi(.8+.2*t)}]}}})}(t);t.component("lightbox-panel",{mixins:[e.container,e.modal,e.togglable,e.slideshow],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},defaults:{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",pauseOnHover:!1,velocity:2,Animations:y,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href="#" uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href="#" uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'},created:function(){var t=this;this.$mount(s(this.container,this.template)),this.caption=i(".uk-lightbox-caption",this.$el),this.items.forEach(function(){return s(t.list,"<li></li>")})},events:[{name:g+" "+p+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.slidesSelector},handler:function(t){t.preventDefault(),this.hide()}},{name:"shown",self:!0,handler:"showControls"},{name:"hide",self:!0,handler:function(){this.hideControls(),v(this.slides,this.clsActive),m.stop(this.slides)}},{name:"keyup",el:document,handler:function(t){if(this.isToggled(this.$el))switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.preventCatch=!0,t.preventDefault(),this.toggleNow(this.$el,!0),this.animation=y.scale,v(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(t){var e=t.target,n=d(e),i=this.getItem(n).caption;c(this.caption,"display",i?"":"none"),h(this.caption,i);for(var r=0;r<=this.preload;r++)this.loadItem(this.getIndex(n+r)),this.loadItem(this.getIndex(n-r))}},{name:"itemshown",handler:function(){this.preventCatch=!1}},{name:"itemload",handler:function(t,e){var n,r=this,s=e.source,a=e.type,c=e.alt;if(this.setItem(e,"<span uk-spinner></span>"),s)if("image"===a||s.match(/\.(jp(e)?g|png|gif|svg)$/i))u(s).then(function(t){return r.setItem(e,'<img width="'+t.width+'" height="'+t.height+'" src="'+s+'" alt="'+(c||"")+'">')},function(){return r.setError(e)});else if("video"===a||s.match(/\.(mp4|webm|ogv)$/i)){var h=i("<video controls playsinline"+(e.poster?' poster="'+e.poster+'"':"")+' uk-video="'+this.videoAutoplay+'"></video>');l(h,"src",s),f(h,"error",function(){return r.setError(e)}),f(h,"loadedmetadata",function(){l(h,{width:h.videoWidth,height:h.videoHeight}),r.setItem(e,h)})}else if("iframe"===a)this.setItem(e,'<iframe class="uk-lightbox-iframe" src="'+s+'" frameborder="0" allowfullscreen></iframe>');else if(n=s.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/watch\?v=([^&\s]+)/)||s.match(/()youtu\.be\/(.*)/)){var d=n[2],p=function(t,i){return void 0===t&&(t=640),void 0===i&&(i=450),r.setItem(e,x("//www.youtube"+(n[1]||"")+".com/embed/"+d,t,i,r.videoAutoplay))};u("//img.youtube.com/vi/"+d+"/maxresdefault.jpg").then(function(t){var e=t.width,n=t.height;120===e&&90===n?u("//img.youtube.com/vi/"+d+"/0.jpg").then(function(t){var e=t.width,n=t.height;return p(e,n)},p):p(e,n)},p)}else(n=s.match(/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/))&&o("//vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(s),{responseType:"json"}).then(function(t){var i=t.response,o=i.height,s=i.width;return r.setItem(e,x("//player.vimeo.com/video/"+n[2],s,o,r.videoAutoplay))})}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);e.content||w(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[t]||{}},setItem:function(e,n){a(e,{content:n});var i=h(this.slides[this.items.indexOf(e)],n);w(this.$el,"itemloaded",[this,i]),t.update(i)},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),r(this.$el,"uk-active","uk-transition-active")},hideControls:function(){v(this.$el,"uk-active","uk-transition-active")}}})}function x(t,e,n,i){return'<iframe src="'+t+'" width="'+e+'" height="'+n+'" style="max-width: 100%; box-sizing: border-box;" frameborder="0" allowfullscreen uk-video="autoplay: '+i+'" uk-responsive></iframe>'}}function Oi(t){if(!Oi.installed){var e=t.mixin,n=t.util,i=n.css,r=n.Dimensions,o=n.each,s=n.getImage,a=n.includes,l=n.isNumber,c=n.isUndefined,u=n.toFloat,h=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity"];e.parallax={props:h.reduce(function(t,e){return t[e]="list",t},{media:"media"}),defaults:h.reduce(function(t,e){return t[e]=void 0,t},{media:!1}),computed:{props:function(t,e){var n=this;return h.reduce(function(r,o){if(c(t[o]))return r;var s,l,h,d=o.match(/color/i),f=d||"opacity"===o,p=t[o].slice(0);f&&i(e,o,""),p.length<2&&p.unshift(("scale"===o?1:f?i(e,o):0)||0);var g=a(p.join(""),"%")?"%":"px";if(d){var v=e.style.color;p=p.map(function(t){return i(i(e,"color",t),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(function(t){return u(t)})}),e.style.color=v}else p=p.map(u);if(o.match(/^bg/))if(i(e,"background-position-"+o[2],""),l=i(e,"backgroundPosition").split(" ")["x"===o[2]?0:1],n.covers){var m=Math.min.apply(Math,p),w=Math.max.apply(Math,p),y=p.indexOf(m)<p.indexOf(w);h=w-m,p=p.map(function(t){return t-(y?m:w)}),s=(y?-h:0)+"px"}else s=l;return r[o]={steps:p,unit:g,pos:s,bgPos:l,diff:h},r},{})},bgProps:function(){var t=this;return["bgx","bgy"].filter(function(e){return e in t.props})},covers:function(t,e){return function(t){var e=t.style.backgroundSize,n="cover"===i(i(t,"backgroundSize",""),"backgroundSize");return t.style.backgroundSize=e,n}(e)}},disconnected:function(){delete this._image},update:[{read:function(t){var e=this;if(t.active=!this.media||window.matchMedia(this.media).matches,t.image&&(t.image.dimEl={width:this.$el.offsetWidth,height:this.$el.offsetHeight}),!("image"in t)&&this.covers&&this.bgProps.length){var n=i(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");n&&(t.image=!1,s(n).then(function(n){t.image={width:n.naturalWidth,height:n.naturalHeight},e.$emit()}))}},write:function(t){var e=this,n=t.image,o=t.active;if(n)if(o){var s=n.dimEl,a=r.cover(n,s);this.bgProps.forEach(function(t){var i=e.props[t],o=i.diff,l=i.bgPos,c=i.steps,u="bgy"===t?"height":"width",h=a[u]-s[u];if(l.match(/%$|0px/)){if(h<o)s[u]=a[u]+o-h;else if(h>o){var d=parseFloat(l);d&&(e.props[t].steps=c.map(function(t){return t-(h-o)/(100/d)}))}a=r.cover(n,s)}}),i(this.$el,{backgroundSize:a.width+"px "+a.height+"px",backgroundRepeat:"no-repeat"})}else i(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["load","resize"]}],methods:{reset:function(){var t=this;o(this.getCss(0),function(e,n){return i(t.$el,n,"")})},getCss:function(t){var e=this.props,n=!1;return Object.keys(e).reduce(function(i,r){var o=e[r],s=o.steps,a=o.unit,l=o.pos,c=f(s,t);switch(r){case"x":case"y":if(n)break;var h=["x","y"].map(function(n){return r===n?c+a:e[n]?f(e[n].steps,t)+e[n].unit:0}),p=h[0],g=h[1];n=i.transform+=" translate3d("+p+", "+g+", 0)";break;case"rotate":i.transform+=" rotate("+c+"deg)";break;case"scale":i.transform+=" scale("+c+")";break;case"bgy":case"bgx":i["background-position-"+r[2]]="calc("+l+" + "+(c+a)+")";break;case"color":case"backgroundColor":case"borderColor":var v=d(s,t),m=v[0],w=v[1],y=v[2];i[r]="rgba("+m.map(function(t,e){return t+=y*(w[e]-t),3===e?u(t):parseInt(t,10)}).join(",")+")";break;case"blur":i.filter+=" blur("+c+"px)";break;case"hue":i.filter+=" hue-rotate("+c+"deg)";break;case"fopacity":i.filter+=" opacity("+c+"%)";break;case"grayscale":case"invert":case"saturate":case"sepia":i.filter+=" "+r+"("+c+"%)";break;default:i[r]=c}return i},{transform:"",filter:""})}}}}function d(t,e){var n=t.length-1,i=Math.min(Math.floor(n*e),n-1),r=t.slice(i,i+2);return r.push(1===e?1:e%(1/n)*n),r}function f(t,e){var n=d(t,e),i=n[0],r=n[1],o=n[2];return(l(i)?i+Math.abs(i-r)*o*(i<r?1:-1):+r).toFixed(2)}}function ji(t){var e=t.util.removeClass;return{update:[{write:function(){if(!this.stack.length&&!this.dragging){var t=this.getValidIndex();delete this.index,e(this.slides,this.clsActive,this.clsActivated),this.show(t)}},events:["load","resize"]}]}}function Hi(t,e){t.use(Oi);var n=t.mixin,i=t.util,r=i.closest,o=i.css,s=i.endsWith,a=i.noop,l=i.Transition;return{mixins:[n.parallax],computed:{item:function(){var n=t.getComponent(r(this.$el,".uk-"+e),e);return n&&r(this.$el,n.slidesSelector)}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){o(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.duration,s=n.timing,h=n.dir;l.cancel(this.$el),o(this.$el,this.getCss(u(e,h,i))),l.start(this.$el,this.getCss(c(e)?.5:h>0?1:0),r,s).catch(a)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){l.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.dir;l.cancel(this.$el),o(this.$el,this.getCss(u(e,r,i)))}}]};function c(t){return s(t,"in")}function u(t,e,n){return n/=2,c(t)?e<0?1-n:n:e<0?n:1-n}}return An.version="3.0.0-beta.42",function(t){t.mixin.class=Dn,t.mixin.container=In,t.mixin.modal=On,t.mixin.position=jn,t.mixin.togglable=_n}(An),function(t){t.use(Mi),t.use(Hn),t.use(Pn),t.use(Si),t.use(qn),t.use(Wn),t.use(Rn),t.use(Fn),t.use(Un),t.use(Yn),t.use(pi),t.use(Vn),t.use(Zn),t.use(fi),t.use(gi),t.use(vi),t.use(mi),t.use(wi),t.use(yi),t.use(xi),t.use(bi),t.use(Ci),t.use(ki),t.use(Ti),t.use(di),t.use($i),t.use(Ei),t.use(zn)}(An),An.use(function t(e){if(!t.installed){var n=e.util,i=n.$,r=n.empty,o=n.html;e.component("countdown",{mixins:[e.mixin.class],attrs:!0,props:{date:String,clsWrapper:String},defaults:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){var n=t.clsWrapper;return i(n.replace("%unit%","days"),e)},hours:function(t,e){var n=t.clsWrapper;return i(n.replace("%unit%","hours"),e)},minutes:function(t,e){var n=t.clsWrapper;return i(n.replace("%unit%","minutes"),e)},seconds:function(t,e){var n=t.clsWrapper;return i(n.replace("%unit%","seconds"),e)},units:function(){var t=this;return["days","hours","minutes","seconds"].filter(function(e){return t[e]})}},connected:function(){this.start()},disconnected:function(){var t=this;this.stop(),this.units.forEach(function(e){return r(t[e])})},events:[{name:"visibilitychange",el:document,handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e=this,n={total:t=this.date-Date.now(),seconds:t/1e3%60,minutes:t/1e3/60%60,hours:t/1e3/60/60%24,days:t/1e3/60/60/24};n.total<=0&&(this.stop(),n.days=n.hours=n.minutes=n.seconds=0),this.units.forEach(function(t){var i=String(Math.floor(n[t]));i=i.length<2?"0"+i:i;var r=e[t];r.textContent!==i&&((i=i.split("")).length!==r.children.length&&o(r,i.map(function(){return"<span></span>"}).join("")),i.forEach(function(t,e){return r.children[e].textContent=t}))})}},methods:{start:function(){var t=this;this.stop(),this.date&&this.units.length&&(this.$emit(),this.timer=setInterval(function(){return t.$emit()},1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}})}}),An.use(function t(e){if(!t.installed){var n=e.util,i=n.addClass,r=n.css,o=n.scrolledOver,s=n.sortBy,a=n.toFloat;e.component("grid-parallax",e.components.grid.extend({props:{target:String,translate:Number},defaults:{target:!1,translate:150},computed:{translate:function(t){var e=t.translate;return Math.abs(e)}},init:function(){i(this.$el,"uk-grid")},disconnected:function(){this.reset(),r(this.$el,"marginBottom","")},update:[{read:function(t){var e=t.rows;return{columns:e&&e[0]&&e[0].length||0,rows:e&&e.map(function(t){return s(t,"offsetLeft")})}},write:function(t){var e=t.columns;r(this.$el,"marginBottom",e>1?this.translate+a(r(r(this.$el,"marginBottom",""),"marginBottom")):"")},events:["load","resize"]},{read:function(){return{scrolled:o(this.$el)*this.translate}},write:function(t){var e=t.rows,n=t.columns,i=t.scrolled;if(!e||1===n||!i)return this.reset();e.forEach(function(t){return t.forEach(function(t,e){return r(t,"transform","translateY("+(e%2?i:i/8)+"px)")})})},events:["scroll","load","resize"]}],methods:{reset:function(){r(this.$el.children,"transform","")}}})),e.components.gridParallax.options.update.unshift({read:function(){this.reset()},events:["load","resize"]})}}),An.use(function t(e){if(!t.installed){e.use(_i);var n=e.util,i=n.$$,r=n.assign,o=n.data,s=n.index,a=e.components.lightboxPanel.options;e.component("lightbox",{attrs:!0,props:r({toggle:String},a.props),defaults:r({toggle:"a"},Object.keys(a.props).reduce(function(t,e){return t[e]=a.defaults[e],t},{})),computed:{toggles:function(t,e){var n=t.toggle;return i(n,e)}},disconnected:function(){this._destroy()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),t.current.blur(),this.show(s(this.toggles,t.current))}}],update:function(t){var e,n;t.toggles=t.toggles||this.toggles,this.panel&&this.animation&&(this.panel.$props.animation=this.animation,this.panel.$emit()),this.panel&&(e=t.toggles,n=this.toggles,e.length!==n.length||!e.every(function(t,e){return t===n[e]}))&&(t.toggles=this.toggles,this._destroy(),this._init())},methods:{_init:function(){return this.panel=this.panel||e.lightboxPanel(r({},this.$props,{items:this.toggles.reduce(function(t,e){return t.push(["href","caption","type","poster","alt"].reduce(function(t,n){return t["href"===n?"source":n]=o(e,n),t},{})),t},[])}))},_destroy:function(){this.panel&&(this.panel.$destroy(!0),this.panel=null)},show:function(t){return this.panel||this._init(),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}})}}),An.use(function t(e){var n;if(!t.installed){var i=e.util,r=i.append,o=i.apply,s=i.closest,a=i.css,l=i.pointerEnter,c=i.pointerLeave,u=i.remove,h=i.toFloat,d=i.Transition,f=i.trigger,p={};e.component("notification",{functional:!0,args:["message","status"],defaults:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},created:function(){p[this.pos]||(p[this.pos]=r(e.container,'<div class="uk-notification uk-notification-'+this.pos+'"></div>'));var t=a(p[this.pos],"display","block");this.$mount(r(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href="#" class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},ready:function(){var t=this,e=h(a(this.$el,"marginBottom"));d.start(a(this.$el,{opacity:0,marginTop:-this.$el.offsetHeight,marginBottom:0}),{opacity:1,marginTop:0,marginBottom:e}).then(function(){t.timeout&&(t.timer=setTimeout(t.close,t.timeout))})},events:(n={click:function(t){s(t.target,'a[href="#"]')&&t.preventDefault(),this.close()}},n[l]=function(){this.timer&&clearTimeout(this.timer)},n[c]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},n),methods:{close:function(t){var e=this,n=function(){f(e.$el,"close",[e]),u(e.$el),p[e.pos].children.length||a(p[e.pos],"display","none")};this.timer&&clearTimeout(this.timer),t?n():d.start(this.$el,{opacity:0,marginTop:-this.$el.offsetHeight,marginBottom:0}).then(n)}}}),e.notification.closeAll=function(t,n){o(document.body,function(i){var r=e.getComponent(i,"notification");!r||t&&t!==r.group||r.close(n)})}}}),An.use(function t(e){if(!t.installed){e.use(Oi);var n=e.mixin,i=e.util,r=i.clamp,o=i.css,s=i.scrolledOver,a=i.query;e.component("parallax",{mixins:[n.parallax],props:{target:String,viewport:Number,easing:Number},defaults:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var n=t.target;return n&&a(n,e)||e}},update:[{read:function(t){return{prev:t.percent,percent:function(t,e){return r(t*(1-(e-e*t)))}(s(this.target)/(this.viewport||1),this.easing)}},write:function(t,e){var n=t.prev,i=t.percent,r=t.active;"scroll"!==e.type&&(n=!1),r?n!==i&&o(this.$el,this.getCss(i)):this.reset()},events:["scroll","load","resize"]}]})}}),An.use(function t(e){if(!t.installed){e.use(Ni);var n=e.mixin,i=e.util,r=i.$,o=i.$$,s=i.addClass,a=i.css,l=i.data,c=i.includes,u=i.isNumeric,h=i.isUndefined,d=i.offset,f=i.toggleClass,p=i.toFloat,g=function(t){var e=t.util,n=e.assign,i=e.clamp,r=e.createEvent,o=e.css,s=e.Deferred,a=e.includes,l=e.index,c=e.isRtl,u=e.noop,h=e.sortBy,d=e.toNodes,f=e.Transition,p=e.trigger,g=n(function(t,e,n,r){var d=r.center,p=r.easing,w=r.list,y=new s,x=t?g.getLeft(t,w,d):g.getLeft(e,w,d)+e.offsetWidth*n,b=e?g.getLeft(e,w,d):x+t.offsetWidth*n*(c?-1:1);return{dir:n,show:function(e,r,o){void 0===r&&(r=0);var s=o?"linear":p;return e-=Math.round(e*i(r,-1,1)),this.translate(r),t&&this.updateTranslates(),r=t?r:i(r,0,1),v(this.getItemIn(),"itemin",{percent:r,duration:e,timing:s,dir:n}),t&&v(this.getItemIn(!0),"itemout",{percent:1-r,duration:e,timing:s,dir:n}),f.start(w,{transform:Ai(-b*(c?-1:1),"px")},e,s).then(y.resolve,u),y.promise},stop:function(){return f.stop(w)},cancel:function(){f.cancel(w)},reset:function(){o(w,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),f.cancel(w),this.show(t,e,!0)},translate:function(e){var r=this.getDistance()*n*(c?-1:1);o(w,"transform",Ai(i(r-r*e-b,-g.getWidth(w),w.offsetWidth)*(c?-1:1),"px")),this.updateTranslates(),t&&(e=i(e,-1,1),v(this.getItemIn(),"itemtranslatein",{percent:e,dir:n}),v(this.getItemIn(!0),"itemtranslateout",{percent:1-e,dir:n}))},percent:function(){return Math.abs((o(w,"transform").split(",")[4]*(c?-1:1)+x)/(b-x))},getDistance:function(){return Math.abs(b-x)},getItemIn:function(e){void 0===e&&(e=!1);var i=this.getActives(),r=h(m(w),"offsetLeft"),o=l(r,i[n*(e?-1:1)>0?i.length-1:0]);return~o&&r[o+(t&&!e?n:0)]},getActives:function(){var n=g.getLeft(t||e,w,d);return h(m(w).filter(function(t){var e=g.getElLeft(t,w);return e>=n&&e+t.offsetWidth<=w.offsetWidth+n}),"offsetLeft")},updateTranslates:function(){var t=this.getActives();m(w).forEach(function(n){var i=a(t,n);v(n,"itemtranslate"+(i?"in":"out"),{percent:i?1:0,dir:n.offsetLeft<=e.offsetLeft?1:-1})})}}},{getLeft:function(t,e,n){var i=this.getElLeft(t,e);return n?i-this.center(t,e):Math.min(i,this.getMax(e))},getMax:function(t){return Math.max(0,this.getWidth(t)-t.offsetWidth)},getWidth:function(t){return m(t).reduce(function(t,e){return e.offsetWidth+t},0)},getMaxWidth:function(t){return m(t).reduce(function(t,e){return Math.max(t,e.offsetWidth)},0)},center:function(t,e){return e.offsetWidth/2-t.offsetWidth/2},getElLeft:function(t,e){return(t.offsetLeft+(c?t.offsetWidth-e.offsetWidth:0))*(c?-1:1)}});function v(t,e,n){p(t,r(e,!1,!1,n))}function m(t){return d(t.children)}return g}(e);e.component("slider-parallax",Hi(e,"slider")),e.component("slider",{mixins:[n.class,n.slider,ji(e)],props:{center:Boolean,sets:Boolean},defaults:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:g},computed:{avgWidth:function(){return g.getWidth(this.list)/this.length},finite:function(t){return t.finite||g.getWidth(this.list)<this.list.offsetWidth+g.getMaxWidth(this.list)+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return this.sets[this.sets.length-1];a(this.slides,"order","");for(var t=g.getMax(this.list),e=this.length;e--;)if(g.getElLeft(this.list.children[e],this.list)<t)return Math.min(e+1,this.length-1);return 0},sets:function(t){var e=this,n=t.sets,i=this.list.offsetWidth/(this.center?2:1),r=0,o=i;return(n=n&&this.slides.reduce(function(t,n,s){var a=d(n);if(a.right>r&&(!e.center&&s>e.maxIndex&&(s=e.maxIndex),!c(t,s))){var l=e.slides[s+1];e.center&&l&&a.width<o-d(l).width/2?o-=a.width:(o=i,t.push(s),r=a.left+i+(e.center?a.width/2:0))}return t},[]))&&n.length&&n},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){f(this.$el,this.clsContainer,!r("."+this.clsContainer,this.$el))},update:{write:function(){var t=this;o("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el).forEach(function(e){var n=l(e,t.attrItem);t.maxIndex&&f(e,"uk-hidden",u(n)&&(t.sets&&!c(t.sets,p(n))||n>t.maxIndex))})},events:["load","resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!c(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(this.dir>0&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&e>1){for(var n=0;n<e;n++)this.stack.splice(1,0,this.dir>0?"next":"previous");t.preventDefault()}else this.duration=Di(this.avgWidth/this.velocity)*((this.dir<0||!this.slides[this.prevIndex]?this.slides[this.index]:this.slides[this.prevIndex]).offsetWidth/this.avgWidth),this.reorder()},itemshow:function(){!h(this.prevIndex)&&s(this._getTransitioner().getItemIn(),this.clsActive)},itemshown:function(){var t=this,e=this._getTransitioner(this.index).getActives();this.slides.forEach(function(n){return f(n,t.clsActive,c(e,n))}),(!this.sets||c(this.sets,p(this.index)))&&this.slides.forEach(function(n){return f(n,t.clsActivated,c(e,n))})}},methods:{reorder:function(){var t=this;if(a(this.slides,"order",""),!this.finite){var e=this.dir>0&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach(function(n,i){return a(n,"order",t.dir>0&&i<e?1:t.dir<0&&i>=t.index?-1:"")}),this.center)for(var n=this.slides[e],i=this.list.offsetWidth/2-n.offsetWidth/2,r=0;i>0;){var o=t.getIndex(--r+e,e),s=t.slides[o];a(s,"order",o>e?-2:-1),i-=s.offsetWidth}}},getValidIndex:function(t,e){var n;if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;do{if(c(this.sets,t))return t;n=t,t=this.getIndex(t+this.dir,e)}while(t!==n);return t}}})}}),An.use(function t(e){if(!t.installed){e.use(Ii);var n=e.mixin,i=e.util.height,r=function(t){var e=t.mixin,n=t.util,i=n.assign,r=n.css,o=i({},e.slideshow.defaults.Animations,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-r(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:Bi(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-r(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:Bi(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:Ai(30),zIndex:-1},{transform:Ai(),zIndex:0}]:[{transform:Ai(-100),zIndex:0},{transform:Ai(),zIndex:-1}]},percent:function(t,e,n){return n<0?1-o.translated(e):o.translated(t)},translate:function(t,e){return e<0?[{transform:Ai(30*t),zIndex:-1},{transform:Ai(-100*(1-t)),zIndex:0}]:[{transform:Ai(100*-t),zIndex:0},{transform:Ai(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:Ai(100),zIndex:0},{transform:Ai(),zIndex:-1}]:[{transform:Ai(-30),zIndex:-1},{transform:Ai(),zIndex:0}]},percent:function(t,e,n){return n>0?1-o.translated(e):o.translated(t)},translate:function(t,e){return e<0?[{transform:Ai(100*t),zIndex:0},{transform:Ai(-30*(1-t)),zIndex:-1}]:[{transform:Ai(-30*t),zIndex:-1},{transform:Ai(100*(1-t)),zIndex:0}]}}});return o}(e);e.component("slideshow-parallax",Hi(e,"slideshow")),e.component("slideshow",{mixins:[n.class,n.slideshow,ji(e)],props:{ratio:String,minHeight:Boolean,maxHeight:Boolean},defaults:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:r},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],n=t[1];return n=n*this.$el.offsetWidth/e,this.minHeight&&(n=Math.max(this.minHeight,n)),this.maxHeight&&(n=Math.min(this.maxHeight,n)),{height:n}},write:function(t){var e=t.height;i(this.list,Math.floor(e))},events:["load","resize"]}})}}),An.use(function t(e){var n;if(!t.installed){var i=e.mixin,r=e.util,o=r.addClass,s=r.after,a=r.assign,l=r.append,c=r.attr,u=r.before,h=r.closest,d=r.css,f=r.height,p=r.fastdom,g=r.getPos,v=r.includes,m=r.index,w=r.isInput,y=r.noop,x=r.offset,b=r.off,C=r.on,k=r.pointerDown,L=r.pointerMove,T=r.pointerUp,$=r.position,E=r.preventClick,M=r.Promise,S=r.remove,A=r.removeClass,B=r.toggleClass,N=r.toNodes,D=r.Transition,I=r.trigger,_=r.within;e.component("sortable",{mixins:[i.class],props:{group:String,animation:Number,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},defaults:{group:!1,animation:150,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1},init:function(){var t=this;["init","start","move","end"].forEach(function(e){var n=t[e];t[e]=function(e){t.scrollY=window.pageYOffset;var i=g(e),r=i.x,o=i.y;t.pos={x:r,y:o},n(e)}})},events:(n={},n[k]="init",n),update:{write:function(){if(this.clsEmpty&&B(this.$el,this.clsEmpty,!this.$el.children.length),this.drag){x(this.drag,{top:this.pos.y+this.origin.top,left:this.pos.x+this.origin.left});var t,e=x(this.drag).top,n=e+this.drag.offsetHeight;e>0&&e<this.scrollY?t=this.scrollY-5:n<f(document)&&n>f(window)+this.scrollY&&(t=this.scrollY+5),t&&setTimeout(function(){return window.scrollTo(window.scrollX,t)},5)}}},methods:{init:function(t){var e=t.target,n=t.button,i=t.defaultPrevented,r=N(this.$el.children).filter(function(t){return _(e,t)})[0];!r||w(t.target)||this.handle&&!_(e,this.handle)||n>0||_(e,"."+this.clsNoDrag)||i||(t.preventDefault(),this.touched=[this],this.placeholder=r,this.origin=a({target:e,index:m(r)},this.pos),C(document,L,this.move),C(document,T,this.end),C(window,"scroll",this.scroll),this.threshold||this.start(t))},start:function(t){this.drag=l(e.container,this.placeholder.outerHTML.replace(/^<li/i,"<div").replace(/li>$/i,"div>")),d(this.drag,a({boxSizing:"border-box",width:this.placeholder.offsetWidth,height:this.placeholder.offsetHeight},d(this.placeholder,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),c(this.drag,"uk-no-boot",""),o(this.drag,this.clsDrag,this.clsCustom),f(this.drag.firstElementChild,f(this.placeholder.firstElementChild));var n=x(this.placeholder),i=n.left,r=n.top;a(this.origin,{left:i-this.pos.x,top:r-this.pos.y}),o(this.placeholder,this.clsPlaceholder),o(this.$el.children,this.clsItem),o(document.documentElement,this.clsDragState),I(this.$el,"start",[this,this.placeholder,this.drag]),this.move(t)},move:function(t){if(this.drag){this.$emit();var e="mousemove"===t.type?t.target:document.elementFromPoint(this.pos.x-document.body.scrollLeft,this.pos.y-document.body.scrollTop),n=O(e),i=O(this.placeholder),r=n!==i;if(n&&!_(e,this.placeholder)&&(!r||n.group&&n.group===i.group)){if(e=n.$el===e.parentNode&&e||N(n.$el.children).filter(function(t){return _(e,t)})[0],r)i.remove(this.placeholder);else if(!e)return;n.insert(this.placeholder,e),v(this.touched,n)||this.touched.push(n)}}else(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},scroll:function(){var t=window.pageYOffset;t!==this.scrollY&&(this.pos.y+=t-this.scrollY,this.scrollY=t,this.$emit())},end:function(t){if(b(document,L,this.move),b(document,T,this.end),b(window,"scroll",this.scroll),this.drag){E();var e=O(this.placeholder);this===e?this.origin.index!==m(this.placeholder)&&I(this.$el,"moved",[this,this.placeholder]):(I(e.$el,"added",[e,this.placeholder]),I(this.$el,"removed",[this,this.placeholder])),I(this.$el,"stop",[this]),S(this.drag),this.drag=null;var n=this.touched.map(function(t){return t.clsPlaceholder+" "+t.clsItem}).join(" ");this.touched.forEach(function(t){return A(t.$el.children,n)}),A(document.documentElement,this.clsDragState)}else"mouseup"!==t.type&&_(t.target,"a[href]")&&(location.href=h(t.target,"a[href]").href)},insert:function(t,e){var n=this;o(this.$el.children,this.clsItem);var i=function(){e?!_(t,n.$el)||function(t,e){return t.parentNode===e.parentNode&&m(t)>m(e)}(t,e)?u(e,t):s(e,t):l(n.$el,t)};this.animation?this.animate(i):i()},remove:function(t){_(t,this.$el)&&(this.animation?this.animate(function(){return S(t)}):S(t))},animate:function(t){var n=this,i=[],r=N(this.$el.children),o={position:"",width:"",height:"",pointerEvents:"",top:"",left:"",bottom:"",right:""};r.forEach(function(t){i.push(a({position:"absolute",pointerEvents:"none",width:t.offsetWidth,height:t.offsetHeight},$(t)))}),t(),r.forEach(D.cancel),d(this.$el.children,o),e.update(this.$el),p.flush(),d(this.$el,"minHeight",f(this.$el));var s=r.map(function(t){return $(t)});M.all(r.map(function(t,e){return D.start(d(t,i[e]),s[e],n.animation)})).then(function(){d(n.$el,"minHeight",""),d(r,o),e.update(n.$el),p.flush()},y)}}})}function O(t){return t&&(e.getComponent(t,"sortable")||O(t.parentNode))}}),An.use(function t(e){var n;if(!t.installed){var i=e.util,r=e.mixin,o=i.append,s=i.attr,a=i.flipPosition,l=i.hasAttr,c=i.includes,u=i.isTouch,h=i.isVisible,d=i.matches,f=i.on,p=i.pointerDown,g=i.pointerEnter,v=i.pointerLeave,m=i.remove,w=i.within,y=[];e.component("tooltip",{attrs:!0,args:"title",mixins:[r.container,r.togglable,r.position],props:{delay:Number,title:String},defaults:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){this._hasTitle=l(this.$el,"title"),s(this.$el,{title:"","aria-expanded":!1})},disconnected:function(){this.hide(),s(this.$el,{title:this._hasTitle?this.title:null,"aria-expanded":null})},methods:{show:function(){var t=this;c(y,this)||(y.forEach(function(t){return t.hide()}),y.push(this),this._unbind=f(document,"click",function(e){return!w(e.target,t.$el)&&t.hide()}),clearTimeout(this.showTimer),this.tooltip=o(this.container,'<div class="'+this.clsPos+'" aria-hidden><div class="'+this.clsPos+'-inner">'+this.title+"</div></div>"),s(this.$el,"aria-expanded",!0),this.positionAt(this.tooltip,this.$el),this.origin="y"===this.getAxis()?a(this.dir)+"-"+this.align:this.align+"-"+a(this.dir),this.showTimer=setTimeout(function(){t.toggleElement(t.tooltip,!0),t.hideTimer=setInterval(function(){h(t.$el)||t.hide()},150)},this.delay))},hide:function(){var t=y.indexOf(this);!~t||d(this.$el,"input")&&this.$el===document.activeElement||(y.splice(t,1),clearTimeout(this.showTimer),clearInterval(this.hideTimer),s(this.$el,"aria-expanded",!1),this.toggleElement(this.tooltip,!1),this.tooltip&&m(this.tooltip),this.tooltip=!1,this._unbind())}},events:(n={},n["focus "+g+" "+p]=function(t){t.type===p&&u(t)||this.show()},n.blur="hide",n[v]=function(t){u(t)||this.hide()},n)})}}),An.use(function t(e){if(!t.installed){var n=e.util,i=n.addClass,r=n.ajax,o=n.matches,s=n.noop,a=n.on,l=n.removeClass,c=n.trigger;e.component("upload",{props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},defaults:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Bytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:s,beforeAll:s,beforeSend:s,complete:s,completeAll:s,error:s,fail:s,load:s,loadEnd:s,loadStart:s,progress:s},events:{change:function(t){o(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){h(t);var e=t.dataTransfer;e&&e.files&&(l(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){h(t)},dragover:function(t){h(t),i(this.$el,this.clsDragover)},dragleave:function(t){h(t),l(this.$el,this.clsDragover)}},methods:{upload:function(t){var e=this;if(t.length){c(this.$el,"upload",[t]);for(var n=0;n<t.length;n++){if(e.maxSize&&1e3*e.maxSize<t[n].size)return void e.fail(e.msgInvalidSize.replace("%s",e.allow));if(e.allow&&!u(e.allow,t[n].name))return void e.fail(e.msgInvalidName.replace("%s",e.allow));if(e.mime&&!u(e.mime,t[n].type))return void e.fail(e.msgInvalidMime.replace("%s",e.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var i=function(t,e){for(var n=[],i=0;i<t.length;i+=e){for(var r=[],o=0;o<e;o++)r.push(t[i+o]);n.push(r)}return n}(t,this.concurrent),o=function(t){var n=new FormData;for(var s in t.forEach(function(t){return n.append(e.name,t)}),e.params)n.append(s,e.params[s]);r(e.url,{data:n,method:e.method,responseType:e.type,beforeSend:function(t){var n=t.xhr;n.upload&&a(n.upload,"progress",e.progress),["loadStart","load","loadEnd","abort"].forEach(function(t){return a(n,t.toLowerCase(),e[t])}),e.beforeSend(t)}}).then(function(t){e.complete(t),i.length?o(i.shift()):e.completeAll(t)},function(t){return e.error(t.message)})};o(i.shift())}}}})}function u(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function h(t){t.preventDefault(),t.stopPropagation()}}),function(t){var e=t.connect,n=t.disconnect;function i(){o(document.body,e),on.flush(),new MutationObserver(function(t){return t.forEach(r)}).observe(document,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),t._initialized=!0}function r(i){var r=i.target;("attributes"!==i.type?function(t){for(var i=t.addedNodes,r=t.removedNodes,s=0;s<i.length;s++)o(i[s],e);for(var a=0;a<r.length;a++)o(r[a],n);return!0}(i):function(e){var n=e.target,i=e.attributeName;if("href"===i)return!0;var r=Mn(i);if(r&&r in t.components){if(G(n,i))return t[r](n),!0;var o=t.getComponent(n,r);return o?(o.$destroy(),!0):void 0}}(i))&&t.update(r)}function o(t,e){if(1===t.nodeType&&!G(t,"uk-no-boot"))for(e(t),t=t.firstElementChild;t;){var n=t.nextElementSibling;o(t,e),t=n}}"MutationObserver"in window&&(document.body?i():new MutationObserver(function(){document.body&&(this.disconnect(),i())}).observe(document,{childList:!0,subtree:!0}))}(An),An}()}).call(this,n(4).setImmediate)},function(t,e,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,l=o.slice,c=o.concat,u=o.push,h=o.indexOf,d={},f=d.toString,p=d.hasOwnProperty,g=p.toString,v=g.call(Object),m={},w=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},x={type:!0,src:!0,noModule:!0};function b(t,e,n){var i,r=(e=e||s).createElement("script");if(r.text=t,n)for(i in x)n[i]&&(r[i]=n[i]);e.head.appendChild(r).parentNode.removeChild(r)}function C(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?d[f.call(t)]||"object":typeof t}var k=function(t,e){return new k.fn.init(t,e)},L=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function T(t){var e=!!t&&"length"in t&&t.length,n=C(t);return!w(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}k.fn=k.prototype={jquery:"3.3.1",constructor:k,length:0,toArray:function(){return l.call(this)},get:function(t){return null==t?l.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=k.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return k.each(this,t)},map:function(t){return this.pushStack(k.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},k.extend=k.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||w(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(i=t[e])&&(c&&i&&(k.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&k.isPlainObject(n)?n:{},s[e]=k.extend(c,o,i)):void 0!==i&&(s[e]=i));return s},k.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==f.call(t)||(e=a(t))&&("function"!=typeof(n=p.call(e,"constructor")&&e.constructor)||g.call(n)!==v))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){b(t)},each:function(t,e){var n,i=0;if(T(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(L,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(T(Object(t))?k.merge(n,"string"==typeof t?[t]:t):u.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:h.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,s=[];if(T(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&s.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&s.push(r);return c.apply([],s)},guid:1,support:m}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=o[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){d["[object "+e+"]"]=e.toLowerCase()});var $=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(t){var e,n,i,r,o,s,a,l,c,u,h,d,f,p,g,v,m,w,y,x="sizzle"+1*new Date,b=t.document,C=0,k=0,L=st(),T=st(),$=st(),E=function(t,e){return t===e&&(h=!0),0},M={}.hasOwnProperty,S=[],A=S.pop,B=S.push,N=S.push,D=S.slice,I=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},_="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+O+"*("+j+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+O+"*\\]",P=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",z=new RegExp(O+"+","g"),q=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),W=new RegExp("^"+O+"*,"+O+"*"),R=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),F=new RegExp("="+O+"*([^\\]'\"]*?)"+O+"*\\]","g"),V=new RegExp(P),Z=new RegExp("^"+j+"$"),U={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+_+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,K=new RegExp("\\\\([\\da-f]{1,6}"+O+"?|("+O+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){d()},rt=wt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{N.apply(S=D.call(b.childNodes),b.childNodes),S[b.childNodes.length].nodeType}catch(t){N={apply:S.length?function(t,e){B.apply(t,D.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function ot(t,e,i,r){var o,a,c,u,h,p,m,w=e&&e.ownerDocument,C=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==C&&9!==C&&11!==C)return i;if(!r&&((e?e.ownerDocument||e:b)!==f&&d(e),e=e||f,g)){if(11!==C&&(h=J.exec(t)))if(o=h[1]){if(9===C){if(!(c=e.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(w&&(c=w.getElementById(o))&&y(e,c)&&c.id===o)return i.push(c),i}else{if(h[2])return N.apply(i,e.getElementsByTagName(t)),i;if((o=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return N.apply(i,e.getElementsByClassName(o)),i}if(n.qsa&&!$[t+" "]&&(!v||!v.test(t))){if(1!==C)w=e,m=t;else if("object"!==e.nodeName.toLowerCase()){for((u=e.getAttribute("id"))?u=u.replace(et,nt):e.setAttribute("id",u=x),a=(p=s(t)).length;a--;)p[a]="#"+u+" "+mt(p[a]);m=p.join(","),w=Q.test(t)&&gt(e.parentNode)||e}if(m)try{return N.apply(i,w.querySelectorAll(m)),i}catch(t){}finally{u===x&&e.removeAttribute("id")}}}return l(t.replace(q,"$1"),e,i,r)}function st(){var t=[];return function e(n,r){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function at(t){return t[x]=!0,t}function lt(t){var e=f.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=e}function ut(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ht(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function ft(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&rt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function pt(t){return at(function(e){return e=+e,at(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ot.support={},o=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},d=ot.setDocument=function(t){var e,r,s=t?t.ownerDocument||t:b;return s!==f&&9===s.nodeType&&s.documentElement?(p=(f=s).documentElement,g=!o(f),b!==f&&(r=f.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",it,!1):r.attachEvent&&r.attachEvent("onunload",it)),n.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=lt(function(t){return t.appendChild(f.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=G.test(f.getElementsByClassName),n.getById=lt(function(t){return p.appendChild(t).id=x,!f.getElementsByName||!f.getElementsByName(x).length}),n.getById?(i.filter.ID=function(t){var e=t.replace(K,tt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(K,tt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},m=[],v=[],(n.qsa=G.test(f.querySelectorAll))&&(lt(function(t){p.appendChild(t).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+O+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+O+"*(?:value|"+_+")"),t.querySelectorAll("[id~="+x+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+x+"+*").length||v.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=f.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+O+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")})),(n.matchesSelector=G.test(w=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&lt(function(t){n.disconnectedMatch=w.call(t,"*"),w.call(t,"[s!='']:x"),m.push("!=",P)}),v=v.length&&new RegExp(v.join("|")),m=m.length&&new RegExp(m.join("|")),e=G.test(p.compareDocumentPosition),y=e||G.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},E=e?function(t,e){if(t===e)return h=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===f||t.ownerDocument===b&&y(b,t)?-1:e===f||e.ownerDocument===b&&y(b,e)?1:u?I(u,t)-I(u,e):0:4&i?-1:1)}:function(t,e){if(t===e)return h=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,s=[t],a=[e];if(!r||!o)return t===f?-1:e===f?1:r?-1:o?1:u?I(u,t)-I(u,e):0;if(r===o)return ut(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ut(s[i],a[i]):s[i]===b?-1:a[i]===b?1:0},f):f},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==f&&d(t),e=e.replace(F,"='$1']"),n.matchesSelector&&g&&!$[e+" "]&&(!m||!m.test(e))&&(!v||!v.test(e)))try{var i=w.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){}return ot(e,f,null,[t]).length>0},ot.contains=function(t,e){return(t.ownerDocument||t)!==f&&d(t),y(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==f&&d(t);var r=i.attrHandle[e.toLowerCase()],o=r&&M.call(i.attrHandle,e.toLowerCase())?r(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},ot.escape=function(t){return(t+"").replace(et,nt)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,i=[],r=0,o=0;if(h=!n.detectDuplicates,u=!n.sortStable&&t.slice(0),t.sort(E),h){for(;e=t[o++];)e===t[o]&&(r=i.push(o));for(;r--;)t.splice(i[r],1)}return u=null,t},r=ot.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(i=ot.selectors={cacheLength:50,createPseudo:at,match:U,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(K,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(K,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return U.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(K,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=L[t+" "];return e||(e=new RegExp("(^|"+O+")"+t+"("+O+"|$)"))&&L(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var r=ot.attr(i,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(z," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,h,d,f,p,g=o!==s?"nextSibling":"previousSibling",v=e.parentNode,m=a&&e.nodeName.toLowerCase(),w=!l&&!a,y=!1;if(v){if(o){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===m:1===d.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?v.firstChild:v.lastChild],s&&w){for(y=(f=(c=(u=(h=(d=v)[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===C&&c[1])&&c[2],d=f&&v.childNodes[f];d=++f&&d&&d[g]||(y=f=0)||p.pop();)if(1===d.nodeType&&++y&&d===e){u[t]=[C,f,y];break}}else if(w&&(y=f=(c=(u=(h=(d=e)[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]||[])[0]===C&&c[1]),!1===y)for(;(d=++f&&d&&d[g]||(y=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==m:1!==d.nodeType)||!++y||(w&&((u=(h=d[x]||(d[x]={}))[d.uniqueID]||(h[d.uniqueID]={}))[t]=[C,y]),d!==e)););return(y-=r)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,r=i.pseudos[t]||i.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return r[x]?r(e):r.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){for(var i,o=r(t,e),s=o.length;s--;)t[i=I(t,o[s])]=!(n[i]=o[s])}):function(t){return r(t,0,n)}):r}},pseudos:{not:at(function(t){var e=[],n=[],i=a(t.replace(q,"$1"));return i[x]?at(function(t,e,n,r){for(var o,s=i(t,null,r,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:at(function(t){return function(e){return ot(t,e).length>0}}),contains:at(function(t){return t=t.replace(K,tt),function(e){return(e.textContent||e.innerText||r(e)).indexOf(t)>-1}}),lang:at(function(t){return Z.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(K,tt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ft(!1),disabled:ft(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:pt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:pt(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:pt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=ht(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=dt(e);function vt(){}function mt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function wt(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=k++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,l){var c,u,h,d=[C,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(u=(h=e[x]||(e[x]={}))[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[o])&&c[0]===C&&c[1]===a)return d[2]=c[2];if(u[o]=d,d[2]=t(e,n,l))return!0}return!1}}function yt(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function xt(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,c=null!=e;a<l;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),c&&e.push(a)));return s}function bt(t,e,n,i,r,o){return i&&!i[x]&&(i=bt(i)),r&&!r[x]&&(r=bt(r,o)),at(function(o,s,a,l){var c,u,h,d=[],f=[],p=s.length,g=o||function(t,e,n){for(var i=0,r=e.length;i<r;i++)ot(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),v=!t||!o&&e?g:xt(g,d,t,a,l),m=n?r||(o?t:p||i)?[]:s:v;if(n&&n(v,m,a,l),i)for(c=xt(m,f),i(c,[],a,l),u=c.length;u--;)(h=c[u])&&(m[f[u]]=!(v[f[u]]=h));if(o){if(r||t){if(r){for(c=[],u=m.length;u--;)(h=m[u])&&c.push(v[u]=h);r(null,m=[],c,l)}for(u=m.length;u--;)(h=m[u])&&(c=r?I(o,h):d[u])>-1&&(o[c]=!(s[c]=h))}}else m=xt(m===s?m.splice(p,m.length):m),r?r(null,s,m,l):N.apply(s,m)})}function Ct(t){for(var e,n,r,o=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],l=s?1:0,u=wt(function(t){return t===e},a,!0),h=wt(function(t){return I(e,t)>-1},a,!0),d=[function(t,n,i){var r=!s&&(i||n!==c)||((e=n).nodeType?u(t,n,i):h(t,n,i));return e=null,r}];l<o;l++)if(n=i.relative[t[l].type])d=[wt(yt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[x]){for(r=++l;r<o&&!i.relative[t[r].type];r++);return bt(l>1&&yt(d),l>1&&mt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(q,"$1"),n,l<r&&Ct(t.slice(l,r)),r<o&&Ct(t=t.slice(r)),r<o&&mt(t))}d.push(n)}return yt(d)}return vt.prototype=i.filters=i.pseudos,i.setFilters=new vt,s=ot.tokenize=function(t,e){var n,r,o,s,a,l,c,u=T[t+" "];if(u)return e?0:u.slice(0);for(a=t,l=[],c=i.preFilter;a;){for(s in n&&!(r=W.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),n=!1,(r=R.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(q," ")}),a=a.slice(n.length)),i.filter)!(r=U[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return e?a.length:a?ot.error(t):T(t,l).slice(0)},a=ot.compile=function(t,e){var n,r=[],o=[],a=$[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Ct(e[n]))[x]?r.push(a):o.push(a);(a=$(t,function(t,e){var n=e.length>0,r=t.length>0,o=function(o,s,a,l,u){var h,p,v,m=0,w="0",y=o&&[],x=[],b=c,k=o||r&&i.find.TAG("*",u),L=C+=null==b?1:Math.random()||.1,T=k.length;for(u&&(c=s===f||s||u);w!==T&&null!=(h=k[w]);w++){if(r&&h){for(p=0,s||h.ownerDocument===f||(d(h),a=!g);v=t[p++];)if(v(h,s||f,a)){l.push(h);break}u&&(C=L)}n&&((h=!v&&h)&&m--,o&&y.push(h))}if(m+=w,n&&w!==m){for(p=0;v=e[p++];)v(y,x,s,a);if(o){if(m>0)for(;w--;)y[w]||x[w]||(x[w]=A.call(l));x=xt(x)}N.apply(l,x),u&&!o&&x.length>0&&m+e.length>1&&ot.uniqueSort(l)}return u&&(C=L,c=b),y};return n?at(o):o}(o,r))).selector=t}return a},l=ot.select=function(t,e,n,r){var o,l,c,u,h,d="function"==typeof t&&t,f=!r&&s(t=d.selector||t);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&g&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(K,tt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=U.needsContext.test(t)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((h=i.find[u])&&(r=h(c.matches[0].replace(K,tt),Q.test(l[0].type)&&gt(e.parentNode)||e))){if(l.splice(o,1),!(t=r.length&&mt(l)))return N.apply(n,r),n;break}}return(d||a(t,f))(r,e,!g,n,!e||Q.test(t)&&gt(e.parentNode)||e),n},n.sortStable=x.split("").sort(E).join("")===x,n.detectDuplicates=!!h,d(),n.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(f.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ct(_,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),ot}(n);k.find=$,k.expr=$.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=$.uniqueSort,k.text=$.getText,k.isXMLDoc=$.isXML,k.contains=$.contains,k.escapeSelector=$.escape;var E=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&k(t).is(n))break;i.push(t)}return i},M=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},S=k.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var B=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(t,e,n){return w(e)?k.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?k.grep(t,function(t){return t===e!==n}):"string"!=typeof e?k.grep(t,function(t){return h.call(e,t)>-1!==n}):k.filter(e,t,n)}k.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?k.find.matchesSelector(i,t)?[i]:[]:k.find.matches(t,k.grep(e,function(t){return 1===t.nodeType}))},k.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(k(t).filter(function(){for(e=0;e<i;e++)if(k.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)k.find(t,r[e],n);return i>1?k.uniqueSort(n):n},filter:function(t){return this.pushStack(N(this,t||[],!1))},not:function(t){return this.pushStack(N(this,t||[],!0))},is:function(t){return!!N(this,"string"==typeof t&&S.test(t)?k(t):t||[],!1).length}});var D,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||D,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:I.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof k?e[0]:e,k.merge(this,k.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),B.test(i[1])&&k.isPlainObject(e))for(i in e)w(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):w(t)?void 0!==n.ready?n.ready(t):t(k):k.makeArray(t,this)}).prototype=k.fn,D=k(s);var _=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function j(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}k.fn.extend({has:function(t){var e=k(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(k.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&k(t);if(!S.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?k.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?h.call(k(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),k.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return E(t,"parentNode")},parentsUntil:function(t,e,n){return E(t,"parentNode",n)},next:function(t){return j(t,"nextSibling")},prev:function(t){return j(t,"previousSibling")},nextAll:function(t){return E(t,"nextSibling")},prevAll:function(t){return E(t,"previousSibling")},nextUntil:function(t,e,n){return E(t,"nextSibling",n)},prevUntil:function(t,e,n){return E(t,"previousSibling",n)},siblings:function(t){return M((t.parentNode||{}).firstChild,t)},children:function(t){return M(t.firstChild)},contents:function(t){return A(t,"iframe")?t.contentDocument:(A(t,"template")&&(t=t.content||t),k.merge([],t.childNodes))}},function(t,e){k.fn[t]=function(n,i){var r=k.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=k.filter(i,r)),this.length>1&&(O[t]||k.uniqueSort(r),_.test(t)&&r.reverse()),this.pushStack(r)}});var H=/[^\x20\t\r\n\f]+/g;function P(t){return t}function z(t){throw t}function q(t,e,n,i){var r;try{t&&w(r=t.promise)?r.call(t).done(e).fail(n):t&&w(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}k.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return k.each(t.match(H)||[],function(t,n){e[n]=!0}),e}(t):k.extend({},t);var e,n,i,r,o=[],s=[],a=-1,l=function(){for(r=r||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){k.each(n,function(n,i){w(i)?t.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==C(i)&&e(i)})}(arguments),n&&!e&&l()),this},remove:function(){return k.each(arguments,function(t,e){for(var n;(n=k.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(t){return t?k.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},k.extend({Deferred:function(t){var e=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return k.Deferred(function(n){k.each(e,function(e,i){var r=w(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&w(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){var o=0;function s(t,e,i,r){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(t<o)){if((n=i.apply(a,l))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,w(c)?r?c.call(n,s(o,e,P,r),s(o,e,z,r)):(o++,c.call(n,s(o,e,P,r),s(o,e,z,r),s(o,e,P,e.notifyWith))):(i!==P&&(a=void 0,l=[n]),(r||e.resolveWith)(a,l))}},u=r?c:function(){try{c()}catch(n){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(n,u.stackTrace),t+1>=o&&(i!==z&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?u():(k.Deferred.getStackHook&&(u.stackTrace=k.Deferred.getStackHook()),n.setTimeout(u))}}return k.Deferred(function(n){e[0][3].add(s(0,n,w(r)?r:P,n.notifyWith)),e[1][3].add(s(0,n,w(t)?t:P)),e[2][3].add(s(0,n,w(i)?i:z))}).promise()},promise:function(t){return null!=t?k.extend(t,r):r}},o={};return k.each(e,function(t,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=l.call(arguments),o=k.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?l.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(q(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||w(r[n]&&r[n].then)))return o.then();for(;n--;)q(r[n],s(n),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&W.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},k.readyException=function(t){n.setTimeout(function(){throw t})};var R=k.Deferred();function F(){s.removeEventListener("DOMContentLoaded",F),n.removeEventListener("load",F),k.ready()}k.fn.ready=function(t){return R.then(t).catch(function(t){k.readyException(t)}),this},k.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==t&&--k.readyWait>0||R.resolveWith(s,[k]))}}),k.ready.then=R.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(k.ready):(s.addEventListener("DOMContentLoaded",F),n.addEventListener("load",F));var V=function(t,e,n,i,r,o,s){var a=0,l=t.length,c=null==n;if("object"===C(n))for(a in r=!0,n)V(t,e,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,w(i)||(s=!0),c&&(s?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(k(t),n)})),e))for(;a<l;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):o},Z=/^-ms-/,U=/-([a-z])/g;function Y(t,e){return e.toUpperCase()}function X(t){return t.replace(Z,"ms-").replace(U,Y)}var G=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function J(){this.expando=k.expando+J.uid++}J.uid=1,J.prototype={cache:function(t){var e=t[this.expando];return e||(e={},G(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[X(e)]=n;else for(i in e)r[X(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(H)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||k.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!k.isEmptyObject(e)}};var Q=new J,K=new J,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}K.set(t,e,n)}else n=void 0;return n}k.extend({hasData:function(t){return K.hasData(t)||Q.hasData(t)},data:function(t,e,n){return K.access(t,e,n)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,n){return Q.access(t,e,n)},_removeData:function(t,e){Q.remove(t,e)}}),k.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=K.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=X(i.slice(5)),nt(o,i,r[i]));Q.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){K.set(this,t)}):V(this,function(e){var n;if(o&&void 0===e)return void 0!==(n=K.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each(function(){K.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){K.remove(this,t)})}}),k.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=Q.get(t,e),n&&(!i||Array.isArray(n)?i=Q.access(t,e,k.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=k.queue(t,e),i=n.length,r=n.shift(),o=k._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,function(){k.dequeue(t,e)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return Q.get(t,n)||Q.access(t,n,{empty:k.Callbacks("once memory").add(function(){Q.remove(t,[e+"queue",n])})})}}),k.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?k.queue(this[0],t):void 0===e?this:this.each(function(){var n=k.queue(this,t,e);k._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&k.dequeue(this,t)})},dequeue:function(t){return this.each(function(){k.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=k.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=Q.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],st=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&k.contains(t.ownerDocument,t)&&"none"===k.css(t,"display")},at=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in r=n.apply(t,i||[]),e)t.style[o]=s[o];return r};function lt(t,e,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return k.css(t,e,"")},l=a(),c=n&&n[3]||(k.cssNumber[e]?"":"px"),u=(k.cssNumber[e]||"px"!==c&&+l)&&rt.exec(k.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)k.style(t,e,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,k.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ct={};function ut(t){var e,n=t.ownerDocument,i=t.nodeName,r=ct[i];return r||(e=n.body.appendChild(n.createElement(i)),r=k.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ct[i]=r,r)}function ht(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=Q.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&st(i)&&(r[o]=ut(i))):"none"!==n&&(r[o]="none",Q.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}k.fn.extend({show:function(){return ht(this,!0)},hide:function(){return ht(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){st(this)?k(this).show():k(this).hide()})}});var dt=/^(?:checkbox|radio)$/i,ft=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pt=/^$|^module$|\/(?:java|ecma)script/i,gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function vt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?k.merge([t],n):n}function mt(t,e){for(var n=0,i=t.length;n<i;n++)Q.set(t[n],"globalEval",!e||Q.get(e[n],"globalEval"))}gt.optgroup=gt.option,gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td;var wt,yt,xt=/<|&#?\w+;/;function bt(t,e,n,i,r){for(var o,s,a,l,c,u,h=e.createDocumentFragment(),d=[],f=0,p=t.length;f<p;f++)if((o=t[f])||0===o)if("object"===C(o))k.merge(d,o.nodeType?[o]:o);else if(xt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(ft.exec(o)||["",""])[1].toLowerCase(),l=gt[a]||gt._default,s.innerHTML=l[1]+k.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;k.merge(d,s.childNodes),(s=h.firstChild).textContent=""}else d.push(e.createTextNode(o));for(h.textContent="",f=0;o=d[f++];)if(i&&k.inArray(o,i)>-1)r&&r.push(o);else if(c=k.contains(o.ownerDocument,o),s=vt(h.appendChild(o),"script"),c&&mt(s),n)for(u=0;o=s[u++];)pt.test(o.type||"")&&n.push(o);return h}wt=s.createDocumentFragment().appendChild(s.createElement("div")),(yt=s.createElement("input")).setAttribute("type","radio"),yt.setAttribute("checked","checked"),yt.setAttribute("name","t"),wt.appendChild(yt),m.checkClone=wt.cloneNode(!0).cloneNode(!0).lastChild.checked,wt.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!wt.cloneNode(!0).lastChild.defaultValue;var Ct=s.documentElement,kt=/^key/,Lt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Tt=/^([^.]*)(?:\.(.+)|)/;function $t(){return!0}function Et(){return!1}function Mt(){try{return s.activeElement}catch(t){}}function St(t,e,n,i,r,o){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)St(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Et;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return k().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),t.each(function(){k.event.add(this,e,r,i,n)})}k.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,c,u,h,d,f,p,g,v=Q.get(t);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&k.find.matchesSelector(Ct,r),n.guid||(n.guid=k.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)f=g=(a=Tt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=k.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=k.event.special[f]||{},u=k.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&k.expr.match.needsContext.test(r),namespace:p.join(".")},o),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(f,s)),h.add&&(h.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),k.event.global[f]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,c,u,h,d,f,p,g,v=Q.hasData(t)&&Q.get(t);if(v&&(l=v.events)){for(c=(e=(e||"").match(H)||[""]).length;c--;)if(f=g=(a=Tt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=k.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)u=d[o],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(t,u));s&&!d.length&&(h.teardown&&!1!==h.teardown.call(t,p,v.handle)||k.removeEvent(t,f,v.handle),delete l[f])}else for(f in l)k.event.remove(t,f+e[c],n,i,!0);k.isEmptyObject(l)&&Q.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=k.event.fix(t),l=new Array(arguments.length),c=(Q.get(this,"events")||{})[a.type]||[],u=k.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=k.event.handlers.call(this,a,c),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((k.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?k(r,this).index(c)>-1:k.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:w(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[k.expando]?t:new k.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Mt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Mt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&A(this,"input"))return this.click(),!1},_default:function(t){return A(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},k.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},k.Event=function(t,e){if(!(this instanceof k.Event))return new k.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?$t:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&k.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=$t,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=$t,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=$t,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&kt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Lt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},k.event.addProp),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){k.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||k.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),k.fn.extend({on:function(t,e,n,i){return St(this,t,e,n,i)},one:function(t,e,n,i){return St(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,k(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Et),this.each(function(){k.event.remove(this,t,n,e)})}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Bt=/<script|<style|<link/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,Dt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function It(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&k(t).children("tbody")[0]||t}function _t(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ot(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function jt(t,e){var n,i,r,o,s,a,l,c;if(1===e.nodeType){if(Q.hasData(t)&&(o=Q.access(t),s=Q.set(e,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)k.event.add(e,r,c[r][n]);K.hasData(t)&&(a=K.access(t),l=k.extend({},a),K.set(e,l))}}function Ht(t,e,n,i){e=c.apply([],e);var r,o,s,a,l,u,h=0,d=t.length,f=d-1,p=e[0],g=w(p);if(g||d>1&&"string"==typeof p&&!m.checkClone&&Nt.test(p))return t.each(function(r){var o=t.eq(r);g&&(e[0]=p.call(this,r,o.html())),Ht(o,e,n,i)});if(d&&(o=(r=bt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=k.map(vt(r,"script"),_t)).length;h<d;h++)l=r,h!==f&&(l=k.clone(l,!0,!0),a&&k.merge(s,vt(l,"script"))),n.call(t[h],l,h);if(a)for(u=s[s.length-1].ownerDocument,k.map(s,Ot),h=0;h<a;h++)l=s[h],pt.test(l.type||"")&&!Q.access(l,"globalEval")&&k.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&k._evalUrl(l.src):b(l.textContent.replace(Dt,""),u,l))}return t}function Pt(t,e,n){for(var i,r=e?k.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||k.cleanData(vt(i)),i.parentNode&&(n&&k.contains(i.ownerDocument,i)&&mt(vt(i,"script")),i.parentNode.removeChild(i));return t}k.extend({htmlPrefilter:function(t){return t.replace(At,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a,l,c,u=t.cloneNode(!0),h=k.contains(t.ownerDocument,t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||k.isXMLDoc(t)))for(s=vt(u),i=0,r=(o=vt(t)).length;i<r;i++)a=o[i],"input"===(c=(l=s[i]).nodeName.toLowerCase())&&dt.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(o=o||vt(t),s=s||vt(u),i=0,r=o.length;i<r;i++)jt(o[i],s[i]);else jt(t,u);return(s=vt(u,"script")).length>0&&mt(s,!h&&vt(t,"script")),u},cleanData:function(t){for(var e,n,i,r=k.event.special,o=0;void 0!==(n=t[o]);o++)if(G(n)){if(e=n[Q.expando]){if(e.events)for(i in e.events)r[i]?k.event.remove(n,i):k.removeEvent(n,i,e.handle);n[Q.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),k.fn.extend({detach:function(t){return Pt(this,t,!0)},remove:function(t){return Pt(this,t)},text:function(t){return V(this,function(t){return void 0===t?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Ht(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||It(this,t).appendChild(t)})},prepend:function(){return Ht(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=It(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(k.cleanData(vt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return k.clone(this,t,e)})},html:function(t){return V(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Bt.test(t)&&!gt[(ft.exec(t)||["",""])[1].toLowerCase()]){t=k.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(k.cleanData(vt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Ht(this,arguments,function(e){var n=this.parentNode;k.inArray(this,t)<0&&(k.cleanData(vt(this)),n&&n.replaceChild(e,this))},t)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){k.fn[t]=function(t){for(var n,i=[],r=k(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),k(r[s])[e](n),u.apply(i,n.get());return this.pushStack(i)}});var zt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),qt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Wt=new RegExp(ot.join("|"),"i");function Rt(t,e,n){var i,r,o,s,a=t.style;return(n=n||qt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||k.contains(t.ownerDocument,t)||(s=k.style(t,e)),!m.pixelBoxStyles()&&zt.test(s)&&Wt.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ft(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Ct.appendChild(c).appendChild(u);var t=n.getComputedStyle(u);i="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",a=36===e(t.right),r=36===e(t.width),u.style.position="absolute",o=36===u.offsetWidth||"absolute",Ct.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var i,r,o,a,l,c=s.createElement("div"),u=s.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===u.style.backgroundClip,k.extend(m,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o}}))}();var Vt=/^(none|table(?!-c[ea]).+)/,Zt=/^--/,Ut={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Xt=["Webkit","Moz","ms"],Gt=s.createElement("div").style;function Jt(t){var e=k.cssProps[t];return e||(e=k.cssProps[t]=function(t){if(t in Gt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Gt)return t}(t)||t),e}function Qt(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Kt(t,e,n,i,r,o){var s="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=k.css(t,n+ot[s],!0,r)),i?("content"===n&&(l-=k.css(t,"padding"+ot[s],!0,r)),"margin"!==n&&(l-=k.css(t,"border"+ot[s]+"Width",!0,r))):(l+=k.css(t,"padding"+ot[s],!0,r),"padding"!==n?l+=k.css(t,"border"+ot[s]+"Width",!0,r):a+=k.css(t,"border"+ot[s]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-a-.5))),l}function te(t,e,n){var i=qt(t),r=Rt(t,e,i),o="border-box"===k.css(t,"boxSizing",!1,i),s=o;if(zt.test(r)){if(!n)return r;r="auto"}return s=s&&(m.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===k.css(t,"display",!1,i))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],s=!0),(r=parseFloat(r)||0)+Kt(t,e,n||(o?"border":"content"),s,i,r)+"px"}function ee(t,e,n,i,r){return new ee.prototype.init(t,e,n,i,r)}k.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Rt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=X(e),l=Zt.test(e),c=t.style;if(l||(e=Jt(a)),s=k.cssHooks[e]||k.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:c[e];"string"==(o=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=lt(t,e,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(k.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,o,s,a=X(e);return Zt.test(e)||(e=Jt(a)),(s=k.cssHooks[e]||k.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=Rt(t,e,i)),"normal"===r&&e in Yt&&(r=Yt[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),k.each(["height","width"],function(t,e){k.cssHooks[e]={get:function(t,n,i){if(n)return!Vt.test(k.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?te(t,e,i):at(t,Ut,function(){return te(t,e,i)})},set:function(t,n,i){var r,o=qt(t),s="border-box"===k.css(t,"boxSizing",!1,o),a=i&&Kt(t,e,i,s,o);return s&&m.scrollboxSize()===o.position&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-Kt(t,e,"border",!1,o)-.5)),a&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=k.css(t,e)),Qt(0,n,a)}}}),k.cssHooks.marginLeft=Ft(m.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Rt(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(t,e){k.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+ot[i]+e]=o[i]||o[i-2]||o[0];return r}},"margin"!==t&&(k.cssHooks[t+e].set=Qt)}),k.fn.extend({css:function(t,e){return V(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=qt(t),r=e.length;s<r;s++)o[e[s]]=k.css(t,e[s],!1,i);return o}return void 0!==n?k.style(t,e,n):k.css(t,e)},t,e,arguments.length>1)}}),k.Tween=ee,ee.prototype={constructor:ee,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||k.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var t=ee.propHooks[this.prop];return t&&t.get?t.get(this):ee.propHooks._default.get(this)},run:function(t){var e,n=ee.propHooks[this.prop];return this.options.duration?this.pos=e=k.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ee.propHooks._default.set(this),this}},ee.prototype.init.prototype=ee.prototype,ee.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=k.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){k.fx.step[t.prop]?k.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[k.cssProps[t.prop]]&&!k.cssHooks[t.prop]?t.elem[t.prop]=t.now:k.style(t.elem,t.prop,t.now+t.unit)}}},ee.propHooks.scrollTop=ee.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},k.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},k.fx=ee.prototype.init,k.fx.step={};var ne,ie,re=/^(?:toggle|show|hide)$/,oe=/queueHooks$/;function se(){ie&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(se):n.setTimeout(se,k.fx.interval),k.fx.tick())}function ae(){return n.setTimeout(function(){ne=void 0}),ne=Date.now()}function le(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=ot[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function ce(t,e,n){for(var i,r=(ue.tweeners[e]||[]).concat(ue.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function ue(t,e,n){var i,r,o=0,s=ue.prefilters.length,a=k.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ne||ae(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(t,[c,i,n]),i<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:e,originalOptions:n,startTime:ne||ae(),duration:n.duration,tweens:[],createTween:function(e,n){var i=k.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),u=c.props;for(function(t,e){var n,i,r,o,s;for(n in t)if(r=e[i=X(n)],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=k.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=r);else e[i]=r}(u,c.opts.specialEasing);o<s;o++)if(i=ue.prefilters[o].call(c,t,u,c.opts))return w(i.stop)&&(k._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return k.map(u,ce,c),w(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),k.fx.timer(k.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}k.Animation=k.extend(ue,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return lt(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){w(t)?(e=t,t=["*"]):t=t.match(H);for(var n,i=0,r=t.length;i<r;i++)n=t[i],ue.tweeners[n]=ue.tweeners[n]||[],ue.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,l,c,u,h="width"in e||"height"in e,d=this,f={},p=t.style,g=t.nodeType&&st(t),v=Q.get(t,"fxshow");for(i in n.queue||(null==(s=k._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,k.queue(t,"fx").length||s.empty.fire()})})),e)if(r=e[i],re.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}f[i]=v&&v[i]||k.style(t,i)}if((l=!k.isEmptyObject(e))||!k.isEmptyObject(f))for(i in h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=v&&v.display)&&(c=Q.get(t,"display")),"none"===(u=k.css(t,"display"))&&(c?u=c:(ht([t],!0),c=t.style.display||c,u=k.css(t,"display"),ht([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===k.css(t,"float")&&(l||(d.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(v?"hidden"in v&&(g=v.hidden):v=Q.access(t,"fxshow",{display:c}),o&&(v.hidden=!g),g&&ht([t],!0),d.done(function(){for(i in g||ht([t]),Q.remove(t,"fxshow"),f)k.style(t,i,f[i])})),l=ce(g?v[i]:0,i,d),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ue.prefilters.unshift(t):ue.prefilters.push(t)}}),k.speed=function(t,e,n){var i=t&&"object"==typeof t?k.extend({},t):{complete:n||!n&&e||w(t)&&t,duration:t,easing:n&&e||e&&!w(e)&&e};return k.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in k.fx.speeds?i.duration=k.fx.speeds[i.duration]:i.duration=k.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){w(i.old)&&i.old.call(this),i.queue&&k.dequeue(this,i.queue)},i},k.fn.extend({fadeTo:function(t,e,n,i){return this.filter(st).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=k.isEmptyObject(t),o=k.speed(e,n,i),s=function(){var e=ue(this,k.extend({},t),o);(r||Q.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=k.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&oe.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||k.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=Q.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=k.timers,s=i?i.length:0;for(n.finish=!0,k.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),k.each(["toggle","show","hide"],function(t,e){var n=k.fn[e];k.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(le(e,!0),t,i,r)}}),k.each({slideDown:le("show"),slideUp:le("hide"),slideToggle:le("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){k.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),k.timers=[],k.fx.tick=function(){var t,e=0,n=k.timers;for(ne=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||k.fx.stop(),ne=void 0},k.fx.timer=function(t){k.timers.push(t),k.fx.start()},k.fx.interval=13,k.fx.start=function(){ie||(ie=!0,se())},k.fx.stop=function(){ie=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(t,e){return t=k.fx&&k.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var he,de=k.expr.attrHandle;k.fn.extend({attr:function(t,e){return V(this,k.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){k.removeAttr(this,t)})}}),k.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?k.prop(t,e,n):(1===o&&k.isXMLDoc(t)||(r=k.attrHooks[e.toLowerCase()]||(k.expr.match.bool.test(e)?he:void 0)),void 0!==n?null===n?void k.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=k.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&A(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(H);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),he={set:function(t,e,n){return!1===e?k.removeAttr(t,n):t.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(t,e){var n=de[e]||k.find.attr;de[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=de[s],de[s]=r,r=null!=n(t,e,i)?s:null,de[s]=o),r}});var fe=/^(?:input|select|textarea|button)$/i,pe=/^(?:a|area)$/i;function ge(t){return(t.match(H)||[]).join(" ")}function ve(t){return t.getAttribute&&t.getAttribute("class")||""}function me(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}k.fn.extend({prop:function(t,e){return V(this,k.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[k.propFix[t]||t]})}}),k.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(t)||(e=k.propFix[e]||e,r=k.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=k.find.attr(t,"tabindex");return e?parseInt(e,10):fe.test(t.nodeName)||pe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(k.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(w(t))return this.each(function(e){k(this).addClass(t.call(this,e,ve(this)))});if((e=me(t)).length)for(;n=this[l++];)if(r=ve(n),i=1===n.nodeType&&" "+ge(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=ge(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(w(t))return this.each(function(e){k(this).removeClass(t.call(this,e,ve(this)))});if(!arguments.length)return this.attr("class","");if((e=me(t)).length)for(;n=this[l++];)if(r=ve(n),i=1===n.nodeType&&" "+ge(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=ge(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):w(t)?this.each(function(n){k(this).toggleClass(t.call(this,n,ve(this),e),e)}):this.each(function(){var e,r,o,s;if(i)for(r=0,o=k(this),s=me(t);e=s[r++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=ve(this))&&Q.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":Q.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ge(ve(n))+" ").indexOf(e)>-1)return!0;return!1}});var we=/\r/g;k.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=w(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,k(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=k.map(r,function(t){return null==t?"":t+""})),(e=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=k.valHooks[r.type]||k.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(we,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(t){var e=k.find.attr(t,"value");return null!=e?e:ge(k.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,a=s?null:[],l=s?o+1:r.length;for(i=o<0?l:s?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(e=k(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=k.makeArray(e),s=r.length;s--;)((i=r[s]).selected=k.inArray(k.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=k.inArray(k(t).val(),e)>-1}},m.checkOn||(k.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),m.focusin="onfocusin"in n;var ye=/^(?:focusinfocus|focusoutblur)$/,xe=function(t){t.stopPropagation()};k.extend(k.event,{trigger:function(t,e,i,r){var o,a,l,c,u,h,d,f,g=[i||s],v=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(a=f=l=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!ye.test(v+k.event.triggered)&&(v.indexOf(".")>-1&&(v=(m=v.split(".")).shift(),m.sort()),u=v.indexOf(":")<0&&"on"+v,(t=t[k.expando]?t:new k.Event(v,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:k.makeArray(e,[t]),d=k.event.special[v]||{},r||!d.trigger||!1!==d.trigger.apply(i,e))){if(!r&&!d.noBubble&&!y(i)){for(c=d.delegateType||v,ye.test(c+v)||(a=a.parentNode);a;a=a.parentNode)g.push(a),l=a;l===(i.ownerDocument||s)&&g.push(l.defaultView||l.parentWindow||n)}for(o=0;(a=g[o++])&&!t.isPropagationStopped();)f=a,t.type=o>1?c:d.bindType||v,(h=(Q.get(a,"events")||{})[t.type]&&Q.get(a,"handle"))&&h.apply(a,e),(h=u&&a[u])&&h.apply&&G(a)&&(t.result=h.apply(a,e),!1===t.result&&t.preventDefault());return t.type=v,r||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(g.pop(),e)||!G(i)||u&&w(i[v])&&!y(i)&&((l=i[u])&&(i[u]=null),k.event.triggered=v,t.isPropagationStopped()&&f.addEventListener(v,xe),i[v](),t.isPropagationStopped()&&f.removeEventListener(v,xe),k.event.triggered=void 0,l&&(i[u]=l)),t.result}},simulate:function(t,e,n){var i=k.extend(new k.Event,n,{type:t,isSimulated:!0});k.event.trigger(i,null,e)}}),k.fn.extend({trigger:function(t,e){return this.each(function(){k.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return k.event.trigger(t,e,n,!0)}}),m.focusin||k.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){k.event.simulate(e,t.target,k.event.fix(t))};k.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=Q.access(i,e);r||i.addEventListener(t,n,!0),Q.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Q.access(i,e)-1;r?Q.access(i,e,r):(i.removeEventListener(t,n,!0),Q.remove(i,e))}}});var be=n.location,Ce=Date.now(),ke=/\?/;k.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+t),e};var Le=/\[\]$/,Te=/\r?\n/g,$e=/^(?:submit|button|image|reset|file)$/i,Ee=/^(?:input|select|textarea|keygen)/i;function Me(t,e,n,i){var r;if(Array.isArray(e))k.each(e,function(e,r){n||Le.test(t)?i(t,r):Me(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==C(e))i(t,e);else for(r in e)Me(t+"["+r+"]",e[r],n,i)}k.param=function(t,e){var n,i=[],r=function(t,e){var n=w(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!k.isPlainObject(t))k.each(t,function(){r(this.name,this.value)});else for(n in t)Me(n,t[n],e,r);return i.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=k.prop(this,"elements");return t?k.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!k(this).is(":disabled")&&Ee.test(this.nodeName)&&!$e.test(t)&&(this.checked||!dt.test(t))}).map(function(t,e){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:n.replace(Te,"\r\n")}}).get()}});var Se=/%20/g,Ae=/#.*$/,Be=/([?&])_=[^&]*/,Ne=/^(.*?):[ \t]*([^\r\n]*)$/gm,De=/^(?:GET|HEAD)$/,Ie=/^\/\//,_e={},Oe={},je="*/".concat("*"),He=s.createElement("a");function Pe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(H)||[];if(w(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function ze(t,e,n,i){var r={},o=t===Oe;function s(a){var l;return r[a]=!0,k.each(t[a]||[],function(t,a){var c=a(e,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),l}return s(e.dataTypes[0])||!r["*"]&&s("*")}function qe(t,e){var n,i,r=k.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&k.extend(!0,t,i),t}He.href=be.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:be.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(be.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":je,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?qe(qe(t,k.ajaxSettings),e):qe(k.ajaxSettings,t)},ajaxPrefilter:Pe(_e),ajaxTransport:Pe(Oe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,a,l,c,u,h,d,f,p=k.ajaxSetup({},e),g=p.context||p,v=p.context&&(g.nodeType||g.jquery)?k(g):k.event,m=k.Deferred(),w=k.Callbacks("once memory"),y=p.statusCode||{},x={},b={},C="canceled",L={readyState:0,getResponseHeader:function(t){var e;if(u){if(!a)for(a={};e=Ne.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(t,e){return null==u&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,x[t]=e),this},overrideMimeType:function(t){return null==u&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(u)L.always(t[L.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||C;return i&&i.abort(e),T(0,e),this}};if(m.promise(L),p.url=((t||p.url||be.href)+"").replace(Ie,be.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(H)||[""],null==p.crossDomain){c=s.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=He.protocol+"//"+He.host!=c.protocol+"//"+c.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=k.param(p.data,p.traditional)),ze(_e,p,e,L),u)return L;for(d in(h=k.event&&p.global)&&0==k.active++&&k.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!De.test(p.type),r=p.url.replace(Ae,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Se,"+")):(f=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(ke.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Be,"$1"),f=(ke.test(r)?"&":"?")+"_="+Ce+++f),p.url=r+f),p.ifModified&&(k.lastModified[r]&&L.setRequestHeader("If-Modified-Since",k.lastModified[r]),k.etag[r]&&L.setRequestHeader("If-None-Match",k.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&L.setRequestHeader("Content-Type",p.contentType),L.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+je+"; q=0.01":""):p.accepts["*"]),p.headers)L.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(g,L,p)||u))return L.abort();if(C="abort",w.add(p.complete),L.done(p.success),L.fail(p.error),i=ze(Oe,p,e,L)){if(L.readyState=1,h&&v.trigger("ajaxSend",[L,p]),u)return L;p.async&&p.timeout>0&&(l=n.setTimeout(function(){L.abort("timeout")},p.timeout));try{u=!1,i.send(x,T)}catch(t){if(u)throw t;T(-1,t)}}else T(-1,"No Transport");function T(t,e,s,a){var c,d,f,x,b,C=e;u||(u=!0,l&&n.clearTimeout(l),i=void 0,o=a||"",L.readyState=t>0?4:0,c=t>=200&&t<300||304===t,s&&(x=function(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,L,s)),x=function(t,e,n,i){var r,o,s,a,l,c={},u=t.dataTypes.slice();if(u[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,x,L,c),c?(p.ifModified&&((b=L.getResponseHeader("Last-Modified"))&&(k.lastModified[r]=b),(b=L.getResponseHeader("etag"))&&(k.etag[r]=b)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=x.state,d=x.data,c=!(f=x.error))):(f=C,!t&&C||(C="error",t<0&&(t=0))),L.status=t,L.statusText=(e||C)+"",c?m.resolveWith(g,[d,C,L]):m.rejectWith(g,[L,C,f]),L.statusCode(y),y=void 0,h&&v.trigger(c?"ajaxSuccess":"ajaxError",[L,p,c?d:f]),w.fireWith(g,[L,C]),h&&(v.trigger("ajaxComplete",[L,p]),--k.active||k.event.trigger("ajaxStop")))}return L},getJSON:function(t,e,n){return k.get(t,e,n,"json")},getScript:function(t,e){return k.get(t,void 0,e,"script")}}),k.each(["get","post"],function(t,e){k[e]=function(t,n,i,r){return w(n)&&(r=r||i,i=n,n=void 0),k.ajax(k.extend({url:t,type:e,dataType:r,data:n,success:i},k.isPlainObject(t)&&t))}}),k._evalUrl=function(t){return k.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},k.fn.extend({wrapAll:function(t){var e;return this[0]&&(w(t)&&(t=t.call(this[0])),e=k(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return w(t)?this.each(function(e){k(this).wrapInner(t.call(this,e))}):this.each(function(){var e=k(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=w(t);return this.each(function(n){k(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(t){return!k.expr.pseudos.visible(t)},k.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},Re=k.ajaxSettings.xhr();m.cors=!!Re&&"withCredentials"in Re,m.ajax=Re=!!Re,k.ajaxTransport(function(t){var e,i;if(m.cors||Re&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(We[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),k.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return k.globalEval(t),t}}}),k.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),k.ajaxTransport("script",function(t){var e,n;if(t.crossDomain)return{send:function(i,r){e=k("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}});var Fe,Ve=[],Ze=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||k.expando+"_"+Ce++;return this[t]=!0,t}}),k.ajaxPrefilter("json jsonp",function(t,e,i){var r,o,s,a=!1!==t.jsonp&&(Ze.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ze.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=w(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ze,"$1"+r):!1!==t.jsonp&&(t.url+=(ke.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||k.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?k(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(r)),s&&w(o)&&o(s[0]),s=o=void 0}),"script"}),m.createHTMLDocument=((Fe=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Fe.childNodes.length),k.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(m.createHTMLDocument?((i=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(i)):e=s),r=B.exec(t),o=!n&&[],r?[e.createElement(r[1])]:(r=bt([t],e,o),o&&o.length&&k(o).remove(),k.merge([],r.childNodes)));var i,r,o},k.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=ge(t.slice(a)),t=t.slice(0,a)),w(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&k.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?k("<div>").append(k.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){k.fn[e]=function(t){return this.on(e,t)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,c=k.css(t,"position"),u=k(t),h={};"static"===c&&(t.style.position="relative"),a=u.offset(),o=k.css(t,"top"),l=k.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(s=(i=u.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),w(e)&&(e=e.call(t,n,k.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):u.css(h)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===k.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===k.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=k(t).offset()).top+=k.css(t,"borderTopWidth",!0),r.left+=k.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-k.css(i,"marginTop",!0),left:e.left-r.left-k.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===k.css(t,"position");)t=t.offsetParent;return t||Ct})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;k.fn[t]=function(i){return V(this,function(t,i,r){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),k.each(["top","left"],function(t,e){k.cssHooks[e]=Ft(m.pixelPosition,function(t,n){if(n)return n=Rt(t,e),zt.test(n)?k(t).position()[e]+"px":n})}),k.each({Height:"height",Width:"width"},function(t,e){k.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){k.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return V(this,function(e,n,r){var o;return y(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?k.css(e,n,a):k.style(e,n,r,a)},e,s?r:void 0,s)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){k.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),k.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),k.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),k.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),w(t))return i=l.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(l.call(arguments)))}).guid=t.guid=t.guid||k.guid++,r},k.holdReady=function(t){t?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=A,k.isFunction=w,k.isWindow=y,k.camelCase=X,k.type=C,k.now=Date.now,k.isNumeric=function(t){var e=k.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(i=function(){return k}.apply(e,[]))||(t.exports=i);var Ue=n.jQuery,Ye=n.$;return k.noConflict=function(t){return n.$===k&&(n.$=Ye),t&&n.jQuery===k&&(n.jQuery=Ue),k},r||(n.jQuery=n.$=k),k})},function(t,e,n){"use strict";(function(t){var e=r(n(5)),i=r(n(1));function r(t){return t&&t.__esModule?t:{default:t}}n(12),e.default.use(i.default);var o=t("#feed-form"),s=t("#feed-modal");o.submit(function(e){e.preventDefault(),t.ajax({type:o[0].method,url:o[0].action,data:t(o).serialize(),beforeSend:function(t){s.html('\n                    <div class="uk-card uk-card-default uk-card-body">\n                    <p class="uk-text-center uk-text-lead">\n                    <span uk-spinner="ratio: 4.5"></span>\n                    </p>\n                    <button class="uk-button uk-align-center uk-text-center uk-button-default uk-modal-close" type="button">Закрыть</button>\n                    </div>\n                ')}}).done(function(t){s.html('\n                <div class="uk-card uk-card-default uk-card-body">\n                <h2 class="uk-card-title uk-heading-divider uk-text-success uk-text-center">Ваша заявка отправлена! </h2>\n                <p class="uk-text-center uk-text-lead">\n                Мы свяжемся с вами в ближайшее время\n                </p>\n                <button class="uk-button uk-align-center uk-text-center uk-button-default uk-modal-close" type="button">Закрыть</button>\n                </div>\n            ')})})}).call(this,n(6))},,,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
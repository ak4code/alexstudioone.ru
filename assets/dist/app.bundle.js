!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,i){!function(t,e){if(y[t]&&x[t]){for(var i in x[t]=!1,e)Object.prototype.hasOwnProperty.call(e,i)&&(g[i]=e[i]);0==--v&&0===m&&L()}}(t,i),e&&e(t,i)};var i,n=!0,o="ffeebb5bbbb680c87d3d",r=1e4,s={},a=[],l=[];function h(t){var e=M[t];if(!e)return B;var n=function(n){return e.hot.active?(M[n]?-1===M[n].parents.indexOf(t)&&M[n].parents.push(t):(a=[t],i=n),-1===e.children.indexOf(n)&&e.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+t),a=[]),B(n)},o=function(t){return{configurable:!0,enumerable:!0,get:function(){return B[t]},set:function(e){B[t]=e}}};for(var r in B)Object.prototype.hasOwnProperty.call(B,r)&&"e"!==r&&Object.defineProperty(n,r,o(r));return n.e=function(t){return"ready"===u&&d("prepare"),m++,B.e(t).then(e,function(t){throw e(),t});function e(){m--,"prepare"===u&&(w[t]||b(t),0===m&&0===v&&L())}},n}var c=[],u="idle";function d(t){u=t;for(var e=0;e<c.length;e++)c[e].call(null,t)}var f,g,p,v=0,m=0,w={},x={},y={};function C(t){return+t+""===t?+t:t}function k(t){if("idle"!==u)throw new Error("check() is only allowed in idle status");return n=t,d("check"),(e=r,e=e||1e4,new Promise(function(t,i){if("undefined"==typeof XMLHttpRequest)return i(new Error("No browser support"));try{var n=new XMLHttpRequest,r=B.p+""+o+".hot-update.json";n.open("GET",r,!0),n.timeout=e,n.send(null)}catch(t){return i(t)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)i(new Error("Manifest request to "+r+" timed out."));else if(404===n.status)t();else if(200!==n.status&&304!==n.status)i(new Error("Manifest request to "+r+" failed."));else{try{var e=JSON.parse(n.responseText)}catch(t){return void i(t)}t(e)}}})).then(function(t){if(!t)return d("idle"),null;x={},w={},y=t.c,p=t.h,d("prepare");var e=new Promise(function(t,e){f={resolve:t,reject:e}});return g={},b(0),"prepare"===u&&0===m&&0===v&&L(),e});var e}function b(t){y[t]?(x[t]=!0,v++,function(t){var e=document.getElementsByTagName("head")[0],i=document.createElement("script");i.charset="utf-8",i.src=B.p+""+t+"."+o+".hot-update.js",e.appendChild(i)}(t)):w[t]=!0}function L(){d("ready");var t=f;if(f=null,t)if(n)Promise.resolve().then(function(){return $(n)}).then(function(e){t.resolve(e)},function(e){t.reject(e)});else{var e=[];for(var i in g)Object.prototype.hasOwnProperty.call(g,i)&&e.push(C(i));t.resolve(e)}}function $(e){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var i,n,r,l,h;function c(t){for(var e=[t],i={},n=e.slice().map(function(t){return{chain:[t],id:t}});n.length>0;){var o=n.pop(),r=o.id,s=o.chain;if((l=M[r])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:r};if(l.hot._main)return{type:"unaccepted",chain:s,moduleId:r};for(var a=0;a<l.parents.length;a++){var h=l.parents[a],c=M[h];if(c){if(c.hot._declinedDependencies[r])return{type:"declined",chain:s.concat([h]),moduleId:r,parentId:h};-1===e.indexOf(h)&&(c.hot._acceptedDependencies[r]?(i[h]||(i[h]=[]),f(i[h],[r])):(delete i[h],e.push(h),n.push({chain:s.concat([h]),id:h})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:i}}function f(t,e){for(var i=0;i<e.length;i++){var n=e[i];-1===t.indexOf(n)&&t.push(n)}}e=e||{};var v={},m=[],w={},x=function(){console.warn("[HMR] unexpected require("+b.moduleId+") to disposed module")};for(var k in g)if(Object.prototype.hasOwnProperty.call(g,k)){var b;h=C(k);var L=!1,$=!1,I=!1,T="";switch((b=g[k]?c(h):{type:"disposed",moduleId:k}).chain&&(T="\nUpdate propagation: "+b.chain.join(" -> ")),b.type){case"self-declined":e.onDeclined&&e.onDeclined(b),e.ignoreDeclined||(L=new Error("Aborted because of self decline: "+b.moduleId+T));break;case"declined":e.onDeclined&&e.onDeclined(b),e.ignoreDeclined||(L=new Error("Aborted because of declined dependency: "+b.moduleId+" in "+b.parentId+T));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(b),e.ignoreUnaccepted||(L=new Error("Aborted because "+h+" is not accepted"+T));break;case"accepted":e.onAccepted&&e.onAccepted(b),$=!0;break;case"disposed":e.onDisposed&&e.onDisposed(b),I=!0;break;default:throw new Error("Unexception type "+b.type)}if(L)return d("abort"),Promise.reject(L);if($)for(h in w[h]=g[h],f(m,b.outdatedModules),b.outdatedDependencies)Object.prototype.hasOwnProperty.call(b.outdatedDependencies,h)&&(v[h]||(v[h]=[]),f(v[h],b.outdatedDependencies[h]));I&&(f(m,[b.moduleId]),w[h]=x)}var E,_=[];for(n=0;n<m.length;n++)h=m[n],M[h]&&M[h].hot._selfAccepted&&_.push({module:h,errorHandler:M[h].hot._selfAccepted});d("dispose"),Object.keys(y).forEach(function(t){!1===y[t]&&function(t){delete installedChunks[t]}(t)});for(var A,S,O=m.slice();O.length>0;)if(h=O.pop(),l=M[h]){var N={},D=l.hot._disposeHandlers;for(r=0;r<D.length;r++)(i=D[r])(N);for(s[h]=N,l.hot.active=!1,delete M[h],delete v[h],r=0;r<l.children.length;r++){var z=M[l.children[r]];z&&(E=z.parents.indexOf(h))>=0&&z.parents.splice(E,1)}}for(h in v)if(Object.prototype.hasOwnProperty.call(v,h)&&(l=M[h]))for(S=v[h],r=0;r<S.length;r++)A=S[r],(E=l.children.indexOf(A))>=0&&l.children.splice(E,1);for(h in d("apply"),o=p,w)Object.prototype.hasOwnProperty.call(w,h)&&(t[h]=w[h]);var H=null;for(h in v)if(Object.prototype.hasOwnProperty.call(v,h)&&(l=M[h])){S=v[h];var P=[];for(n=0;n<S.length;n++)if(A=S[n],i=l.hot._acceptedDependencies[A]){if(-1!==P.indexOf(i))continue;P.push(i)}for(n=0;n<P.length;n++){i=P[n];try{i(S)}catch(t){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:h,dependencyId:S[n],error:t}),e.ignoreErrored||H||(H=t)}}}for(n=0;n<_.length;n++){var j=_[n];h=j.module,a=[h];try{B(h)}catch(t){if("function"==typeof j.errorHandler)try{j.errorHandler(t)}catch(i){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:h,error:i,originalError:t}),e.ignoreErrored||H||(H=i),H||(H=t)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:h,error:t}),e.ignoreErrored||H||(H=t)}}return H?(d("fail"),Promise.reject(H)):(d("idle"),new Promise(function(t){t(m)}))}var M={};function B(e){if(M[e])return M[e].exports;var n=M[e]={i:e,l:!1,exports:{},hot:function(t){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:i!==t,active:!0,accept:function(t,i){if(void 0===t)e._selfAccepted=!0;else if("function"==typeof t)e._selfAccepted=t;else if("object"==typeof t)for(var n=0;n<t.length;n++)e._acceptedDependencies[t[n]]=i||function(){};else e._acceptedDependencies[t]=i||function(){}},decline:function(t){if(void 0===t)e._selfDeclined=!0;else if("object"==typeof t)for(var i=0;i<t.length;i++)e._declinedDependencies[t[i]]=!0;else e._declinedDependencies[t]=!0},dispose:function(t){e._disposeHandlers.push(t)},addDisposeHandler:function(t){e._disposeHandlers.push(t)},removeDisposeHandler:function(t){var i=e._disposeHandlers.indexOf(t);i>=0&&e._disposeHandlers.splice(i,1)},check:k,apply:$,status:function(t){if(!t)return u;c.push(t)},addStatusHandler:function(t){c.push(t)},removeStatusHandler:function(t){var e=c.indexOf(t);e>=0&&c.splice(e,1)},data:s[t]};return i=void 0,e}(e),parents:(l=a,a=[],l),children:[]};return t[e].call(n.exports,n,n.exports,h(e)),n.l=!0,n.exports}B.m=t,B.c=M,B.d=function(t,e,i){B.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},B.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},B.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return B.d(e,"a",e),e},B.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},B.p="",B.h=function(){return o},h(6)(B.s=6)}([function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){
/*! UIkit 3.0.0-beta.42 | http://www.getuikit.com | (c) 2014 - 2017 YOOtheme | MIT License */
t.exports=function(){"use strict";var t={album:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="5" y="2" width="10" height="1" /> <rect x="3" y="4" width="14" height="1" /> <rect fill="none" stroke="#000" x="1.5" y="6.5" width="17" height="11" /></svg>',ban:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <line fill="none" stroke="#000" stroke-width="1.1" x1="4" y1="3.5" x2="16" y2="16.5" /></svg>',behance:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z" /> <path d="M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z" /> <rect x="13" y="4" width="5" height="1.4" /></svg>',bell:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z" /> <path fill="none" stroke="#000" d="M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16" /></svg>',bold:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z" /></svg>',bolt:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z" /></svg>',bookmark:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5" /></svg>',calendar:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z" /> <rect width="1" height="3" x="6" y="2" /> <rect width="1" height="3" x="13" y="2" /></svg>',camera:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10.8" r="3.8" /> <path fill="none" stroke="#000" d="M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z" /></svg>',cart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="7.3" cy="17.3" r="1.4" /> <circle cx="13.3" cy="17.3" r="1.4" /> <polyline fill="none" stroke="#000" points="0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5" /></svg>',check:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.1" points="4,10 8,15 17,4" /></svg>',clock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <rect x="9" y="4" width="1" height="7" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625" /></svg>',close:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.06" d="M16,16 L4,4" /> <path fill="none" stroke="#000" stroke-width="1.06" d="M16,4 L4,16" /></svg>',code:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.01" points="13,4 19,10 13,16" /> <polyline fill="none" stroke="#000" stroke-width="1.01" points="7,4 1,10 7,16" /></svg>',cog:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" cx="9.997" cy="10" r="3.31" /> <path fill="none" stroke="#000" d="M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z" /></svg>',comment:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z" /></svg>',commenting:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5" /> <circle cx="10" cy="8" r="1" /> <circle cx="6" cy="8" r="1" /> <circle cx="14" cy="8" r="1" /></svg>',comments:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="2 0.5 19.5 0.5 19.5 13" /> <path d="M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z" /></svg>',copy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="2.5" width="12" height="16" /> <polyline fill="none" stroke="#000" points="5 0.5 17.5 0.5 17.5 17" /></svg>',database:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <ellipse fill="none" stroke="#000" cx="10" cy="4.64" rx="7.5" ry="3.14" /> <path fill="none" stroke="#000" d="M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11" /> <path fill="none" stroke="#000" d="M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25" /> <path fill="none" stroke="#000" d="M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64" /></svg>',desktop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="8" y="15" width="1" height="2" /> <rect x="11" y="15" width="1" height="2" /> <rect x="5" y="16" width="10" height="1" /> <rect fill="none" stroke="#000" x="1.5" y="3.5" width="17" height="11" /></svg>',download:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="14,10 9.5,14.5 5,10" /> <rect x="3" y="17" width="13" height="1" /> <line fill="none" stroke="#000" x1="9.5" y1="13.91" x2="9.5" y2="3" /></svg>',dribbble:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.4" d="M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5" /> <path fill="none" stroke="#000" stroke-width="1.4" d="M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6" /> <path fill="none" stroke="#000" stroke-width="1.4" d="M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4" /> <circle fill="none" stroke="#000" stroke-width="1.4" cx="10" cy="10" r="9" /></svg>',expand:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="13 2 18 2 18 7 17 7 17 3 13 3" /> <polygon points="2 13 3 13 3 17 7 17 7 18 2 18" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M11,9 L17,3" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M3,17 L9,11" /></svg>',facebook:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z" /></svg>',file:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="1.5" width="13" height="17" /></svg>',flickr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="5.5" cy="9.5" r="3.5" /> <circle cx="14.5" cy="9.5" r="3.5" /></svg>',folder:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5" /></svg>',forward:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z" /></svg>',foursquare:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z" /></svg>',future:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline points="19 2 18 2 18 6 14 6 14 7 19 7 19 2" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10" /> <rect x="9" y="4" width="1" height="7" /> <path d="M13.018,14.197 L9.445,10.625" fill="none" stroke="#000" stroke-width="1.1" /></svg>',github:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z" /></svg>',gitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="3.5" y="1" width="1.531" height="11.471" /> <rect x="7.324" y="4.059" width="1.529" height="15.294" /> <rect x="11.148" y="4.059" width="1.527" height="15.294" /> <rect x="14.971" y="4.059" width="1.529" height="8.412" /></svg>',google:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z" /></svg>',grid:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="2" y="2" width="3" height="3" /> <rect x="8" y="2" width="3" height="3" /> <rect x="14" y="2" width="3" height="3" /> <rect x="2" y="8" width="3" height="3" /> <rect x="8" y="8" width="3" height="3" /> <rect x="14" y="8" width="3" height="3" /> <rect x="2" y="14" width="3" height="3" /> <rect x="8" y="14" width="3" height="3" /> <rect x="14" y="14" width="3" height="3" /></svg>',happy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="13" cy="7" r="1" /> <circle cx="7" cy="7" r="1" /> <circle fill="none" stroke="#000" cx="10" cy="10" r="8.5" /> <path fill="none" stroke="#000" d="M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4" /></svg>',hashtag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z" /></svg>',heart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.03" d="M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z" /></svg>',history:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="#000" points="1 2 2 2 2 6 6 6 6 7 1 7 1 2" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10" /> <rect x="9" y="4" width="1" height="7" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625" id="Shape" /></svg>',home:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65" /> <polygon points="15 4 18 4 18 7 17 7 17 5 15 5" /> <polygon points="3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19" /></svg>',image:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="16.1" cy="6.1" r="1.1" /> <rect fill="none" stroke="#000" x="0.5" y="2.5" width="19" height="15" /> <polyline fill="none" stroke="#000" stroke-width="1.01" points="4,13 8,9 13,14" /> <polyline fill="none" stroke="#000" stroke-width="1.01" points="11,12 12.5,10.5 16,14" /></svg>',info:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /></svg>',instagram:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z" /> <circle cx="14.87" cy="5.26" r="1.09" /> <path d="M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z" /></svg>',italic:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z" /></svg>',joomla:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z" /> <path d="M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8" /> <path d="M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8" /> <path d="M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7" /></svg>',laptop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect y="16" width="20" height="1" /> <rect fill="none" stroke="#000" x="2.5" y="4.5" width="15" height="10" /></svg>',lifesaver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z" /></svg>',link:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M7.925,11.875 L11.925,7.975" /></svg>',linkedin:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z" /> <path d="M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z" /></svg>',list:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="6" y="4" width="12" height="1" /> <rect x="6" y="9" width="12" height="1" /> <rect x="6" y="14" width="12" height="1" /> <rect x="2" y="4" width="2" height="1" /> <rect x="2" y="9" width="2" height="1" /> <rect x="2" y="14" width="2" height="1" /></svg>',location:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.01" d="M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z" /> <circle fill="none" stroke="#000" cx="10" cy="6.8" r="2.3" /></svg>',lock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" height="10" width="13" y="8.5" x="3.5" /> <path fill="none" stroke="#000" d="M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8" /></svg>',mail:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="1.4,6.5 10,11 18.6,6.5" /> <path d="M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z" /></svg>',menu:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="2" y="4" width="16" height="1" /> <rect x="2" y="9" width="16" height="1" /> <rect x="2" y="14" width="16" height="1" /></svg>',minus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect height="1" width="18" y="9" x="1" /></svg>',more:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="3" cy="10" r="2" /> <circle cx="10" cy="10" r="2" /> <circle cx="17" cy="10" r="2" /></svg>',move:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="4,5 1,5 1,9 2,9 2,6 4,6 " /> <polygon points="1,16 2,16 2,18 4,18 4,19 1,19 " /> <polygon points="14,16 14,19 11,19 11,18 13,18 13,16 " /> <rect fill="none" stroke="#000" x="5.5" y="1.5" width="13" height="13" /> <rect x="1" y="11" width="1" height="3" /> <rect x="6" y="18" width="3" height="1" /></svg>',nut:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3" /> <circle fill="none" stroke="#000" cx="10" cy="10" r="3.5" /></svg>',pagekit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19 " /></svg>',pencil:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z" /> <path fill="none" stroke="#000" d="M15.98,7.268 L13.851,5.148" /></svg>',phone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z" /> <circle cx="10.5" cy="16.5" r="0.8" /></svg>',pinterest:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1" /></svg>',play:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" points="6.5,5 14.5,10 6.5,15" /></svg>',plus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="9" y="1" width="1" height="17" /> <rect x="1" y="9" width="17" height="1" /></svg>',pull:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7" /> <line fill="none" stroke="#000" x1="9.5" y1="11" x2="9.5" y2="2" /> <polyline fill="none" stroke="#000" points="6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5" /></svg>',push:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3" /> <line fill="none" stroke="#000" x1="9.5" y1="10" x2="9.5" y2="1" /> <polyline fill="none" stroke="#000" points="6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5" /></svg>',question:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <circle cx="10.44" cy="14.42" r="1.05" /> <path fill="none" stroke="#000" stroke-width="1.2" d="M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75" /></svg>',receiver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.01" d="M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611" /></svg>',refresh:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5" /> <polyline fill="none" stroke="#000" points="9.9 2 12.79 4.89 9.79 7.9" /></svg>',reply:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z" /></svg>',rss:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="3.12" cy="16.8" r="1.85" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5" /></svg>',search:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z" /></svg>',server:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="3" y="3" width="1" height="2" /> <rect x="5" y="3" width="1" height="2" /> <rect x="7" y="3" width="1" height="2" /> <rect x="16" y="3" width="1" height="1" /> <rect x="16" y="10" width="1" height="1" /> <circle fill="none" stroke="#000" cx="9.9" cy="17.4" r="1.4" /> <rect x="3" y="10" width="1" height="2" /> <rect x="5" y="10" width="1" height="2" /> <rect x="9.5" y="14" width="1" height="2" /> <rect x="3" y="17" width="6" height="1" /> <rect x="11" y="17" width="6" height="1" /> <rect fill="none" stroke="#000" x="1.5" y="1.5" width="17" height="5" /> <rect fill="none" stroke="#000" x="1.5" y="8.5" width="17" height="5" /></svg>',settings:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <ellipse fill="none" stroke="#000" cx="6.11" cy="3.55" rx="2.11" ry="2.15" /> <ellipse fill="none" stroke="#000" cx="6.11" cy="15.55" rx="2.11" ry="2.15" /> <circle fill="none" stroke="#000" cx="13.15" cy="9.55" r="2.15" /> <rect x="1" y="3" width="3" height="1" /> <rect x="10" y="3" width="8" height="1" /> <rect x="1" y="9" width="8" height="1" /> <rect x="15" y="9" width="3" height="1" /> <rect x="1" y="15" width="3" height="1" /> <rect x="10" y="15" width="8" height="1" /></svg>',shrink:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="11 4 12 4 12 8 16 8 16 9 11 9" /> <polygon points="4 11 9 11 9 16 8 16 8 12 4 12" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M12,8 L18,2" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M2,18 L8,12" /></svg>',social:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <line fill="none" stroke="#000" stroke-width="1.1" x1="13.4" y1="14" x2="6.3" y2="10.7" /> <line fill="none" stroke="#000" stroke-width="1.1" x1="13.5" y1="5.5" x2="6.5" y2="8.8" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="4.6" r="2.3" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="14.8" r="2.3" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="4.5" cy="9.8" r="2.3" /></svg>',soundcloud:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z" /> <rect x="6" y="6.5" width="1.5" height="8.5" /> <rect x="3" y="8" width="1.5" height="7" /> <rect y="10" width="1.5" height="5" /></svg>',star:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" stroke-width="1.01" points="10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27" /></svg>',strikethrough:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z" /> <rect x="3" y="10" width="15" height="1" /></svg>',table:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="1" y="3" width="18" height="1" /> <rect x="1" y="7" width="18" height="1" /> <rect x="1" y="11" width="18" height="1" /> <rect x="1" y="15" width="18" height="1" /></svg>',tablet:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z" /> <circle cx="10.5" cy="16.3" r="0.8" /></svg>',tag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z" /> <circle cx="14" cy="6" r="1" /></svg>',thumbnails:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="3.5" width="5" height="5" /> <rect fill="none" stroke="#000" x="11.5" y="3.5" width="5" height="5" /> <rect fill="none" stroke="#000" x="11.5" y="11.5" width="5" height="5" /> <rect fill="none" stroke="#000" x="3.5" y="11.5" width="5" height="5" /></svg>',trash:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="6.5 3 6.5 1.5 13.5 1.5 13.5 3" /> <polyline fill="none" stroke="#000" points="4.5 4 4.5 18.5 15.5 18.5 15.5 4" /> <rect x="8" y="7" width="1" height="9" /> <rect x="11" y="7" width="1" height="9" /> <rect x="2" y="3" width="16" height="1" /></svg>',tripadvisor:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z" /></svg>',tumblr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z" /></svg>',tv:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect x="7" y="16" width="6" height="1" /> <rect fill="none" stroke="#000" x="0.5" y="3.5" width="19" height="11" /></svg>',twitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74" /></svg>',uikit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3" /> <polygon points="9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3" /></svg>',unlock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="3.5" y="8.5" width="13" height="10" /> <path fill="none" stroke="#000" d="M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9" /></svg>',upload:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="5 8 9.5 3.5 14 8 " /> <rect x="3" y="17" width="13" height="1" /> <line fill="none" stroke="#000" x1="9.5" y1="15" x2="9.5" y2="4" /></svg>',user:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.9" cy="6.4" r="4.4" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2" /></svg>',users:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="7.7" cy="8.6" r="3.5" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1" /></svg>',vimeo:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z" /></svg>',warning:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="10" cy="14" r="1" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /> <path d="M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z" /></svg>',whatsapp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9" /></svg>',wordpress:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z" /></svg>',world:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M1,10.5 L19,10.5" /> <path fill="none" stroke="#000" d="M2.35,15.5 L17.65,15.5" /> <path fill="none" stroke="#000" d="M2.35,5.5 L17.523,5.5" /> <path fill="none" stroke="#000" d="M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z" /> <circle fill="none" stroke="#000" cx="10" cy="10.5" r="9" /></svg>',xing:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z" /> <path d="M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z" /></svg>',yelp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z" /></svg>',youtube:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z" /></svg>',"500px":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719\t\tc0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449\t\tc-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045\t\tc-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z" /> <path d="M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066\t\tc0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564\t\tc0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271\t\tc0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z" /> <path d="M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521\t\tc-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53\t\tc-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203\t\tc-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604\t\tc0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645\t\tc1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z" /> <path d="M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461\t\tc0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882\t\tc0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881\t\tc-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461\t\tc-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915\t\tC5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0\t\tc0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408\t\tc0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406\t\tc-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799\t\tc0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468\t\tc-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607\t\tc0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038\t\tc-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113\t\tc-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z" /></svg>',"arrow-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66" /> <line fill="none" stroke="#000" x1="10.5" y1="4" x2="10.5" y2="15" /></svg>',"arrow-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="10 14 5 9.5 10 5" /> <line fill="none" stroke="#000" x1="16" y1="9.5" x2="5" y2="9.52" /></svg>',"arrow-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" points="10 5 15 9.5 10 14" /> <line fill="none" stroke="#000" x1="4" y1="9.5" x2="15" y2="9.5" /></svg>',"arrow-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4" /> <line fill="none" stroke="#000" x1="10.5" y1="16" x2="10.5" y2="5" /></svg>',"chevron-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="16 7 10 13 4 7" /></svg>',"chevron-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="13 16 7 10 13 4" /></svg>',"chevron-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="7 4 13 10 7 16" /></svg>',"chevron-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polyline fill="none" stroke="#000" stroke-width="1.03" points="4 13 10 7 16 13" /></svg>',"cloud-download":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6" /> <polyline fill="none" stroke="#000" points="11.75 16 9.5 18.25 7.25 16" /> <path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5" /></svg>',"cloud-upload":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6" /> <polyline fill="none" stroke="#000" points="7.25 11.75 9.5 9.5 11.75 11.75" /> <path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5" /></svg>',"credit-card":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <rect fill="none" stroke="#000" x="1.5" y="4.5" width="17" height="12" /> <rect x="1" y="7" width="18" height="3" /></svg>',"file-edit":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z" /> <polyline fill="none" stroke="#000" points="16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5" /></svg>',"git-branch":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="3" r="2" /> <circle fill="none" stroke="#000" stroke-width="1.2" cx="14" cy="6" r="2" /> <circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="17" r="2" /> <path fill="none" stroke="#000" stroke-width="2" d="M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5" /></svg>',"git-fork":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.2" cx="5.79" cy="2.79" r="1.79" /> <circle fill="none" stroke="#000" stroke-width="1.2" cx="14.19" cy="2.79" r="1.79" /> <ellipse fill="none" stroke="#000" stroke-width="1.2" cx="10.03" cy="16.79" rx="1.79" ry="1.79" /> <path fill="none" stroke="#000" stroke-width="2" d="M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57" /></svg>',"github-alt":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z" /></svg>',"google-plus":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M12.9,9c0,2.7-0.6,5-3.2,6.3c-3.7,1.8-8.1,0.2-9.4-3.6C-1.1,7.6,1.9,3.3,6.1,3c1.7-0.1,3.2,0.3,4.6,1.3 c0.1,0.1,0.3,0.2,0.4,0.4c-0.5,0.5-1.2,1-1.7,1.6c-1-0.8-2.1-1.1-3.5-0.9C5,5.6,4.2,6,3.6,6.7c-1.3,1.3-1.5,3.4-0.5,5 c1,1.7,2.6,2.3,4.6,1.9c1.4-0.3,2.4-1.2,2.6-2.6H6.9V9H12.9z" /> <polygon points="20,9 20,11 18,11 18,13 16,13 16,11 14,11 14,9 16,9 16,7 18,7 18,9 " /></svg>',"minus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9" /> <line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5" /></svg>',"more-vertical":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle cx="10" cy="3" r="2" /> <circle cx="10" cy="10" r="2" /> <circle cx="10" cy="17" r="2" /></svg>',"paint-bucket":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z" /> <path fill="none" stroke="#000" stroke-width="1.1" d="M6.42,2.33 L11.7,7.61" /> <path d="M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z" /></svg>',"phone-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z" /> <circle cx="3.8" cy="10.5" r="0.8" /></svg>',"play-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon fill="none" stroke="#000" stroke-width="1.1" points="8.5 7 13.5 10 8.5 13" /> <circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9" /></svg>',"plus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9" /> <line fill="none" stroke="#000" x1="9.5" y1="5" x2="9.5" y2="14" /> <line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5" /></svg>',"quote-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path d="M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z" /> <path d="M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z" /></svg>',"sign-in":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3" /> <polygon points="9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5" /></svg>',"sign-out":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5" /> <polygon points="13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3" /></svg>',"tablet-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <path fill="none" stroke="#000" d="M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z" /> <circle cx="3.7" cy="10.5" r="0.8" /></svg>',"triangle-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="5 7 15 7 10 12" /></svg>',"triangle-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="12 5 7 10 12 15" /></svg>',"triangle-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="8 5 13 10 8 15" /></svg>',"triangle-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="5 13 10 8 15 13" /></svg>',"video-camera":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"> <polygon points="18,6 18,14 12,10 " /> <rect x="2" y="5" width="12" height="10" /></svg>'};function e(i){e.installed||i.icon.add(t)}return"undefined"!=typeof window&&window.UIkit&&window.UIkit.use(e),e}()},function(t,e){var i,n,o=t.exports={};function r(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(i===setTimeout)return setTimeout(t,0);if((i===r||!i)&&setTimeout)return i=setTimeout,setTimeout(t,0);try{return i(t,0)}catch(e){try{return i.call(null,t,0)}catch(e){return i.call(this,t,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:r}catch(t){i=r}try{n="function"==typeof clearTimeout?clearTimeout:s}catch(t){n=s}}();var l,h=[],c=!1,u=-1;function d(){c&&l&&(c=!1,l.length?h=l.concat(h):u=-1,h.length&&f())}function f(){if(!c){var t=a(d);c=!0;for(var e=h.length;e;){for(l=h,h=[];++u<e;)l&&l[u].run();u=-1,e=h.length}l=null,c=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===s||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch(e){try{return n.call(null,t)}catch(e){return n.call(this,t)}}}(t)}}function g(t,e){this.fun=t,this.array=e}function p(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];h.push(new g(t,e)),1!==h.length||c||a(f)},g.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=p,o.addListener=p,o.once=p,o.off=p,o.removeListener=p,o.removeAllListeners=p,o.emit=p,o.prependListener=p,o.prependOnceListener=p,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,i){(function(t,e){!function(t,i){"use strict";if(!t.setImmediate){var n,o,r,s,a,l=1,h={},c=!1,u=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick(function(){g(t)})}:function(){if(t.postMessage&&!t.importScripts){var e=!0,i=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=i,e}}()?(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&g(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),n=function(e){t.postMessage(s+e,"*")}):t.MessageChannel?((r=new MessageChannel).port1.onmessage=function(t){g(t.data)},n=function(t){r.port2.postMessage(t)}):u&&"onreadystatechange"in u.createElement("script")?(o=u.documentElement,n=function(t){var e=u.createElement("script");e.onreadystatechange=function(){g(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):n=function(t){setTimeout(g,0,t)},d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),i=0;i<e.length;i++)e[i]=arguments[i+1];var o={callback:t,args:e};return h[l]=o,n(l),l++},d.clearImmediate=f}function f(t){delete h[t]}function g(t){if(c)setTimeout(g,0,t);else{var e=h[t];if(e){c=!0;try{!function(t){var e=t.callback,n=t.args;switch(n.length){case 0:e();break;case 1:e(n[0]);break;case 2:e(n[0],n[1]);break;case 3:e(n[0],n[1],n[2]);break;default:e.apply(i,n)}}(e)}finally{f(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,i(0),i(2))},function(t,e,i){(function(t){var n=this,o=Function.prototype.apply;function r(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new r(o.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new r(o.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},r.prototype.unref=r.prototype.ref=function(){},r.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},i(3),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,i(0))},function(t,e,i){(function(e){/*! UIkit 3.0.0-beta.42 | http://www.getuikit.com | (c) 2014 - 2017 YOOtheme | MIT License */
t.exports=function(){"use strict";function t(t,e){return function(i){var n=arguments.length;return n?n>1?t.apply(e,arguments):t.call(e,i):t.call(e)}}var i=Object.prototype.hasOwnProperty;function n(t,e){return i.call(t,e)}var o=/([a-z\d])([A-Z])/g;function r(t){return t.replace(o,"$1-$2").toLowerCase()}var s=/-(\w)/g;function a(t){return t.replace(s,l)}function l(t,e){return e?e.toUpperCase():""}function h(t){return t.length?l(0,t.charAt(0))+t.slice(1):""}var c=String.prototype,u=c.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function d(t,e){return u.call(t,e)}var f=c.endsWith||function(t){return this.substr(-t.length)===t};function g(t,e){return f.call(t,e)}var p=function(t){return~this.indexOf(t)},v=c.includes||p,m=Array.prototype.includes||p;function w(t,e){return t&&(T(t)?v:m).call(t,e)}var x=Array.isArray;function y(t){return"function"==typeof t}function C(t){return null!==t&&"object"==typeof t}function k(t){return C(t)&&Object.getPrototypeOf(t)===Object.prototype}function b(t){return C(t)&&t===t.window}function L(t){return C(t)&&9===t.nodeType}function $(t){return C(t)&&!!t.jquery}function M(t){return t instanceof Node||C(t)&&1===t.nodeType}function B(t){return t instanceof NodeList||t instanceof HTMLCollection}function I(t){return"boolean"==typeof t}function T(t){return"string"==typeof t}function E(t){return"number"==typeof t}function _(t){return E(t)||T(t)&&!isNaN(t-parseFloat(t))}function A(t){return void 0===t}function S(t){return I(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function O(t){var e=Number(t);return!isNaN(e)&&e}function N(t){return parseFloat(t)||0}function D(t){return M(t)||b(t)||L(t)?t:B(t)||$(t)?t[0]:x(t)?D(t[0]):null}var z=Array.prototype;function H(t){return M(t)?[t]:B(t)?z.slice.call(t):x(t)?t.map(D).filter(Boolean):$(t)?t.toArray():[]}function P(t){return x(t)?t:T(t)?t.split(/,(?![^(]*\))/).map(function(t){return _(t)?O(t):S(t.trim())}):[t]}function j(t){return t?g(t,"ms")?N(t):1e3*N(t):0}function W(t,e,i){return t.replace(new RegExp(e+"|"+i,"mg"),function(t){return t===e?i:e})}var Z=Object.assign||function(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];t=Object(t);for(var o=0;o<e.length;o++){var r=e[o];if(null!==r)for(var s in r)n(r,s)&&(t[s]=r[s])}return t};function F(t,e){for(var i in t)if(!1===e.call(t[i],t[i],i))break}function V(t,e,i){return void 0===e&&(e=0),void 0===i&&(i=1),Math.min(Math.max(t,e),i)}function R(){}function q(t,e){return t.left<=e.right&&e.left<=t.right&&t.top<=e.bottom&&e.top<=t.bottom}function Y(t,e){return q({top:t.y,bottom:t.y,left:t.x,right:t.x},e)}var U={ratio:function(t,e,i){var n,o="width"===e?"height":"width";return(n={})[o]=Math.round(i*t[o]/t[e]),n[e]=i,n},contain:function(t,e){var i=this;return F(t=Z({},t),function(n,o){return t=t[o]>e[o]?i.ratio(t,o,e[o]):t}),t},cover:function(t,e){var i=this;return F(t=this.contain(t,e),function(n,o){return t=t[o]<e[o]?i.ratio(t,o,e[o]):t}),t}};function X(t,e,i){if(C(e))for(var n in e)X(t,n,e[n]);else{if(A(i))return(t=D(t))&&t.getAttribute(e);H(t).forEach(function(t){y(i)&&(i=i.call(t,X(t,e))),null===i?G(t,e):t.setAttribute(e,i)})}}function J(t,e){return H(t).some(function(t){return t.hasAttribute(e)})}function G(t,e){t=H(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.removeAttribute(e)})})}function Q(t,e,i,n){X(t,e,function(t){return t?t.replace(i,n):t})}function K(t,e){for(var i=0,n=[e,"data-"+e];i<n.length;i++)if(J(t,n[i]))return X(t,n[i])}function tt(t,e){return D(t)||it(t,at(t)?e:document)}function et(t,e){var i=H(t);return i.length&&i||nt(t,at(t)?e:document)}function it(t,e){return D(ot(t,e,"querySelector"))}function nt(t,e){return H(ot(t,e,"querySelectorAll"))}function ot(t,e,i){if(void 0===e&&(e=document),!t||!T(t))return null;var n;at(t=t.replace(st,"$1 *"))&&(n=[],t=t.split(",").map(function(t,i){var o=e;if("!"===(t=t.trim())[0]){var r=t.substr(1).trim().split(" ");o=dt(e.parentNode,r[0]),t=r.slice(1).join(" ")}return o?(o.id||(o.id="uk-"+Date.now()+i,n.push(function(){return G(o,"id")})),"#"+pt(o.id)+" "+t):null}).filter(Boolean).join(","),e=document);try{return e[i](t)}catch(t){return null}finally{n&&n.forEach(function(t){return t()})}}var rt=/(^|,)\s*[!>+~]/,st=/([!>+~])(?=\s+[!>+~]|\s*$)/g;function at(t){return T(t)&&t.match(rt)}var lt=Element.prototype,ht=lt.matches||lt.webkitMatchesSelector||lt.msMatchesSelector;function ct(t,e){return H(t).some(function(t){return ht.call(t,e)})}var ut=lt.closest||function(t){var e=this;do{if(ct(e,t))return e;e=e.parentNode}while(e&&1===e.nodeType)};function dt(t,e){return d(e,">")&&(e=e.slice(1)),M(t)?t.parentNode&&ut.call(t,e):H(t).map(function(t){return t.parentNode&&ut.call(t,e)}).filter(Boolean)}function ft(t,e){for(var i=[],n=D(t).parentNode;n&&1===n.nodeType;)ct(n,e)&&i.push(n),n=n.parentNode;return i}var gt=window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,function(t){return"\\"+t})};function pt(t){return T(t)?gt.call(null,t):""}var vt={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function mt(t){return H(t).some(function(t){return vt[t.tagName.toLowerCase()]})}function wt(t){return H(t).some(function(t){return t.offsetHeight||t.getBoundingClientRect().height})}var xt="input,select,textarea,button";function yt(t){return H(t).some(function(t){return ct(t,xt)})}function Ct(t,e){return H(t).filter(function(t){return ct(t,e)})}function kt(t,e){return T(e)?ct(t,e)||dt(t,e):t===e||(L(e)?e.documentElement:D(e)).contains(D(t))}function bt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i=It(t),n=i[0],o=i[1],r=i[2],s=i[3],a=i[4];return n=Et(n),r&&(s=function(t,e,i){var n=this;return function(o){var r=o.target,s=">"===e[0]?nt(e,t).reverse().filter(function(t){return kt(r,t)})[0]:dt(r,e);s&&(o.delegate=t,o.current=s,i.call(n,o))}}(n,r,s)),s.length>1&&(s=function(t){return function(e){return x(e.detail)?t.apply(t,[e].concat(e.detail)):t(e)}}(s)),o.split(" ").forEach(function(t){return n&&n.addEventListener(t,s,a)}),function(){return Lt(n,o,s,a)}}function Lt(t,e,i,n){void 0===n&&(n=!1),(t=Et(t))&&e.split(" ").forEach(function(e){return t.removeEventListener(e,i,n)})}function $t(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var i=It(t),n=i[0],o=i[1],r=i[2],s=i[3],a=i[4],l=i[5],h=bt(n,o,r,function(t){var e=!l||l(t);e&&(h(),s(t,e))},a);return h}function Mt(t,e,i){return _t(t).reduce(function(t,n){return t&&n.dispatchEvent(Bt(e,!0,!0,i))},!0)}function Bt(t,e,i,n){if(void 0===e&&(e=!0),void 0===i&&(i=!1),T(t)){var o=document.createEvent("CustomEvent");o.initCustomEvent(t,e,i,n),t=o}return t}function It(t){return T(t[0])&&(t[0]=it(t[0])),y(t[2])&&t.splice(2,0,!1),t}function Tt(t){return"EventTarget"in window?t instanceof EventTarget:t&&"addEventListener"in t}function Et(t){return Tt(t)?t:D(t)}function _t(t){return Tt(t)?[t]:x(t)?t.map(Et).filter(Boolean):H(t)}var At="Promise"in window?window.Promise:Nt,St=2,Ot="setImmediate"in window?e:setTimeout;function Nt(t){this.state=St,this.value=void 0,this.deferred=[];var e=this;try{t(function(t){e.resolve(t)},function(t){e.reject(t)})}catch(t){e.reject(t)}}Nt.reject=function(t){return new Nt(function(e,i){i(t)})},Nt.resolve=function(t){return new Nt(function(e,i){e(t)})},Nt.all=function(t){return new Nt(function(e,i){var n=[],o=0;function r(i){return function(r){n[i]=r,(o+=1)===t.length&&e(n)}}0===t.length&&e(n);for(var s=0;s<t.length;s+=1)Nt.resolve(t[s]).then(r(s),i)})},Nt.race=function(t){return new Nt(function(e,i){for(var n=0;n<t.length;n+=1)Nt.resolve(t[n]).then(e,i)})};var Dt=Nt.prototype;function zt(t,e){return new At(function(i,n){var o=Z({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:R,responseType:""},e);o.beforeSend(o);var r=o.xhr;for(var s in o)if(s in r)try{r[s]=o[s]}catch(t){}for(var a in r.open(o.method.toUpperCase(),t),o.headers)r.setRequestHeader(a,o.headers[a]);bt(r,"load",function(){0===r.status||r.status>=200&&r.status<300||304===r.status?i(r):n(Z(Error(r.statusText),{xhr:r,status:r.status}))}),bt(r,"error",function(){return n(Z(Error("Network Error"),{xhr:r}))}),bt(r,"timeout",function(){return n(Z(Error("Network Timeout"),{xhr:r}))}),r.send(o.data)})}function Ht(){return"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll}function Pt(t){if(Ht())t();else var e=function(){i(),n(),t()},i=bt(document,"DOMContentLoaded",e),n=bt(window,"load",e)}function jt(t,e){return e?H(t).indexOf(D(e)):H((t=D(t))&&t.parentNode.children).indexOf(t)}function Wt(t,e,i,n){void 0===i&&(i=0),void 0===n&&(n=!1);var o=(e=H(e)).length;return t=_(t)?O(t):"next"===t?i+1:"previous"===t?i-1:jt(e,t),n?V(t,0,o-1):(t%=o)<0?t+o:t}function Zt(t){return(t=D(t)).innerHTML="",t}function Ft(t,e){return t=D(t),A(e)?t.innerHTML:Vt(t.hasChildNodes()?Zt(t):t,e)}function Vt(t,e){return t=D(t),Yt(e,function(e){return t.appendChild(e)})}function Rt(t,e){return t=D(t),Yt(e,function(e){return t.parentNode.insertBefore(e,t)})}function qt(t,e){return t=D(t),Yt(e,function(e){return t.nextSibling?Rt(t.nextSibling,e):Vt(t.parentNode,e)})}function Yt(t,e){return(t=T(t)?te(t):t)?"length"in t?H(t).map(e):e(t):null}function Ut(t){H(t).map(function(t){return t.parentNode&&t.parentNode.removeChild(t)})}function Xt(t,e){for(e=D(Rt(t,e));e.firstChild;)e=e.firstChild;return Vt(e,t),e}function Jt(t,e){return H(H(t).map(function(t){return t.hasChildNodes?Xt(H(t.childNodes),e):Vt(t,e)}))}function Gt(t){H(t).map(function(t){return t.parentNode}).filter(function(t,e,i){return i.indexOf(t)===e}).forEach(function(t){Rt(t,t.childNodes),Ut(t)})}Dt.resolve=function(t){var e=this;if(e.state===St){if(t===e)throw new TypeError("Promise settled with itself.");var i=!1;try{var n=t&&t.then;if(null!==t&&C(t)&&y(n))return void n.call(t,function(t){i||e.resolve(t),i=!0},function(t){i||e.reject(t),i=!0})}catch(t){return void(i||e.reject(t))}e.state=0,e.value=t,e.notify()}},Dt.reject=function(t){if(this.state===St){if(t===this)throw new TypeError("Promise settled with itself.");this.state=1,this.value=t,this.notify()}},Dt.notify=function(){var t=this;Ot(function(){if(t.state!==St)for(;t.deferred.length;){var e=t.deferred.shift(),i=e[0],n=e[1],o=e[2],r=e[3];try{0===t.state?y(i)?o(i.call(void 0,t.value)):o(t.value):1===t.state&&(y(n)?o(n.call(void 0,t.value)):r(t.value))}catch(t){r(t)}}})},Dt.then=function(t,e){var i=this;return new Nt(function(n,o){i.deferred.push([t,e,n,o]),i.notify()})},Dt.catch=function(t){return this.then(void 0,t)};var Qt=/^\s*<(\w+|!)[^>]*>/,Kt=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function te(t){var e=Kt.exec(t);if(e)return document.createElement(e[1]);var i=document.createElement("div");return Qt.test(t)?i.insertAdjacentHTML("beforeend",t.trim()):i.textContent=t,i.childNodes.length>1?H(i.childNodes):i.firstChild}function ee(t,e){if(t&&1===t.nodeType)for(e(t),t=t.firstElementChild;t;)ee(t,e),t=t.nextElementSibling}function ie(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];le(t,e,"add")}function ne(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];le(t,e,"remove")}function oe(t,e){Q(t,"class",new RegExp("(^|\\s)"+e+"(?!\\S)","g"),"")}function re(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];e[0]&&ne(t,e[0]),e[1]&&ie(t,e[1])}function se(t,e){return H(t).some(function(t){return t.classList.contains(e)})}function ae(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];if(e.length){var n=T((e=he(e))[e.length-1])?[]:e.pop();e=e.filter(Boolean),H(t).forEach(function(t){for(var i=t.classList,o=0;o<e.length;o++)ue.Force?i.toggle.apply(i,[e[o]].concat(n)):i[(A(n)?!i.contains(e[o]):n)?"add":"remove"](e[o])})}}function le(t,e,i){(e=he(e).filter(Boolean)).length&&H(t).forEach(function(t){var n=t.classList;ue.Multiple?n[i].apply(n,e):e.forEach(function(t){return n[i](t)})})}function he(t){return t.reduce(function(t,e){return t.concat.call(t,T(e)&&w(e," ")?e.trim().split(" "):e)},[])}var ce,ue={};(ce=document.createElement("_").classList)&&(ce.add("a","b"),ce.toggle("c",!1),ue.Multiple=ce.contains("b"),ue.Force=!ce.contains("c")),ce=null;var de={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,widows:!0,"z-index":!0,zoom:!0};function fe(t,e,i){return H(t).map(function(t){if(T(e)){if(e=xe(e),A(i))return pe(t,e);i||0===i?t.style[e]=_(i)&&!de[e]?i+"px":i:t.style.removeProperty(e)}else{if(x(e)){var n=ge(t);return e.reduce(function(t,e){return t[e]=n[xe(e)],t},{})}C(e)&&F(e,function(e,i){return fe(t,i,e)})}return t})[0]}function ge(t,e){return(t=D(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function pe(t,e,i){return ge(t,i)[e]}var ve={};function me(t){if(!(t in ve)){var e=Vt(document.documentElement,document.createElement("div"));ie(e,"var-"+t);try{ve[t]=pe(e,"content",":before").replace(/^["'](.*)["']$/,"$1"),ve[t]=JSON.parse(ve[t])}catch(t){}document.documentElement.removeChild(e)}return ve[t]}var we={};function xe(t){var e=we[t];return e||(e=we[t]=function(t){if((t=r(t))in Ce)return t;for(var e,i=ye.length;i--;)if((e="-"+ye[i]+"-"+t)in Ce)return e}(t)||t),e}var ye=["webkit","moz","ms"],Ce=document.createElement("_").style;function ke(t,e,i,n){return void 0===i&&(i=400),void 0===n&&(n="linear"),At.all(H(t).map(function(t){return new At(function(o,r){for(var s in e){var a=fe(t,s);""===a&&fe(t,s,a)}var l=setTimeout(function(){return Mt(t,"transitionend")},i);$t(t,"transitionend transitioncanceled",function(e){var i=e.type;clearTimeout(l),ne(t,"uk-transition"),fe(t,{"transition-property":"","transition-duration":"","transition-timing-function":""}),"transitioncanceled"===i?r():o()},!1,function(e){var i=e.target;return t===i}),ie(t,"uk-transition"),fe(t,Z({"transition-property":Object.keys(e).map(xe).join(","),"transition-duration":i+"ms","transition-timing-function":n},e))})}))}var be={start:ke,stop:function(t){return Mt(t,"transitionend"),At.resolve()},cancel:function(t){Mt(t,"transitioncanceled")},inProgress:function(t){return se(t,"uk-transition")}},Le="uk-animation-",$e="uk-cancel-animation";function Me(t,e,i,n,o){var r=arguments;return void 0===i&&(i=200),At.all(H(t).map(function(t){return new At(function(s,a){if(se(t,$e))requestAnimationFrame(function(){return At.resolve().then(function(){return Me.apply(void 0,r).then(s,a)})});else{var l=e+" "+Le+(o?"leave":"enter");d(e,Le)&&(n&&(l+=" uk-transform-origin-"+n),o&&(l+=" "+Le+"reverse")),h(),$t(t,"animationend animationcancel",function(e){var i=!1;"animationcancel"===e.type?(a(),h()):(s(),At.resolve().then(function(){i=!0,h()})),requestAnimationFrame(function(){i||(ie(t,$e),requestAnimationFrame(function(){return ne(t,$e)}))})},!1,function(e){var i=e.target;return t===i}),fe(t,"animationDuration",i+"ms"),ie(t,l)}function h(){fe(t,"animationDuration",""),oe(t,Le+"\\S*")}})}))}var Be=new RegExp(Le+"(enter|leave)"),Ie={in:function(t,e,i,n){return Me(t,e,i,n,!1)},out:function(t,e,i,n){return Me(t,e,i,n,!0)},inProgress:function(t){return Be.test(X(t,"class"))},cancel:function(t){Mt(t,"animationcancel")}};function Te(t,e){return T(t)?_e(t)?D(te(t)):it(t,e):D(t)}function Ee(t,e){return T(t)?_e(t)?H(te(t)):nt(t,e):H(t)}function _e(t){return"<"===t[0]||t.match(/^\s*</)}var Ae={width:["x","left","right"],height:["y","top","bottom"]};function Se(t,e,i,n,o,r,s,a){i=Ze(i),n=Ze(n);var l={element:i,target:n};if(!t||!e)return l;var h=Ne(t),c=Ne(e),u=c;return We(u,i,h,-1),We(u,n,c,1),o=Fe(o,h.width,h.height),r=Fe(r,c.width,c.height),o.x+=r.x,o.y+=r.y,u.left+=o.x,u.top+=o.y,a=Ne(a||qe(t)),s&&F(Ae,function(t,e){var r=t[0],d=t[1],f=t[2];if(!0===s||w(s,r)){var g=i[r]===d?-h[e]:i[r]===f?h[e]:0,p=n[r]===d?c[e]:n[r]===f?-c[e]:0;if(u[d]<a[d]||u[d]+h[e]>a[f]){var v=h[e]/2,m="center"===n[r]?-c[e]/2:0;"center"===i[r]&&(x(v,m)||x(-v,-m))||x(g,p)}}function x(t,i){var n=u[d]+t+i-2*o[r];if(n>=a[d]&&n+h[e]<=a[f])return u[d]=n,["element","target"].forEach(function(i){l[i][r]=t?l[i][r]===Ae[e][1]?Ae[e][2]:Ae[e][1]:l[i][r]}),!0}}),Oe(t,u),l}function Oe(t,e){if(t=D(t),!e)return Ne(t);var i=Oe(t),n=fe(t,"position");["left","top"].forEach(function(o){if(o in e){var r=fe(t,o);t.style[o]=e[o]-i[o]+N("absolute"===n&&"auto"===r?De(t)[o]:r)+"px"}})}function Ne(t){var e=qe(t=D(t)),i=e.pageYOffset,n=e.pageXOffset;if(b(t)){var o=t.innerHeight,r=t.innerWidth;return{top:i,left:n,height:o,width:r,bottom:i+o,right:n+r}}var s=!1;wt(t)||(s=t.style.display,t.style.display="block");var a=t.getBoundingClientRect();return!1!==s&&(t.style.display=s),{height:a.height,width:a.width,top:a.top+i,left:a.left+n,bottom:a.bottom+i,right:a.right+n}}function De(t){var e=function(t){for(var e=D(t).offsetParent;e&&"static"===fe(e,"position");)e=e.offsetParent;return e||Ue(t)}(t=D(t)),i=e===Ue(t)?{top:0,left:0}:Oe(e),n=["top","left"].reduce(function(n,o){var r=h(o);return n[o]-=i[o]+(N(fe(t,"margin"+r))||0)+(N(fe(e,"border"+r+"Width"))||0),n},Oe(t));return{top:n.top,left:n.left}}var ze=Pe("height"),He=Pe("width");function Pe(t){var e=h(t);return function(i,n){if(i=D(i),A(n)){if(b(i))return i["inner"+e];if(L(i)){var o=i.documentElement;return Math.max(o["offset"+e],o["scroll"+e])}return(n="auto"===(n=fe(i,t))?i["offset"+e]:N(n)||0)-je(t,i)}fe(i,t,n||0===n?+n+je(t,i)+"px":"")}}function je(t,e){return"border-box"===fe(e,"boxSizing")?Ae[t].slice(1).map(h).reduce(function(t,i){return t+N(fe(e,"padding"+i))+N(fe(e,"border"+i+"Width"))},0):0}function We(t,e,i,n){F(Ae,function(o,r){var s=o[0],a=o[1],l=o[2];e[s]===l?t[a]+=i[r]*n:"center"===e[s]&&(t[a]+=i[r]*n/2)})}function Ze(t){var e=/left|center|right/,i=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat(["center"]):i.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:i.test(t[1])?t[1]:"center"}}function Fe(t,e,i){var n=(t||"").split(" "),o=n[0],r=n[1];return{x:o?N(o)*(g(o,"%")?e/100:1):0,y:r?N(r)*(g(r,"%")?i/100:1):0}}function Ve(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function Re(t,e,i){void 0===e&&(e=0),void 0===i&&(i=0);var n=qe(t=D(t));return wt(t)&&q(t.getBoundingClientRect(),{top:e,left:i,bottom:e+ze(n),right:i+He(n)})}function qe(t){return b(t)?t:Ye(t).defaultView}function Ye(t){return D(t).ownerDocument}function Ue(t){return Ye(t).documentElement}var Xe="rtl"===X(document.documentElement,"dir"),Je="ontouchstart"in window,Ge=window.PointerEvent,Qe=Je||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints,Ke=Qe?"mousedown "+(Je?"touchstart":"pointerdown"):"mousedown",ti=Qe?"mousemove "+(Je?"touchmove":"pointermove"):"mousemove",ei=Qe?"mouseup "+(Je?"touchend":"pointerup"):"mouseup",ii=Qe&&Ge?"pointerenter":"mouseenter",ni=Qe&&Ge?"pointerleave":"mouseleave",oi={reads:[],writes:[],read:function(t){return this.reads.push(t),ri(),t},write:function(t){return this.writes.push(t),ri(),t},clear:function(t){return ai(this.reads,t)||ai(this.writes,t)},flush:function(){si(this.reads),si(this.writes.splice(0,this.writes.length)),this.scheduled=!1,(this.reads.length||this.writes.length)&&ri()}};function ri(){oi.scheduled||(oi.scheduled=!0,requestAnimationFrame(oi.flush.bind(oi)))}function si(t){for(var e;e=t.shift();)e()}function ai(t,e){var i=t.indexOf(e);return!!~i&&!!t.splice(i,1)}function li(){}function hi(t,e){return(e.y-t.y)/(e.x-t.x)}li.prototype={positions:[],position:null,init:function(){var t=this;this.positions=[],this.position=null;var e=!1;this.unbind=bt(document,"mousemove",function(i){e||(setTimeout(function(){var n=Date.now(),o=t.positions.length;o&&n-t.positions[o-1].time>100&&t.positions.splice(0,o),t.positions.push({time:n,x:i.pageX,y:i.pageY}),t.positions.length>5&&t.positions.shift(),e=!1},5),e=!0)})},cancel:function(){this.unbind&&this.unbind()},movesTo:function(t){if(this.positions.length<2)return!1;var e=Oe(t),i=this.positions[this.positions.length-1],n=this.positions[0];if(e.left<=i.x&&i.x<=e.right&&e.top<=i.y&&i.y<=e.bottom)return!1;var o=[[{x:e.left,y:e.top},{x:e.right,y:e.bottom}],[{x:e.right,y:e.top},{x:e.left,y:e.bottom}]];return e.right<=i.x||(e.left>=i.x?(o[0].reverse(),o[1].reverse()):e.bottom<=i.y?o[0].reverse():e.top>=i.y&&o[1].reverse()),!!o.reduce(function(t,e){return t+(hi(n,e[0])<hi(i,e[0])&&hi(n,e[1])>hi(i,e[1]))},0)}};var ci={};ci.args=ci.events=ci.init=ci.created=ci.beforeConnect=ci.connected=ci.ready=ci.beforeDisconnect=ci.disconnected=ci.destroy=function(t,e){return t=t&&!x(t)?[t]:t,e?t?t.concat(e):x(e)?e:[e]:t},ci.update=function(t,e){return ci.args(t,y(e)?{read:e}:e)},ci.props=function(t,e){return x(e)&&(e=e.reduce(function(t,e){return t[e]=String,t},{})),ci.methods(t,e)},ci.computed=ci.defaults=ci.methods=function(t,e){return e?t?Z({},t,e):e:t};var ui=function(t,e){return A(e)?t:e};function di(t,e){var i={};if(e.mixins)for(var o=0,r=e.mixins.length;o<r;o++)t=di(t,e.mixins[o]);for(var s in t)l(s);for(var a in e)n(t,a)||l(a);function l(n){i[n]=(ci[n]||ui)(t[n],e[n])}return i}var fi=0,gi=function(t){this.id=++fi,this.el=D(t)};function pi(t,e){try{t.contentWindow.postMessage(JSON.stringify(Z({event:"command"},e)),"*")}catch(t){}}gi.prototype.isVideo=function(){return this.isYoutube()||this.isVimeo()||this.isHTML5()},gi.prototype.isHTML5=function(){return"VIDEO"===this.el.tagName},gi.prototype.isIFrame=function(){return"IFRAME"===this.el.tagName},gi.prototype.isYoutube=function(){return this.isIFrame()&&!!this.el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)},gi.prototype.isVimeo=function(){return this.isIFrame()&&!!this.el.src.match(/vimeo\.com\/video\/.*/)},gi.prototype.enableApi=function(){var t=this;if(this.ready)return this.ready;var e,i=this.isYoutube(),n=this.isVimeo();return i||n?this.ready=new At(function(o){var r;$t(t.el,"load",function(){if(i){var n=function(){return pi(t.el,{event:"listening",id:t.id})};e=setInterval(n,100),n()}}),(r=function(e){return i&&e.id===t.id&&"onReady"===e.event||n&&Number(e.player_id)===t.id},new At(function(t){$t(window,"message",function(e,i){return t(i)},!1,function(t){var e=t.data;if(e&&T(e)){try{e=JSON.parse(e)}catch(t){return}return e&&r(e)}})})).then(function(){o(),e&&clearInterval(e)}),X(t.el,"src",t.el.src+(w(t.el.src,"?")?"&":"?")+(i?"enablejsapi=1":"api=1&player_id="+t.id))}):At.resolve()},gi.prototype.play=function(){var t=this;if(this.isVideo())if(this.isIFrame())this.enableApi().then(function(){return pi(t.el,{func:"playVideo",method:"play"})});else if(this.isHTML5())try{var e=this.el.play();e&&e.catch(R)}catch(t){}},gi.prototype.pause=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return pi(t.el,{func:"pauseVideo",method:"pause"})}):this.isHTML5()&&this.el.pause())},gi.prototype.mute=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return pi(t.el,{func:"mute",method:"setVolume",value:0})}):this.isHTML5()&&(this.el.muted=!0,X(this.el,"muted","")))};var vi,mi,wi,xi,yi={};function Ci(){vi&&clearTimeout(vi),mi&&clearTimeout(mi),wi&&clearTimeout(wi),vi=mi=wi=null,yi={}}Pt(function(){bt(document,"click",function(){return xi=!0},!0),bt(document,Ke,function(t){var e=t.target,i=Li(t),n=i.x,o=i.y,r=Date.now(),s=$i(t.type);yi.type&&yi.type!==s||(yi.el="tagName"in e?e:e.parentNode,vi&&clearTimeout(vi),yi.x1=n,yi.y1=o,yi.last&&r-yi.last<=250&&(yi={}),yi.type=s,yi.last=r,xi=t.button>0)}),bt(document,ti,function(t){if(!t.defaultPrevented){var e=Li(t),i=e.x,n=e.y;yi.x2=i,yi.y2=n}}),bt(document,ei,function(t){var e=t.type,i=t.target;yi.type===$i(e)&&(yi.x2&&Math.abs(yi.x1-yi.x2)>30||yi.y2&&Math.abs(yi.y1-yi.y2)>30?mi=setTimeout(function(){var t,e,i,n,o;yi.el&&(Mt(yi.el,"swipe"),Mt(yi.el,"swipe"+(e=(t=yi).x1,i=t.x2,n=t.y1,o=t.y2,Math.abs(e-i)>=Math.abs(n-o)?e-i>0?"Left":"Right":n-o>0?"Up":"Down"))),yi={}}):"last"in yi?(wi=setTimeout(function(){return Mt(yi.el,"tap")}),yi.el&&"mouseup"!==e&&kt(i,yi.el)&&(vi=setTimeout(function(){vi=null,yi.el&&!xi&&Mt(yi.el,"click"),yi={}},350))):yi={})}),bt(document,"touchcancel",Ci),bt(window,"scroll",Ci)});var ki=!1;function bi(t){return ki||"touch"===t.pointerType}function Li(t){var e=t.touches,i=t.changedTouches,n=e&&e[0]||i&&i[0]||t;return{x:n.pageX,y:n.pageY}}function $i(t){return t.slice(0,5)}bt(document,"touchstart",function(){return ki=!0},!0),bt(document,"click",function(){ki=!1}),bt(document,"touchcancel",function(){return ki=!1},!0);var Mi=Object.freeze({ajax:zt,getImage:function(t){return new At(function(e,i){var n=new Image;n.onerror=i,n.onload=function(){return e(n)},n.src=t})},transition:ke,Transition:be,animate:Me,Animation:Ie,attr:X,hasAttr:J,removeAttr:G,filterAttr:Q,data:K,addClass:ie,removeClass:ne,removeClasses:oe,replaceClass:re,hasClass:se,toggleClass:ae,$:Te,$$:Ee,positionAt:Se,offset:Oe,position:De,height:ze,width:He,flipPosition:Ve,isInView:Re,scrolledOver:function(t){if(!wt(t))return 0;var e=qe(t=D(t)),i=Ye(t),n=t.offsetHeight,o=function(t){var e=0;do{e+=t.offsetTop}while(t=t.offsetParent);return e}(t),r=ze(e),s=r+Math.min(0,o-r),a=Math.max(0,r-(ze(i)-(o+n)));return V((s+e.pageYOffset-o)/((s+(n-(a<r?a:0)))/100)/100)},isReady:Ht,ready:Pt,index:jt,getIndex:Wt,empty:Zt,html:Ft,prepend:function(t,e){return(t=D(t)).hasChildNodes()?Yt(e,function(e){return t.insertBefore(e,t.firstChild)}):Vt(t,e)},append:Vt,before:Rt,after:qt,remove:Ut,wrapAll:Xt,wrapInner:Jt,unwrap:Gt,fragment:te,apply:ee,isRtl:Xe,hasTouch:Qe,pointerDown:Ke,pointerMove:ti,pointerUp:ei,pointerEnter:ii,pointerLeave:ni,on:bt,off:Lt,once:$t,trigger:Mt,createEvent:Bt,toEventTargets:_t,preventClick:function(){var t=setTimeout($t(document,"click",function(e){e.preventDefault(),e.stopImmediatePropagation(),clearTimeout(t)},!0));Mt(document,"touchcancel")},fastdom:oi,isVoidElement:mt,isVisible:wt,selInput:xt,isInput:yt,filter:Ct,within:kt,bind:t,hasOwn:n,hyphenate:r,camelize:a,ucfirst:h,startsWith:d,endsWith:g,includes:w,isArray:x,isFunction:y,isObject:C,isPlainObject:k,isWindow:b,isDocument:L,isJQuery:$,isNode:M,isNodeCollection:B,isBoolean:I,isString:T,isNumber:E,isNumeric:_,isUndefined:A,toBoolean:S,toNumber:O,toFloat:N,toNode:D,toNodes:H,toList:P,toMs:j,swap:W,assign:Z,each:F,sortBy:function(t,e){return t.sort(function(t,i){return t[e]-i[e]})},clamp:V,noop:R,intersectRect:q,pointInRect:Y,Dimensions:U,MouseTracker:li,mergeOptions:di,Player:gi,Promise:At,Deferred:function(){var t=this;this.promise=new At(function(e,i){t.reject=i,t.resolve=e})},query:tt,queryAll:et,find:it,findAll:nt,matches:ct,closest:dt,parents:ft,escape:pt,css:fe,getStyles:ge,getStyle:pe,getCssVar:me,propName:xe,isTouch:bi,getPos:Li});function Bi(t){return!(!d(t,"uk-")&&!d(t,"data-uk-"))&&a(t.replace("data-uk-","").replace("uk-",""))}var Ii,Ti=function(t){this._init(t)};Ti.util=Mi,Ti.data="__uikit__",Ti.prefix="uk-",Ti.options={},function(t){var e,i=t.data;function n(t,e){if(t)for(var i in t)t[i]._isReady&&t[i]._callUpdate(e)}t.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},t.mixin=function(e,i){i=(T(i)?t.components[i]:i)||this,(e=di({},e)).mixins=i.options.mixins,delete i.options.mixins,i.options=di(e,i.options)},t.extend=function(t){t=t||{};var e=function(t){this._init(t)};return(e.prototype=Object.create(this.prototype)).constructor=e,e.options=di(this.options,t),e.super=this,e.extend=this.extend,e},t.update=function(t,e){for(e=Bt(e||"update"),ee(t=t?D(t):document.body,function(t){return n(t[i],e)});t&&t.parentNode;)n(t.parentNode[i],e),t=t.parentNode},Object.defineProperty(t,"container",{get:function(){return e||document.body},set:function(t){e=Te(t)}})}(Ti),(Ii=Ti).prototype._callHook=function(t){var e=this,i=this.$options[t];i&&i.forEach(function(t){return t.call(e)})},Ii.prototype._callConnected=function(){var t=this;this._connected||(this._data={},this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObserver(),this._callHook("connected"),this._isReady||Pt(function(){return t._callReady()}),this._callUpdate())},Ii.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._observer&&(this._observer.disconnect(),this._observer=null),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1)},Ii.prototype._callReady=function(){this._isReady||(this._isReady=!0,this._callHook("ready"),this._resetComputeds(),this._callUpdate())},Ii.prototype._callUpdate=function(t){var e=this,i=(t=Bt(t||"update")).type;w(["update","load","resize"],i)&&this._resetComputeds();var n=this.$options.update,o=this._frames,r=o.reads,s=o.writes;n&&n.forEach(function(n,o){var a=n.read,l=n.write,h=n.events;("update"===i||w(h,i))&&(a&&!w(oi.reads,r[o])&&(r[o]=oi.read(function(){var i=a.call(e,e._data,t);!1===i&&l?(oi.clear(s[o]),delete s[o]):k(i)&&Z(e._data,i),delete r[o]})),l&&!w(oi.writes,s[o])&&(s[o]=oi.write(function(){l.call(e,e._data,t),delete s[o]})))})},function(e){var i=0;function o(t,e){var i={},n=t.args;void 0===n&&(n=[]);var o=t.props;void 0===o&&(o={});var s=t.el;if(!o)return i;for(var l in o){var h=r(l);if(J(s,h)){var u=c(o[l],X(s,h),s);if("target"===h&&(!u||d(u,"_")))continue;i[l]=u}}var f=function(t,e){var i;void 0===e&&(e=[]);try{return t?d(t,"{")?JSON.parse(t):e.length&&!w(t,":")?((i={})[e[0]]=t,i):t.split(";").reduce(function(t,e){var i=e.split(/:(.+)/),n=i[0],o=i[1];return n&&o&&(t[n.trim()]=o.trim()),t},{}):{}}catch(t){return{}}}(K(s,e),n);for(var g in f){var p=a(g);void 0!==o[p]&&(i[p]=c(o[p],f[g],s))}return i}function s(t,e,i){Object.defineProperty(t,e,{enumerable:!0,get:function(){var o=t._computeds,r=t.$props,s=t.$el;return n(o,e)||(o[e]=i.call(t,r,s)),o[e]},set:function(i){t._computeds[e]=i}})}function l(e,i,n){k(i)||(i={name:n,handler:i});var o,r=i.name,s=i.el,a=i.handler,h=i.capture,c=i.delegate,u=i.filter,d=i.self;s=y(s)?s.call(e):s||e.$el,x(s)?s.forEach(function(t){return l(e,Z({},i,{el:t}),n)}):!s||u&&!u.call(e)||(o=T(a)?e[a]:t(a,e),a=function(t){return x(t.detail)?o.apply(void 0,[t].concat(t.detail)):o(t)},d&&(a=function(t){return function(e){if(e.target===e.currentTarget||e.target===e.current)return t.call(null,e)}}(a)),e._events.push(bt(s,r,c?T(c)?c:c.call(e):null,a,h)))}function h(t,e){return t.every(function(t){return!t||!n(t,e)})}function c(t,e,i){return t===Boolean?S(e):t===Number?O(e):"query"===t?tt(e,i):"list"===t?P(e):"media"===t?function(t){if(T(t))if("@"===t[0]){t=N(me("media-"+t.substr(1)))}else if(isNaN(t))return t;return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(e):t?t(e):e}e.prototype.props={},e.prototype._init=function(t){t=t||{},t=this.$options=di(this.constructor.options,t),this.$el=null,this.$name=e.prefix+r(this.$options.name),this.$props={},this._frames={reads:{},writes:{}},this._events=[],this._uid=i++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},e.prototype._initData=function(){var t=this.$options,e=t.defaults,i=t.data;void 0===i&&(i={});var o=t.args;void 0===o&&(o=[]);var r=t.props;void 0===r&&(r={});var s=t.el;for(var a in o.length&&x(i)&&(i=i.slice(0,o.length).reduce(function(t,e,i){return k(e)?Z(t,e):t[o[i]]=e,t},{})),Z({},e,r))this.$props[a]=this[a]=n(i,a)&&!A(i[a])?c(r[a],i[a],s):e?e[a]&&x(e[a])?e[a].concat():e[a]:null},e.prototype._initMethods=function(){var e=this.$options.methods;if(e)for(var i in e)this[i]=t(e[i],this)},e.prototype._initComputeds=function(){var t=this.$options.computed;if(this._resetComputeds(),t)for(var e in t)s(this,e,t[e])},e.prototype._resetComputeds=function(){this._computeds={}},e.prototype._initProps=function(t){var e;for(e in this._resetComputeds(),t=t||o(this.$options,this.$name))A(t[e])||(this.$props[e]=t[e]);var i=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&h(i,e)&&(this[e]=this.$props[e])},e.prototype._initEvents=function(){var t=this,e=this.$options.events;e&&e.forEach(function(e){if(n(e,"handler"))l(t,e);else for(var i in e)l(t,e[i],i)})},e.prototype._unbindEvents=function(){this._events.forEach(function(t){return t()}),this._events=[]},e.prototype._initObserver=function(){var t=this,e=this.$options,i=e.attrs,n=e.props,s=e.el;!this._observer&&n&&i&&(i=x(i)?i:Object.keys(n).map(function(t){return r(t)}),this._observer=new MutationObserver(function(){var e=o(t.$options,t.$name);i.some(function(i){return!A(e[i])&&e[i]!==t.$props[i]})&&t.$reset(e)}),this._observer.observe(s,{attributes:!0,attributeFilter:i.concat([this.$name,"data-"+this.$name])}))}}(Ti),function(t){var e=t.data;t.prototype.$mount=function(t){var i=this.$options.name;t[e]||(t[e]={}),t[e][i]||(t[e][i]=this,this.$el=this.$options.el=this.$options.el||t,this._initProps(),this._callHook("init"),kt(t,document)&&this._callConnected())},t.prototype.$emit=function(t){this._callUpdate(t)},t.prototype.$reset=function(t){this._callDisconnected(),this._initProps(t),this._callConnected()},t.prototype.$destroy=function(t){void 0===t&&(t=!1);var i=this.$options,n=i.el,o=i.name;n&&this._callDisconnected(),this._callHook("destroy"),n&&n[e]&&(delete n[e][o],Object.keys(n[e]).length||delete n[e],t&&Ut(this.$el))}}(Ti),function(t){var e=t.data;t.components={},t.component=function(e,i){var n=a(e);if(k(i))i.name=n,i=t.extend(i);else{if(A(i))return t.components[n];i.options.name=n}return t.components[n]=i,t[n]=function(e,i){for(var o=arguments.length,r=Array(o);o--;)r[o]=arguments[o];return k(e)?new t.components[n]({data:e}):t.components[n].options.functional?new t.components[n]({data:[].concat(r)}):e&&e.nodeType?s(e):Ee(e).map(s)[0];function s(e){var o=t.getComponent(e,n);return o&&i&&o.$reset(i),o||new t.components[n]({el:e,data:i||{}})}},t._initialized&&!i.options.functional&&oi.read(function(){return t[n]("[uk-"+e+"],[data-uk-"+e+"]")}),t.components[n]},t.getComponents=function(t){return t&&t[e]||{}},t.getComponent=function(e,i){return t.getComponents(e)[i]},t.connect=function(i){if(i[e])for(var n in i[e])i[e][n]._callConnected();for(var o=0;o<i.attributes.length;o++){var r=Bi(i.attributes[o].name);r&&r in t.components&&t[r](i)}},t.disconnect=function(t){for(var i in t[e])t[e][i]._callDisconnected()}}(Ti);var Ei,_i,Ai={init:function(){ie(this.$el,this.$name)}},Si={props:{container:Boolean},defaults:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&Ti.container||e&&Te(e)}}},Oi={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String,queued:Boolean},defaults:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",queued:!1,initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,e,i){var n=this;return new At(function(o){var r,s=function(t){return At.all(t.map(function(t){return n._toggleElement(t,e,i)}))},a=(t=H(t)).filter(function(t){return n.isToggled(t)}),l=t.filter(function(t){return!w(a,t)});if(n.queued&&A(i)&&A(e)&&n.hasAnimation&&!(t.length<2)){var h=document.body,c=h.scrollTop,u=a[0],d=Ie.inProgress(u)&&se(u,"uk-animation-leave")||be.inProgress(u)&&"0px"===u.style.height;r=s(a),d||(r=r.then(function(){var t=s(l);return h.scrollTop=c,t}))}else r=s(l.concat(a));r.then(o,R)})},toggleNow:function(t,e){var i=this;return new At(function(n){return At.all(H(t).map(function(t){return i._toggleElement(t,e,!1)})).then(n,R)})},isToggled:function(t){var e=H(t||this.$el);return this.cls?se(e,this.cls.split(" ")[0]):!J(e,"hidden")},updateAria:function(t){!1===this.cls&&X(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,i){var n=this;if(e=I(e)?e:Ie.inProgress(t)?se(t,"uk-animation-leave"):be.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!Mt(t,"before"+(e?"show":"hide"),[this]))return At.reject();var o=(!1!==i&&this.hasAnimation?this.hasTransition?this._toggleHeight:this._toggleAnimation:this._toggleImmediate)(t,e);return Mt(t,e?"show":"hide",[this]),o.then(function(){Mt(t,e?"shown":"hidden",[n]),Mt(t,"resize")})},_toggle:function(t,e){var i;t&&(this.cls?(i=w(this.cls," ")||Boolean(e)!==se(t,this.cls))&&ae(t,this.cls,w(this.cls," ")?void 0:e):(i=Boolean(e)===J(t,"hidden"))&&X(t,"hidden",e?null:""),Ee("[autofocus]",t).some(function(t){return wt(t)&&(t.focus()||!0)}),this.updateAria(t),i&&Mt(t,"resize"))},_toggleImmediate:function(t,e){return this._toggle(t,e),At.resolve()},_toggleHeight:function(t,e){var i=this,n=be.inProgress(t),o=t.hasChildNodes?N(fe(t.firstElementChild,"marginTop"))+N(fe(t.lastElementChild,"marginBottom")):0,r=wt(t)?ze(t)+(n?0:o):0;be.cancel(t),this.isToggled(t)||this._toggle(t,!0),ze(t,""),oi.flush();var s=ze(t)+(n?0:o);return ze(t,r),(e?be.start(t,Z({},this.initProps,{overflow:"hidden",height:s}),Math.round(this.duration*(1-r/s)),this.transition):be.start(t,this.hideProps,Math.round(this.duration*(r/s)),this.transition).then(function(){return i._toggle(t,!1)})).then(function(){return fe(t,i.initProps)})},_toggleAnimation:function(t,e){var i=this;return Ie.cancel(t),e?(this._toggle(t,!0),Ie.in(t,this.animation[0],this.duration,this.origin)):Ie.out(t,this.animation[1]||this.animation[0],this.duration,this.origin).then(function(){return i._toggle(t,!1)})}}},Ni={mixins:[Ai,Si,Oi],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},defaults:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return Te(t.selPanel,e)},transitionElement:function(){return this.panel},transitionDuration:function(){return j(fe(this.transitionElement,"transitionDuration"))}},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){var e=Ei&&Ei!==this&&Ei;if(Ei=this,e){if(!this.stack)return e.hide().then(this.show),void t.preventDefault();this.prev=e}_i||(_i=[bt(document,"click",function(t){var e=t.target,i=t.defaultPrevented;!Ei||!Ei.bgClose||i||Ei.overlay&&!kt(e,Ei.$el)||Ei.panel&&kt(e,Ei.panel)||Ei.hide()}),bt(document,"keydown",function(t){27===t.keyCode&&Ei&&Ei.escClose&&(t.preventDefault(),Ei.hide())})])}},{name:"beforehide",self:!0,handler:function(){(Ei=Ei&&Ei!==this&&Ei||this.prev)||(_i&&_i.forEach(function(t){return t()}),_i=null)}},{name:"show",self:!0,handler:function(){se(document.documentElement,this.clsPage)||(this.scrollbarWidth=He(window)-He(document),fe(document.body,"overflowY",this.scrollbarWidth&&this.overlay?"scroll":"")),ie(document.documentElement,this.clsPage)}},{name:"hidden",self:!0,handler:function(){for(var t,e=this.prev;e;){if(e.clsPage===this.clsPage){t=!0;break}e=e.prev}t||ne(document.documentElement,this.clsPage),!this.prev&&fe(document.body,"overflowY","")}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){if(!this.isToggled())return this.container&&this.$el.parentNode!==this.container&&(Vt(this.container,this.$el),this._callConnected()),this.toggleNow(this.$el,!0)},hide:function(){if(this.isToggled())return this.toggleNow(this.$el,!1)},getActive:function(){return Ei},_toggleImmediate:function(t,e){var i=this;return new At(function(n){return requestAnimationFrame(function(){i._toggle(t,e),i.transitionDuration?$t(i.transitionElement,"transitionend",n,!1,function(t){return t.target===i.transitionElement}):n()})})}}},Di={props:{pos:String,offset:null,flip:Boolean,clsPos:String},defaults:{pos:"bottom-"+(Xe?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(w(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,i){var n;oe(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?"),fe(t,{top:"",left:""});var o=this.offset;o=_(o)?o:(n=Te(o))?Oe(n)["x"===r?"left":"top"]-Oe(e)["x"===r?"right":"bottom"]:0;var r=this.getAxis(),s=Se(t,e,"x"===r?Ve(this.dir)+" "+this.align:this.align+" "+Ve(this.dir),"x"===r?this.dir+" "+this.align:this.align+" "+this.dir,"x"===r?""+("left"===this.dir?-o:o):" "+("top"===this.dir?-o:o),null,this.flip,i).target,a=s.x,l=s.y;this.dir="x"===r?a:l,this.align="x"===r?l:a,ae(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}};function zi(t){t.component("accordion",{mixins:[Ai,Oi],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String},defaults:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease"},computed:{items:function(t,e){return Ee(t.targets,e)}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(jt(Ee(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],connected:function(){if(!1!==this.active){var t=this.items[Number(this.active)];t&&!se(t,this.clsOpen)&&this.toggle(t,!1)}},update:function(){var t=this;this.items.forEach(function(e){return t._toggleImmediate(Te(t.content,e),se(e,t.clsOpen))});var e=!this.collapsible&&!se(this.items,this.clsOpen)&&this.items[0];e&&this.toggle(e,!1)},methods:{toggle:function(t,e){var i=this,n=Wt(t,this.items),o=Ct(this.items,"."+this.clsOpen);(t=this.items[n])&&[t].concat(!this.multiple&&!w(o,t)&&o||[]).forEach(function(n){var r=n===t,s=r&&!se(n,i.clsOpen);if(s||!r||i.collapsible||!(o.length<2)){ae(n,i.clsOpen,s);var a=n._wrapper?n._wrapper.firstElementChild:Te(i.content,n);n._wrapper||(n._wrapper=Xt(a,"<div>"),X(n._wrapper,"hidden",s?"":null)),i._toggleImmediate(a,!0),i.toggleElement(n._wrapper,s,e).then(function(){se(n,i.clsOpen)===s&&(s||i._toggleImmediate(a,!1),n._wrapper=null,Gt(a))})}})}}})}function Hi(t){t.component("alert",{attrs:!0,mixins:[Ai,Oi],args:"animation",props:{close:String},defaults:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:Z({opacity:0},Oi.defaults.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then(function(){return t.$destroy(!0)})}}})}function Pi(t){Pt(function(){var e=0,i=0;if(bt(window,"load resize",function(e){return t.update(null,e)}),bt(window,"scroll",function(i){i.dir=e<=window.pageYOffset?"down":"up",i.scrollY=e=window.pageYOffset,t.update(null,i)}),bt(document,"animationstart",function(t){var e=t.target;(fe(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(i++,fe(document.body,"overflowX","hidden"),setTimeout(function(){--i||fe(document.body,"overflowX","")},j(fe(e,"animationDuration"))+100))},!0),Qe){var n="uk-hover";bt(document,"tap",function(t){var e=t.target;return Ee("."+n).forEach(function(t){return!kt(e,t)&&ne(t,n)})}),Object.defineProperty(t,"hoverSelector",{set:function(t){bt(document,"tap",t,function(t){return ie(t.current,n)})}}),t.hoverSelector=".uk-animation-toggle, .uk-transition-toggle, [uk-hover]"}})}function ji(t){t.component("cover",{mixins:[Ai,t.components.video.options],props:{width:Number,height:Number},defaults:{automute:!0},update:{write:function(){var t=this.$el;if(wt(t)){var e=t.parentNode,i=e.offsetHeight,n=e.offsetWidth;fe(fe(t,{width:"",height:""}),U.cover({width:this.width||t.clientWidth,height:this.height||t.clientHeight},{width:n+(n%2?1:0),height:i+(i%2?1:0)}))}},events:["load","resize"]},events:{loadedmetadata:function(){this.$emit()}}})}function Wi(t){var e,i;t.component("drop",{mixins:[Di,Oi],args:"pos",props:{mode:"list",toggle:Boolean,boundary:"query",boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},defaults:{mode:["click","hover"],toggle:!0,boundary:window,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,hoverIdle:200,animation:["uk-animation-fade"],cls:"uk-open"},computed:{clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},init:function(){this.tracker=new li,ie(this.$el,this.clsDrop)},connected:function(){var e=this.$props.toggle;this.toggle=e&&t.toggle(T(e)?tt(e,this.$el):this.$el.previousElementSibling,{target:this.$el,mode:this.mode}),this.updateAria(this.$el)},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){if(!t.defaultPrevented){var e=t.target.hash;e||t.preventDefault(),e&&kt(e,this.$el)||this.hide(!1)}}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:ii,filter:function(){return w(this.mode,"hover")},handler:function(t){bi(t)||(e&&e!==this&&e.toggle&&w(e.toggle.mode,"hover")&&!kt(t.target,e.toggle.$el)&&!Y({x:t.pageX,y:t.pageY},Oe(e.$el))&&e.hide(!1),t.preventDefault(),this.show(this.toggle))}},{name:"toggleshow",handler:function(t,e){e&&!w(e.target,this.$el)||(t.preventDefault(),this.show(e||this.toggle))}},{name:"togglehide "+ni,handler:function(t,e){bi(t)||e&&!w(e.target,this.$el)||(t.preventDefault(),this.toggle&&w(this.toggle.mode,"hover")&&this.hide())}},{name:"beforeshow",self:!0,handler:function(){this.clearTimers(),Ie.cancel(this.$el),this.position()}},{name:"show",self:!0,handler:function(){this.tracker.init(),this.toggle&&(ie(this.toggle.$el,this.cls),X(this.toggle.$el,"aria-expanded","true")),i||(i=!0,bt(document,"click",function(t){var i,n=t.target;if(!t.defaultPrevented)for(;e&&e!==i&&!kt(n,e.$el)&&(!e.toggle||!kt(n,e.toggle.$el));)i=e,e.hide(!1)}))}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var i=t.target;this.$el===i?(e=this.isActive()?null:e,this.toggle&&(ne(this.toggle.$el,this.cls),X(this.toggle.$el,"aria-expanded","false"),this.toggle.$el.blur(),Ee("a, button",this.toggle.$el).forEach(function(t){return t.blur()})),this.tracker.cancel()):e=null===e&&kt(i,this.$el)&&this.isToggled()?this:e}}],update:{write:function(){this.isToggled()&&!Ie.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,i){var n=this;void 0===i&&(i=!0);var o=function(){return!n.isToggled()&&n.toggleElement(n.$el,!0)},r=function(){if(n.toggle=t||n.toggle,n.clearTimers(),!n.isActive())if(i&&e&&e!==n&&e.isDelaying)n.showTimer=setTimeout(n.show,10);else{if(n.isParentOf(e)){if(!e.hideTimer)return;e.hide(!1)}else if(e&&!n.isChildOf(e)&&!n.isParentOf(e))for(var r;e&&e!==r&&!n.isChildOf(e);)r=e,e.hide(!1);i&&n.delayShow?n.showTimer=setTimeout(o,n.delayShow):o(),e=n}};t&&this.toggle&&t.$el!==this.toggle.$el?($t(this.$el,"hide",r),this.hide(!1)):r()},hide:function(t){var e=this;void 0===t&&(t=!0);var i=function(){return e.toggleNow(e.$el,!1)};this.clearTimers(),this.isDelaying=this.tracker.movesTo(this.$el),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,this.hoverIdle):t&&this.delayHide?this.hideTimer=setTimeout(i,this.delayHide):i()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return e===this},isChildOf:function(t){return t&&t!==this&&kt(this.$el,t.$el)},isParentOf:function(t){return t&&t!==this&&kt(t.$el,this.$el)},position:function(){oe(this.$el,this.clsDrop+"-(stack|boundary)"),fe(this.$el,{top:"",left:"",display:"block"}),ae(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=Oe(this.boundary),e=this.boundaryAlign?t:Oe(this.toggle.$el);if("justify"===this.align){var i="y"===this.getAxis()?"width":"height";fe(this.$el,i,e[i])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&ie(this.$el,this.clsDrop+"-stack");this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary),fe(this.$el,"display","")}}}),t.drop.getActive=function(){return e}}function Zi(t){t.component("dropdown",t.components.drop.extend({name:"dropdown"}))}function Fi(t){t.component("form-custom",{mixins:[Ai],args:"target",props:{target:Boolean},defaults:{target:!1},computed:{input:function(t,e){return Te(xt,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var i=t.target;return i&&(!0===i&&this.input.parentNode===e&&this.input.nextElementSibling||tt(i,e))}},update:function(){var t,e=this.target,i=this.input;e&&(e[yt(e)?"value":"textContent"]=i.files&&i.files[0]?i.files[0].name:ct(i,"select")&&(t=Ee("option",i).filter(function(t){return t.selected})[0])?t.textContent:i.value)},events:[{name:"focusin focusout mouseenter mouseleave",delegate:xt,handler:function(t){var e=t.type;t.current===this.input&&ae(this.state,"uk-"+(w(e,"focus")?"focus":"hover"),w(["focusin","mouseenter"],e))}},{name:"change",handler:function(){this.$emit()}}]})}function Vi(t){t.component("gif",{update:{read:function(t){var e=Re(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=this.$el.src},events:["scroll","load","resize"]}})}function Ri(t){t.component("grid",t.components.margin.extend({mixins:[Ai],name:"grid",defaults:{margin:"uk-grid-margin",clsStack:"uk-grid-stack"},update:{write:function(t){var e=t.stacks;ae(this.$el,this.clsStack,e)},events:["load","resize"]}}))}function qi(t){t.component("height-match",{args:"target",props:{target:String,row:Boolean},defaults:{target:"> *",row:!0},computed:{elements:function(t,e){return Ee(t.target,e)}},update:{read:function(){var t=this,e=!1;return fe(this.elements,"minHeight",""),{rows:this.row?this.elements.reduce(function(t,i){return e!==i.offsetTop?t.push([i]):t[t.length-1].push(i),e=i.offsetTop,t},[]).map(function(e){return t.match(e)}):[this.match(this.elements)]}},write:function(t){t.rows.forEach(function(t){var e=t.height;return fe(t.elements,"minHeight",e)})},events:["load","resize"]},methods:{match:function(t){if(t.length<2)return{};var e=[],i=0;return t.forEach(function(t){var n,o;wt(t)||(n=X(t,"style"),o=X(t,"hidden"),X(t,{style:(n||"")+";display:block !important;",hidden:null})),i=Math.max(i,t.offsetHeight),e.push(t.offsetHeight),A(n)||X(t,{style:n,hidden:o})}),t=t.filter(function(t,n){return e[n]<i}),{height:i,elements:t}}}})}function Yi(t){function e(t){return t&&t.offsetHeight||0}t.component("height-viewport",{props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},defaults:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{write:function(){fe(this.$el,"boxSizing","border-box");var t,i=ze(window),n=0;if(this.expand){fe(this.$el,{height:"",minHeight:""});var o=i-e(document.documentElement);o>0&&(t=e(this.$el)+o)}else{var r=Oe(this.$el).top;r<i/2&&this.offsetTop&&(n+=r),!0===this.offsetBottom?n+=e(this.$el.nextElementSibling):_(this.offsetBottom)?n+=i/100*this.offsetBottom:this.offsetBottom&&g(this.offsetBottom,"px")?n+=N(this.offsetBottom):T(this.offsetBottom)&&(n+=e(tt(this.offsetBottom,this.$el))),t=n?"calc(100vh - "+n+"px)":"100vh"}if(t){fe(this.$el,{height:"",minHeight:t});var s=this.$el.offsetHeight;this.minHeight&&this.minHeight>s&&fe(this.$el,"minHeight",this.minHeight),i-n>=s&&fe(this.$el,"height",t)}},events:["load","resize"]}})}var Ui,Xi='<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',Ji='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',Gi='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',Qi='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',Ki='<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',tn='<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',en='<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',nn='<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',on='<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',rn='<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',sn='<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',an='<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',ln='<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',hn='<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>',cn='<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',un='<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>';function dn(t){var e={},i={spinner:cn,totop:un,marker:Gi,"close-icon":Xi,"close-large":Ji,"navbar-toggle-icon":Qi,"overlay-icon":Ki,"pagination-next":tn,"pagination-previous":en,"search-icon":nn,"search-large":on,"search-navbar":rn,"slidenav-next":sn,"slidenav-next-large":an,"slidenav-previous":ln,"slidenav-previous-large":hn};function n(e,i){t.component(e,t.components.icon.extend({name:e,mixins:i?[i]:[],defaults:{icon:e}}))}t.component("icon",t.components.svg.extend({attrs:["icon","ratio"],mixins:[Ai],name:"icon",args:"icon",props:["icon"],defaults:{exclude:["id","style","class","src","icon"]},init:function(){ie(this.$el,"uk-icon"),Xe&&(this.icon=W(W(this.icon,"left","right"),"previous","next"))},methods:{getSvg:function(){var t=function(t){return i[t]?(e[t]||(e[t]=Te(i[t].trim())),e[t]):null}(this.icon);return t?At.resolve(t):At.reject("Icon not found.")}}})),["marker","navbar-toggle-icon","overlay-icon","pagination-previous","pagination-next","totop"].forEach(function(t){return n(t)}),["slidenav-previous","slidenav-next"].forEach(function(t){return n(t,{init:function(){ie(this.$el,"uk-slidenav"),se(this.$el,"uk-slidenav-large")&&(this.icon+="-large")}})}),n("search-icon",{init:function(){se(this.$el,"uk-search-icon")&&ft(this.$el,".uk-search-large").length?this.icon="search-large":ft(this.$el,".uk-search-navbar").length&&(this.icon="search-navbar")}}),n("close",{init:function(){this.icon="close-"+(se(this.$el,"uk-close-large")?"large":"icon")}}),n("spinner",{connected:function(){var t=this;this.svg.then(function(e){return 1!==t.ratio&&fe(Te("circle",e),"stroke-width",1/t.ratio)},R)}}),t.icon.add=function(n){Object.keys(n).forEach(function(t){i[t]=n[t],delete e[t]}),t._initialized&&ee(document.body,function(e){var i=t.getComponent(e,"icon");i&&i.$reset()})}}function fn(t){t.component("leader",{mixins:[Ai],props:{fill:String,media:"media"},defaults:{fill:"",media:!1,clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||me("leader-fill")}},connected:function(){var t;t=Jt(this.$el,'<span class="'+this.clsWrapper+'">'),this.wrapper=t[0]},disconnected:function(){Gt(this.wrapper.childNodes)},update:[{read:function(t){var e=t.changed,i=t.width,n=i;return{width:i=Math.floor(this.$el.offsetWidth/2),changed:e||n!==i,hide:this.media&&!window.matchMedia(this.media).matches}},write:function(t){ae(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,X(this.wrapper,this.attrFill,new Array(t.width).join(this.fill)))},events:["load","resize"]}]})}function gn(t){t.component("margin",{props:{margin:String,firstColumn:Boolean},defaults:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(t){var e=this.$el.children;if(!e.length||!wt(this.$el))return t.rows=!1;t.stacks=!0;for(var i=[[]],n=0;n<e.length;n++){var o=e[n],r=o.getBoundingClientRect();if(r.height)for(var s=i.length-1;s>=0;s--){var a=i[s];if(!a[0]){a.push(o);break}var l=a[0].getBoundingClientRect();if(r.top>=Math.floor(l.bottom)){i.push([o]);break}if(Math.floor(r.bottom)>l.top){if(t.stacks=!1,r.left<l.left&&!Xe){a.unshift(o);break}a.push(o);break}if(0===s){i.unshift([o]);break}}}t.rows=i},write:function(t){var e=this;t.rows.forEach(function(t,i){return t.forEach(function(t,n){ae(t,e.margin,0!==i),ae(t,e.firstColumn,0===n)})})},events:["load","resize"]}})}function pn(t){t.component("modal",{mixins:[Ni],defaults:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){se(this.panel,"uk-margin-auto-vertical")?ie(this.$el,"uk-flex"):fe(this.$el,"display","block"),ze(this.$el)}},{name:"hidden",self:!0,handler:function(){fe(this.$el,"display",""),ne(this.$el,"uk-flex")}}]}),t.component("overflow-auto",{mixins:[Ai],computed:{modal:function(t,e){return dt(e,".uk-modal")},panel:function(t,e){return dt(e,".uk-modal-dialog")}},connected:function(){fe(this.$el,"minHeight",150)},update:{write:function(){if(this.panel&&this.modal){var t=fe(this.$el,"maxHeight");fe(fe(this.$el,"maxHeight",150),"maxHeight",Math.max(150,150+ze(this.modal)-this.panel.offsetHeight)),t!==fe(this.$el,"maxHeight")&&Mt(this.$el,"resize")}},events:["load","resize"]}}),t.modal.dialog=function(e,i){var n=t.modal(' <div class="uk-modal"> <div class="uk-modal-dialog">'+e+"</div> </div> ",i);return n.show(),bt(n.$el,"hidden",function(t){t.target===t.currentTarget&&n.$destroy(!0)}),n},t.modal.alert=function(e,i){return i=Z({bgClose:!1,escClose:!1,labels:t.modal.labels},i),new At(function(n){return bt(t.modal.dialog(' <div class="uk-modal-body">'+(T(e)?e:Ft(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+i.labels.ok+"</button> </div> ",i).$el,"hide",n)})},t.modal.confirm=function(e,i){return i=Z({bgClose:!1,escClose:!0,labels:t.modal.labels},i),new At(function(n,o){var r=t.modal.dialog(' <form> <div class="uk-modal-body">'+(T(e)?e:Ft(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+i.labels.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+i.labels.ok+"</button> </div> </form> ",i),s=!1;bt(r.$el,"submit","form",function(t){t.preventDefault(),n(),s=!0,r.hide()}),bt(r.$el,"hide",function(){s||o()})})},t.modal.prompt=function(e,i,n){return n=Z({bgClose:!1,escClose:!0,labels:t.modal.labels},n),new At(function(o){var r=t.modal.dialog(' <form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(T(e)?e:Ft(e))+'</label> <input class="uk-input" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+n.labels.cancel+'</button> <button class="uk-button uk-button-primary">'+n.labels.ok+"</button> </div> </form> ",n),s=Te("input",r.$el);s.value=i;var a=!1;bt(r.$el,"submit","form",function(t){t.preventDefault(),o(s.value),a=!0,r.hide()}),bt(r.$el,"hide",function(){a||o(null)})})},t.modal.labels={ok:"Ok",cancel:"Cancel"}}function vn(t){t.component("nav",t.components.accordion.extend({name:"nav",defaults:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}}))}function mn(t){t.component("navbar",{mixins:[Ai],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:"query",duration:Number},defaults:{dropdown:".uk-navbar-nav > li",align:Xe?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200},computed:{boundary:function(t,e){var i=t.boundary,n=t.boundaryAlign;return!0===i||n?e:i},pos:function(t){return"bottom-"+t.align}},beforeConnect:function(){var t=this.$props.dropbar;this.dropbar=t&&(T(t)&&tt(t,this.$el)||Te("<div></div>")),this.dropbar&&(ie(this.dropbar,"uk-navbar-dropbar"),"slide"===this.dropbarMode&&ie(this.dropbar,"uk-navbar-dropbar-slide"))},disconnected:function(){this.dropbar&&Ut(this.dropbar)},update:function(){t.drop(Ee(this.dropdown+" ."+this.clsDrop,this.$el).filter(function(e){return!t.getComponent(e,"drop")&&!t.getComponent(e,"dropdown")}),Z({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,i=this.getActive();i&&i.toggle&&!kt(i.toggle.$el,e)&&!i.tracker.movesTo(i.$el)&&i.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!ct(this.dropbar,":hover")&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){this.dropbar.parentNode||qt(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",capture:!0,filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=e.dir;this.clsDrop&&ie(i,this.clsDrop+"-dropbar"),"bottom"===n&&this.transitionTo(i.offsetHeight+N(fe(i,"marginTop"))+N(fe(i,"marginBottom")),i)}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=this.getActive();ct(this.dropbar,":hover")&&n&&n.$el===i&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var i=e.$el,n=this.getActive();(!n||n&&n.$el===i)&&this.transitionTo(0)}}],methods:{getActive:function(){var e=t.drop.getActive();return e&&w(e.mode,"hover")&&kt(e.toggle.$el,this.$el)&&e},transitionTo:function(t,e){var i=this.dropbar,n=wt(i)?ze(i):0;return fe(e=n<t&&e,{height:n,overflow:"hidden"}),ze(i,n),be.cancel([e,i]),be.start([e,i],{height:t},this.duration).catch(R).then(function(){return fe(e,{height:"",overflow:""})})}}})}function wn(t){t.component("offcanvas",{mixins:[Ni],args:"mode",props:{content:String,mode:String,flip:Boolean,overlay:Boolean},defaults:{content:".uk-offcanvas-content",mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContent:"uk-offcanvas-content",clsContentAnimation:"uk-offcanvas-content-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close"},computed:{content:function(t){return Te(t.content)||document.body},clsFlip:function(t){var e=t.flip,i=t.clsFlip;return e?i:""},clsOverlay:function(t){var e=t.overlay,i=t.clsOverlay;return e?i:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,i=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":i},clsContentAnimation:function(t){var e=t.mode,i=t.clsContentAnimation;return"push"!==e&&"reveal"!==e?"":i},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},update:{write:function(){this.getActive()===this&&((this.overlay||this.clsContentAnimation)&&He(this.content,He(window)-this.scrollbarWidth),this.overlay&&(ze(this.content,ze(window)),Ui&&(this.content.scrollTop=Ui.y)))},events:["resize"]},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current;e.hash&&Te(e.hash,this.content)&&(Ui=null,this.hide())}},{name:"beforescroll",filter:function(){return this.overlay},handler:function(t,e,i){e&&i&&this.isToggled()&&Te(i,this.content)&&($t(this.$el,"hidden",function(){return e.scrollTo(i)}),t.preventDefault())}},{name:"show",self:!0,handler:function(){Ui=Ui||{x:window.pageXOffset,y:window.pageYOffset},"reveal"!==this.mode||se(this.panel,this.clsMode)||(Xt(this.panel,"<div>"),ie(this.panel.parentNode,this.clsMode)),fe(document.documentElement,"overflowY",(!this.clsContentAnimation||this.flip)&&this.scrollbarWidth&&this.overlay?"scroll":""),ie(document.body,this.clsContainer,this.clsFlip,this.clsOverlay),ze(document.body),ie(this.content,this.clsContentAnimation),ie(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),ie(this.$el,this.clsOverlay),fe(this.$el,"display","block"),ze(this.$el)}},{name:"hide",self:!0,handler:function(){ne(this.content,this.clsContentAnimation);var t=this.getActive();("none"===this.mode||t&&t!==this&&t!==this.prev)&&Mt(this.panel,"transitionend")}},{name:"hidden",self:!0,handler:function(){if("reveal"===this.mode&&Gt(this.panel),this.overlay){if(!Ui){var t=this.content,e=t.scrollLeft,i=t.scrollTop;Ui={x:e,y:i}}}else Ui={x:window.pageXOffset,y:window.pageYOffset};ne(this.panel,this.clsSidebarAnimation,this.clsMode),ne(this.$el,this.clsOverlay),fe(this.$el,"display",""),ne(document.body,this.clsContainer,this.clsFlip,this.clsOverlay),document.body.scrollTop=Ui.y,fe(document.documentElement,"overflowY",""),He(this.content,""),ze(this.content,""),window.scrollTo(Ui.x,Ui.y),Ui=null}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&bi(t)&&("swipeLeft"===t.type&&!this.flip||"swipeRight"===t.type&&this.flip)&&this.hide()}}]})}function xn(t){t.component("responsive",{props:["width","height"],init:function(){ie(this.$el,"uk-responsive-width")},update:{read:function(){return!!(wt(this.$el)&&this.width&&this.height)&&{width:He(this.$el.parentNode),height:this.height}},write:function(t){ze(this.$el,U.contain({height:this.height,width:this.width},t).height)},events:["load","resize"]}})}function yn(t){t.component("scroll",{props:{duration:Number,offset:Number},defaults:{duration:1e3,offset:0},methods:{scrollTo:function(t){var e=this;t=t&&Te(t)||document.body;var i=ze(document),n=ze(window),o=Oe(t).top-this.offset;if(o+n>i&&(o=i-n),Mt(this.$el,"beforescroll",[this,t])){var r=Date.now(),s=window.pageYOffset,a=function(){var i,n=s+(o-s)*(i=V((Date.now()-r)/e.duration),.5*(1-Math.cos(Math.PI*i)));window.scrollTo(window.pageXOffset,n),n!==o?requestAnimationFrame(a):Mt(e.$el,"scrolled",[e,t])};a()}}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(pt(this.$el.hash).substr(1)))}}})}function Cn(t){t.component("scrollspy",{args:"cls",props:{cls:"list",target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},defaults:{cls:[],target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"},computed:{elements:function(t,e){var i=t.target;return i?Ee(i,e):[e]}},update:[{write:function(){this.hidden&&fe(Ct(this.elements,":not(."+this.inViewClass+")"),"visibility","hidden")}},{read:function(e){var i=this;if(!t._initialized)return"complete"===document.readyState&&requestAnimationFrame(function(){return i.$emit()}),!1;this.elements.forEach(function(t,n){var o=e[n];if(!o||o.el!==t){var r=K(t,"uk-scrollspy-class");o={el:t,toggles:r&&r.split(",")||i.cls}}o.show=Re(t,i.offsetTop,i.offsetLeft),e[n]=o})},write:function(e){var i=this,n=1===this.elements.length?1:0;this.elements.forEach(function(o,r){var s=e[r],a=s.toggles[r]||s.toggles[0];if(!s.show||s.inview||s.timer)!s.show&&s.inview&&i.repeat&&(s.timer&&(clearTimeout(s.timer),delete s.timer),fe(o,"visibility",i.hidden?"hidden":""),ne(o,i.inViewClass),ae(o,a),Mt(o,"outview"),t.update(o),s.inview=!1);else{var l=function(){fe(o,"visibility",""),ie(o,i.inViewClass),ae(o,a),Mt(o,"inview"),t.update(o),s.inview=!0,delete s.timer};i.delay&&n?s.timer=setTimeout(l,i.delay*n):l(),n++}})},events:["scroll","load","resize"]}]})}function kn(t){t.component("scrollspy-nav",{props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},defaults:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:function(t,e){return Ee('a[href^="#"]',e).filter(function(t){return t.hash})},elements:function(){return this.closest?dt(this.links,this.closest):this.links},targets:function(){return Ee(this.links.map(function(t){return t.hash}).join(","))}},update:[{read:function(){this.scroll&&t.scroll(this.links,{offset:this.offset||0})}},{read:function(t){var e=this,i=window.pageYOffset+this.offset+1,n=ze(document)-ze(window)+this.offset;t.active=!1,this.targets.every(function(o,r){var s=Oe(o).top,a=r+1===e.targets.length;if(!e.overflow&&(0===r&&s>i||a&&s+o.offsetTop<i))return!1;if(!a&&Oe(e.targets[r+1]).top<=i)return!0;if(i>=n)for(var l=e.targets.length-1;l>r;l--)if(Re(e.targets[l])){o=e.targets[l];break}return!(t.active=Te(Ct(e.links,'[href="#'+o.id+'"]')))})},write:function(t){var e=t.active;this.links.forEach(function(t){return t.blur()}),ne(this.elements,this.cls),e&&Mt(this.$el,"active",[e,ie(this.closest?dt(e,this.closest):e,this.cls)])},events:["scroll","load","resize"]}]})}function bn(t){function e(t,e){var i=e.$props,n=e.$el,o=e[t+"Offset"],r=i[t];if(r){if(_(r))return o+N(r);if(T(r)&&r.match(/^-?\d+vh$/))return ze(window)*N(r)/100;var s=!0===r?n.parentNode:tt(r,n);return s?Oe(s).top+s.offsetHeight:void 0}}t.component("sticky",{mixins:[Ai],attrs:!0,props:{top:null,bottom:Boolean,offset:Number,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:"query",showOnUp:Boolean,media:"media",target:Number},defaults:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,media:!1,target:!1},computed:{selTarget:function(t,e){var i=t.selTarget;return i&&Te(i,e)||e}},connected:function(){this.placeholder=Te('<div class="uk-sticky-placeholder"></div>'),this.widthElement=this.$props.widthElement||this.placeholder,this.isActive||this.hide()},disconnected:function(){this.isActive&&(this.isActive=!1,this.hide(),ne(this.selTarget,this.clsInactive)),Ut(this.placeholder),this.placeholder=null,this.widthElement=null},ready:function(){var t=this;if(this.target&&location.hash&&window.pageYOffset>0){var e=Te(location.hash);e&&oi.read(function(){var i=Oe(e).top,n=Oe(t.$el).top,o=t.$el.offsetHeight;n+o>=i&&n<=i+e.offsetHeight&&window.scrollTo(0,i-o-t.target-t.offset)})}},events:[{name:"active",self:!0,handler:function(){re(this.selTarget,this.clsInactive,this.clsActive)}},{name:"inactive",self:!0,handler:function(){re(this.selTarget,this.clsActive,this.clsInactive)}}],update:[{write:function(){var t=this.placeholder,i=(this.isActive?t:this.$el).offsetHeight;fe(t,Z({height:"absolute"!==fe(this.$el,"position")?i:""},fe(this.$el,["marginTop","marginBottom","marginLeft","marginRight"]))),kt(t,document)||(qt(this.$el,t),X(t,"hidden","")),X(this.widthElement,"hidden",null),this.width=this.widthElement.offsetWidth,X(this.widthElement,"hidden",this.isActive?null:""),this.topOffset=Oe(this.isActive?t:this.$el).top,this.bottomOffset=this.topOffset+i;var n=e("bottom",this);this.top=Math.max(N(e("top",this)),this.topOffset)-this.offset,this.bottom=n&&n-i,this.inactive=this.media&&!window.matchMedia(this.media).matches,this.isActive&&this.update()},events:["load","resize"]},{read:function(t,e){var i=e.scrollY;return void 0===i&&(i=window.pageYOffset),{scroll:this.scroll=i,visible:wt(this.$el)}},write:function(t,e){var i=this,n=t.visible,o=t.scroll;void 0===e&&(e={});var r=e.dir;if(!(o<0||!n||this.disabled||this.showOnUp&&!r))if(this.inactive||o<this.top||this.showOnUp&&(o<=this.top||"down"===r||"up"===r&&!this.isActive&&o<=this.bottomOffset)){if(!this.isActive)return;this.isActive=!1,this.animation&&o>this.topOffset?(Ie.cancel(this.$el),Ie.out(this.$el,this.animation).then(function(){return i.hide()},R)):this.hide()}else this.isActive?this.update():this.animation?(Ie.cancel(this.$el),this.show(),Ie.in(this.$el,this.animation).catch(R)):this.show()},events:["scroll"]}],methods:{show:function(){this.isActive=!0,this.update(),X(this.placeholder,"hidden",null)},hide:function(){this.isActive&&!se(this.selTarget,this.clsActive)||Mt(this.$el,"inactive"),ne(this.$el,this.clsFixed,this.clsBelow),fe(this.$el,{position:"",top:"",width:""}),X(this.placeholder,"hidden","")},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);this.bottom&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),fe(this.$el,{position:"fixed",top:e+"px",width:this.width}),se(this.selTarget,this.clsActive)?t||Mt(this.$el,"inactive"):t&&Mt(this.$el,"active"),ae(this.$el,this.clsBelow,this.scroll>this.bottomOffset),ie(this.$el,this.clsFixed)}}})}var Ln={};function $n(t){t.component("svg",{attrs:!0,props:{id:String,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String},defaults:{ratio:1,id:!1,exclude:["src"],class:""},init:function(){this.class+=" uk-svg"},connected:function(){var t=this;if(!this.icon&&w(this.src,"#")){var n,o=this.src.split("#");o.length>1&&(n=o,this.src=n[0],this.icon=n[1])}this.svg=this.getSvg().then(function(n){var o;if(T(n)?(t.icon&&w(n,"<symbol")&&(n=function(t,n){var o;if(!i[t])for(i[t]={};o=e.exec(t);)i[t][o[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+o[1]+"svg>";return i[t][n]}(n,t.icon)||n),o=Te(n.substr(n.indexOf("<svg")))):o=n.cloneNode(!0),!o)return At.reject("SVG not found.");var r=X(o,"viewBox");for(var s in r&&(r=r.split(" "),t.width=t.$props.width||r[2],t.height=t.$props.height||r[3]),t.width*=t.ratio,t.height*=t.ratio,t.$options.props)t[s]&&!w(t.exclude,s)&&X(o,s,t[s]);t.id||G(o,"id"),t.width&&!t.height&&G(o,"height"),t.height&&!t.width&&G(o,"width");var a=t.$el;if(mt(a)||"CANVAS"===a.tagName){X(a,{hidden:!0,id:null});var l=a.nextElementSibling;l&&o.isEqualNode(l)?o=l:qt(a,o)}else{var h=a.lastElementChild;h&&o.isEqualNode(h)?o=h:Vt(a,o)}return t.svgEl=o,o},R)},disconnected:function(){var t=this;mt(this.$el)&&X(this.$el,{hidden:null,id:this.id||null}),this.svg&&this.svg.then(function(e){return(!t._connected||e!==t.svgEl)&&Ut(e)},R),this.svg=this.svgEl=null},methods:{getSvg:function(){var t=this;return this.src?Ln[this.src]?Ln[this.src]:(Ln[this.src]=new At(function(e,i){d(t.src,"data:")?e(decodeURIComponent(t.src.split(",")[1])):zt(t.src).then(function(t){return e(t.response)},function(){return i("SVG not found.")})}),Ln[this.src]):At.reject()}}});var e=/<symbol(.*?id=(['"])(.*?)\2[^]*?<\/)symbol>/g,i={}}function Mn(t){t.component("switcher",{mixins:[Oi],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},defaults:{connect:"~.uk-switcher",toggle:"> *",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item",queued:!0},computed:{connects:function(t,e){return et(t.connect,e)},toggles:function(t,e){return Ee(t.toggle,e)}},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(t.current)}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(K(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){bi(t)&&(t.preventDefault(),window.getSelection().toString()||this.show("swipeLeft"===t.type?"next":"previous"))}}],update:function(){var t=this;this.connects.forEach(function(e){return t.updateAria(e.children)}),this.show(Ct(this.toggles,"."+this.cls)[0]||this.toggles[this.active]||this.toggles[0])},methods:{show:function(t){for(var e,i=this,n=this.toggles.length,o=!!this.connects.length&&jt(Ct(this.connects[0].children,"."+this.cls)[0]),r=o>=0,s="previous"===t?-1:1,a=Wt(t,this.toggles,o),l=0;l<n;l++,a=(a+s+n)%n)if(!ct(i.toggles[a],".uk-disabled, [disabled]")){e=i.toggles[a];break}!e||o>=0&&se(e,this.cls)||o===a||(ne(this.toggles,this.cls),X(this.toggles,"aria-expanded",!1),ie(e,this.cls),X(e,"aria-expanded",!0),this.connects.forEach(function(t){r?i.toggleElement([t.children[o],t.children[a]]):i.toggleNow(t.children[a])}))}}})}function Bn(t){t.component("tab",t.components.switcher.extend({mixins:[Ai],name:"tab",props:{media:"media"},defaults:{media:960,attrItem:"uk-tab-item"},init:function(){var e=se(this.$el,"uk-tab-left")?"uk-tab-left":!!se(this.$el,"uk-tab-right")&&"uk-tab-right";e&&t.toggle(this.$el,{cls:e,mode:"media",media:this.media})}}))}function In(t){t.component("toggle",{mixins:[t.mixin.togglable],args:"target",props:{href:String,target:null,mode:"list",media:"media"},defaults:{href:!1,target:!1,mode:"click",queued:!0,media:!1},computed:{target:function(t,e){var i=t.href,n=t.target;return(n=et(n||i,e)).length&&n||[e]}},events:[{name:ii+" "+ni,filter:function(){return w(this.mode,"hover")},handler:function(t){bi(t)||this.toggle("toggle"+(t.type===ii?"show":"hide"))}},{name:"click",filter:function(){return w(this.mode,"click")||Qe},handler:function(t){var e;(bi(t)||w(this.mode,"click"))&&((dt(t.target,'a[href="#"], button')||(e=dt(t.target,"a[href]"))&&(this.cls||!wt(this.target)||e.hash&&ct(this.target,e.hash)))&&$t(document,"click",function(t){return t.preventDefault()}),this.toggle())}}],update:{write:function(){if(w(this.mode,"media")&&this.media){var t=this.isToggled(this.target);(window.matchMedia(this.media).matches?!t:t)&&this.toggle()}},events:["load","resize"]},methods:{toggle:function(t){Mt(this.target,t||"toggle",[this])&&this.toggleElement(this.target)}}})}function Tn(t){t.component("video",{args:"autoplay",props:{automute:Boolean,autoplay:Boolean},defaults:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!J(this.$el,"preload")&&(this.$el.preload="none")},ready:function(){this.player=new gi(this.$el),this.automute&&this.player.mute()},update:[{read:function(t,e){var i=e.type;return!(!this.player||!("scroll"!==i&&"resize"!==i||this.inView))&&{visible:wt(this.$el)&&"hidden"!==fe(this.$el,"visibility"),inView:this.inView&&Re(this.$el)}},write:function(t){var e=t.visible,i=t.inView;!e||this.inView&&!i?this.player.pause():(!0===this.autoplay||this.inView&&i)&&this.player.play()},events:["load","resize","scroll"]}]})}function En(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),"translateX("+t+(t?e:"")+")"}function _n(t){return"scale3d("+t+", "+t+", 1)"}function An(t){if(!An.installed){var e=t.util,i=e.$,n=e.assign,o=e.clamp,r=e.fastdom,s=e.getIndex,a=e.hasClass,l=e.isNumber,h=e.isRtl,c=e.Promise,u=e.toNodes,d=e.trigger;t.mixin.slider={attrs:!0,mixins:[function(t){var e=t.util.pointerDown;return{props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},defaults:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.startAutoplay()},disconnected:function(){this.stopAutoplay()},events:[{name:"visibilitychange",el:document,handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}},{name:e,handler:"stopAutoplay"},{name:"mouseenter",filter:function(){return this.autoplay},handler:function(){this.isHovering=!0}},{name:"mouseleave",filter:function(){return this.autoplay},handler:function(){this.isHovering=!1}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.autoplay&&(this.interval=setInterval(function(){return!(t.isHovering&&t.pauseOnHover)&&!t.stack.length&&t.show("next")},this.autoplayInterval))},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}}}(t),function(t){var e=t.util,i=e.getPos,n=e.includes,o=e.isRtl,r=e.isTouch,s=e.off,a=e.on,l=e.pointerDown,h=e.pointerMove,c=e.pointerUp,u=e.preventClick,d=e.trigger;return{defaults:{threshold:10,preventCatch:!1},init:function(){var t=this;["start","move","end"].forEach(function(e){var n=t[e];t[e]=function(e){var r=i(e).x*(o?-1:1);t.prevPos=r!==t.pos?t.pos:t.prevPos,t.pos=r,n(e)}})},events:[{name:l,delegate:function(){return this.slidesSelector},handler:function(t){var e;!r(t)&&!(e=t.target).children.length&&e.childNodes.length||t.button>0||this.length<2||this.preventCatch||this.start(t)}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.translate(this.percent),this._transitioner.cancel(),this.dragging=!0,this.stack=[]):this.prevIndex=this.index,this.unbindMove=a(document,h,this.move,{capture:!0,passive:!1}),a(window,"scroll",this.unbindMove),a(document,c,this.end,!0)},move:function(t){var e=this,i=this.pos-this.drag;if(!(0===i||this.prevPos===this.pos||!this.dragging&&Math.abs(i)<this.threshold)){t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=i<0?1:-1;for(var o=this.slides,r=this.prevIndex,s=Math.abs(i),a=this.getIndex(r+this.dir,r),l=this._getDistance(r,a)||o[r].offsetWidth;a!==r&&s>l;)e.drag-=l*e.dir,r=a,s-=l,a=e.getIndex(r+e.dir,r),l=e._getDistance(r,a)||o[r].offsetWidth;this.percent=s/l;var h,c=o[r],u=o[a],f=this.index!==a,g=r===a;[this.index,this.prevIndex].filter(function(t){return!n([a,r],t)}).forEach(function(t){d(o[t],"itemhidden",[e]),g&&(h=!0,e.prevIndex=r)}),(this.index===r&&this.prevIndex!==r||h)&&d(o[this.index],"itemshown",[this]),f&&(this.prevIndex=r,this.index=a,!g&&d(c,"beforeitemhide",[this]),d(u,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),c,!g&&u),f&&(!g&&d(c,"itemhide",[this]),d(u,"itemshow",[this]))}},end:function(){if(s(window,"scroll",this.unbindMove),this.unbindMove(),s(document,c,this.end,!0),this.dragging){if(this.dragging=null,this.index===this.prevIndex)this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null;else{var t=(o?this.dir*(o?1:-1):this.dir)<0==this.prevPos>this.pos;this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(this.dir>0&&!t||this.dir<0&&t?"next":"previous",!0)}u()}this.drag=this.percent=null}}}}(t),function(t){var e=t.util,i=e.$,n=e.$$,o=e.data,r=e.html,s=e.toggleClass,a=e.toNumber;return{defaults:{selNav:!1},computed:{nav:function(t,e){var n=t.selNav;return i(n,e)},navItemSelector:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return n(this.navItemSelector,e)}},update:[{write:function(){var t=this;this.nav&&this.length!==this.nav.children.length&&r(this.nav,this.slides.map(function(e,i){return"<li "+t.attrItem+'="'+i+'"><a href="#"></a></li>'}).join("")),s(n(this.navItemSelector,this.$el).concat(this.nav),"uk-hidden",!this.maxIndex),this.updateNav()},events:["load","resize"]}],events:[{name:"click",delegate:function(){return this.navItemSelector},handler:function(t){t.preventDefault(),t.current.blur(),this.show(o(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var t=this,e=this.getValidIndex();this.navItems.forEach(function(i){var n=o(i,t.attrItem);s(i,t.clsActive,a(n)===e),s(i,"uk-invisible",t.finite&&("previous"===n&&0===e||"next"===n&&e>=t.maxIndex))})}}}}(t)],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number},defaults:{easing:"ease",finite:!1,velocity:1,index:0,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}},computed:{duration:function(t,e){var i=t.velocity;return Sn(e.offsetWidth/i)},length:function(){return this.slides.length},list:function(t,e){var n=t.selList;return i(n,e)},maxIndex:function(){return this.length-1},slidesSelector:function(t){return t.selList+" > *"},slides:function(){return u(this.list.children)}},methods:{show:function(t,e){var i=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var n=this.stack,o=e?0:n.length,s=function(){n.splice(o,1),n.length&&i.show(n.shift(),!0)};if(n[e?"unshift":"push"](t),!e&&n.length>1)2===n.length&&this._transitioner.forward(Math.min(this.duration,200));else{var l=this.index,h=a(this.slides,this.clsActive)&&this.slides[l],u=this.getIndex(t,this.index),f=this.slides[u];if(h!==f){if(this.dir=function(t,e){return"next"===t?1:"previous"===t?-1:t<l?-1:1}(t),this.prevIndex=l,this.index=u,h&&d(h,"beforeitemhide",[this]),!d(f,"beforeitemshow",[this,h]))return this.index=this.prevIndex,void s();var g=this._show(h,f,e).then(function(){return h&&d(h,"itemhidden",[i]),d(f,"itemshown",[i]),new c(function(t){r.write(function(){n.shift(),n.length?i.show(n.shift(),!0):i._transitioner=null,t()})})});return h&&d(h,"itemhide",[this]),d(f,"itemshow",[this]),g}s()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),o(s(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,i){if(this._transitioner=this._getTransitioner(t,e,this.dir,n({easing:i?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!i&&!t)return this._transitioner.translate(1),c.resolve();var o=this.stack.length;return this._transitioner[o>1?"forward":"show"](o>1?Math.min(this.duration,75+75/(o-1)):this.duration,this.percent)},_getDistance:function(t,e){return new this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,i){void 0===e&&(e=this.prevIndex),void 0===i&&(i=this.index);var n=this._getTransitioner(e!==i&&e,i);return n.translate(t),n},_getTransitioner:function(t,e,i,n){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===i&&(i=this.dir||1),void 0===n&&(n=this.transitionOptions),new this.Transitioner(l(t)?this.slides[t]:t,l(e)?this.slides[e]:e,i*(h?-1:1),n)}}}}}function Sn(t){return.5*t+300}function On(t){if(!On.installed){t.use(An);var e=t.mixin,i=t.util,n=i.addClass,o=i.assign,r=i.fastdom,s=i.isNumber,a=i.removeClass,l=function(t){var e=t.util.css,i={slide:{show:function(t){return[{transform:En(-100*t)},{transform:En()}]},percent:function(t){return i.translated(t)},translate:function(t,e){return[{transform:En(-100*e*t)},{transform:En(100*e*(1-t))}]}},translated:function(t){return Math.abs(e(t,"transform").split(",")[4]/t.offsetWidth)||0}};return i}(t),h=function(t){var e=t.util,i=e.createEvent,n=e.clamp,o=e.css,r=e.Deferred,s=e.noop,a=e.Promise,l=e.Transition,h=e.trigger;function c(t,e,n){h(t,i(e,!1,!1,n))}return function(t,e,i,h){var u=h.animation,d=h.easing,f=u.percent,g=u.translate,p=u.show;void 0===p&&(p=s);var v=p(i),m=new r;return{dir:i,show:function(o,r,h){var u=this;void 0===r&&(r=0);var f=h?"linear":d;return o-=Math.round(o*n(r,-1,1)),this.translate(r),c(e,"itemin",{percent:r,duration:o,timing:f,dir:i}),c(t,"itemout",{percent:1-r,duration:o,timing:f,dir:i}),a.all([l.start(e,v[1],o,f),l.start(t,v[0],o,f)]).then(function(){u.reset(),m.resolve()},s),m.promise},stop:function(){return l.stop([e,t])},cancel:function(){l.cancel([e,t])},reset:function(){for(var i in v[0])o([e,t],i,"")},forward:function(i,n){return void 0===n&&(n=this.percent()),l.cancel([e,t]),this.show(i,n,!0)},translate:function(n){this.reset();var r=g(n,i);o(e,r[1]),o(t,r[0]),c(e,"itemtranslatein",{percent:n,dir:i}),c(t,"itemtranslateout",{percent:1-n,dir:i})},percent:function(){return f(t||e,e,i)},getDistance:function(){return t.offsetWidth}}}}(t);t.mixin.slideshow={mixins:[e.slider],props:{animation:String},defaults:{animation:"slide",clsActivated:"uk-transition-active",Animations:l,Transitioner:h},computed:{animation:function(t){var e=t.animation,i=t.Animations;return o(e in i?i[e]:i.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(e){var i=e.target;t.update(i)},itemshow:function(){s(this.prevIndex)&&r.flush()},beforeitemshow:function(t){var e=t.target;n(e,this.clsActive)},itemshown:function(t){var e=t.target;n(e,this.clsActivated)},itemhidden:function(t){var e=t.target;a(e,this.clsActive,this.clsActivated)}}}}}function Nn(t){if(!Nn.installed){t.use(On);var e=t.mixin,i=t.util,n=i.$,o=i.addClass,r=i.ajax,s=i.append,a=i.assign,l=i.attr,h=i.css,c=i.getImage,u=i.html,d=i.index,f=i.on,g=i.pointerDown,p=i.pointerMove,v=i.removeClass,m=i.Transition,w=i.trigger,x=function(t){var e=t.mixin,i=t.util,n=i.assign,o=i.css;return n({},e.slideshow.defaults.Animations,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:_n(.8)},{opacity:1,transform:_n(1)}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:_n(1-.2*t)},{opacity:t,transform:_n(.8+.2*t)}]}}})}(t);t.component("lightbox-panel",{mixins:[e.container,e.modal,e.togglable,e.slideshow],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},defaults:{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",pauseOnHover:!1,velocity:2,Animations:x,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href="#" uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href="#" uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'},created:function(){var t=this;this.$mount(s(this.container,this.template)),this.caption=n(".uk-lightbox-caption",this.$el),this.items.forEach(function(){return s(t.list,"<li></li>")})},events:[{name:p+" "+g+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.slidesSelector},handler:function(t){t.preventDefault(),this.hide()}},{name:"shown",self:!0,handler:"showControls"},{name:"hide",self:!0,handler:function(){this.hideControls(),v(this.slides,this.clsActive),m.stop(this.slides)}},{name:"keyup",el:document,handler:function(t){if(this.isToggled(this.$el))switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.preventCatch=!0,t.preventDefault(),this.toggleNow(this.$el,!0),this.animation=x.scale,v(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(t){var e=t.target,i=d(e),n=this.getItem(i).caption;h(this.caption,"display",n?"":"none"),u(this.caption,n);for(var o=0;o<=this.preload;o++)this.loadItem(this.getIndex(i+o)),this.loadItem(this.getIndex(i-o))}},{name:"itemshown",handler:function(){this.preventCatch=!1}},{name:"itemload",handler:function(t,e){var i,o=this,s=e.source,a=e.type,h=e.alt;if(this.setItem(e,"<span uk-spinner></span>"),s)if("image"===a||s.match(/\.(jp(e)?g|png|gif|svg)$/i))c(s).then(function(t){return o.setItem(e,'<img width="'+t.width+'" height="'+t.height+'" src="'+s+'" alt="'+(h||"")+'">')},function(){return o.setError(e)});else if("video"===a||s.match(/\.(mp4|webm|ogv)$/i)){var u=n("<video controls playsinline"+(e.poster?' poster="'+e.poster+'"':"")+' uk-video="'+this.videoAutoplay+'"></video>');l(u,"src",s),f(u,"error",function(){return o.setError(e)}),f(u,"loadedmetadata",function(){l(u,{width:u.videoWidth,height:u.videoHeight}),o.setItem(e,u)})}else if("iframe"===a)this.setItem(e,'<iframe class="uk-lightbox-iframe" src="'+s+'" frameborder="0" allowfullscreen></iframe>');else if(i=s.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/watch\?v=([^&\s]+)/)||s.match(/()youtu\.be\/(.*)/)){var d=i[2],g=function(t,n){return void 0===t&&(t=640),void 0===n&&(n=450),o.setItem(e,y("//www.youtube"+(i[1]||"")+".com/embed/"+d,t,n,o.videoAutoplay))};c("//img.youtube.com/vi/"+d+"/maxresdefault.jpg").then(function(t){var e=t.width,i=t.height;120===e&&90===i?c("//img.youtube.com/vi/"+d+"/0.jpg").then(function(t){var e=t.width,i=t.height;return g(e,i)},g):g(e,i)},g)}else(i=s.match(/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/))&&r("//vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(s),{responseType:"json"}).then(function(t){var n=t.response,r=n.height,s=n.width;return o.setItem(e,y("//player.vimeo.com/video/"+i[2],s,r,o.videoAutoplay))})}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);e.content||w(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[t]||{}},setItem:function(e,i){a(e,{content:i});var n=u(this.slides[this.items.indexOf(e)],i);w(this.$el,"itemloaded",[this,n]),t.update(n)},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),o(this.$el,"uk-active","uk-transition-active")},hideControls:function(){v(this.$el,"uk-active","uk-transition-active")}}})}function y(t,e,i,n){return'<iframe src="'+t+'" width="'+e+'" height="'+i+'" style="max-width: 100%; box-sizing: border-box;" frameborder="0" allowfullscreen uk-video="autoplay: '+n+'" uk-responsive></iframe>'}}function Dn(t){if(!Dn.installed){var e=t.mixin,i=t.util,n=i.css,o=i.Dimensions,r=i.each,s=i.getImage,a=i.includes,l=i.isNumber,h=i.isUndefined,c=i.toFloat,u=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity"];e.parallax={props:u.reduce(function(t,e){return t[e]="list",t},{media:"media"}),defaults:u.reduce(function(t,e){return t[e]=void 0,t},{media:!1}),computed:{props:function(t,e){var i=this;return u.reduce(function(o,r){if(h(t[r]))return o;var s,l,u,d=r.match(/color/i),f=d||"opacity"===r,g=t[r].slice(0);f&&n(e,r,""),g.length<2&&g.unshift(("scale"===r?1:f?n(e,r):0)||0);var p=a(g.join(""),"%")?"%":"px";if(d){var v=e.style.color;g=g.map(function(t){return n(n(e,"color",t),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(function(t){return c(t)})}),e.style.color=v}else g=g.map(c);if(r.match(/^bg/))if(n(e,"background-position-"+r[2],""),l=n(e,"backgroundPosition").split(" ")["x"===r[2]?0:1],i.covers){var m=Math.min.apply(Math,g),w=Math.max.apply(Math,g),x=g.indexOf(m)<g.indexOf(w);u=w-m,g=g.map(function(t){return t-(x?m:w)}),s=(x?-u:0)+"px"}else s=l;return o[r]={steps:g,unit:p,pos:s,bgPos:l,diff:u},o},{})},bgProps:function(){var t=this;return["bgx","bgy"].filter(function(e){return e in t.props})},covers:function(t,e){return function(t){var e=t.style.backgroundSize,i="cover"===n(n(t,"backgroundSize",""),"backgroundSize");return t.style.backgroundSize=e,i}(e)}},disconnected:function(){delete this._image},update:[{read:function(t){var e=this;if(t.active=!this.media||window.matchMedia(this.media).matches,t.image&&(t.image.dimEl={width:this.$el.offsetWidth,height:this.$el.offsetHeight}),!("image"in t)&&this.covers&&this.bgProps.length){var i=n(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");i&&(t.image=!1,s(i).then(function(i){t.image={width:i.naturalWidth,height:i.naturalHeight},e.$emit()}))}},write:function(t){var e=this,i=t.image,r=t.active;if(i)if(r){var s=i.dimEl,a=o.cover(i,s);this.bgProps.forEach(function(t){var n=e.props[t],r=n.diff,l=n.bgPos,h=n.steps,c="bgy"===t?"height":"width",u=a[c]-s[c];if(l.match(/%$|0px/)){if(u<r)s[c]=a[c]+r-u;else if(u>r){var d=parseFloat(l);d&&(e.props[t].steps=h.map(function(t){return t-(u-r)/(100/d)}))}a=o.cover(i,s)}}),n(this.$el,{backgroundSize:a.width+"px "+a.height+"px",backgroundRepeat:"no-repeat"})}else n(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["load","resize"]}],methods:{reset:function(){var t=this;r(this.getCss(0),function(e,i){return n(t.$el,i,"")})},getCss:function(t){var e=this.props,i=!1;return Object.keys(e).reduce(function(n,o){var r=e[o],s=r.steps,a=r.unit,l=r.pos,h=f(s,t);switch(o){case"x":case"y":if(i)break;var u=["x","y"].map(function(i){return o===i?h+a:e[i]?f(e[i].steps,t)+e[i].unit:0}),g=u[0],p=u[1];i=n.transform+=" translate3d("+g+", "+p+", 0)";break;case"rotate":n.transform+=" rotate("+h+"deg)";break;case"scale":n.transform+=" scale("+h+")";break;case"bgy":case"bgx":n["background-position-"+o[2]]="calc("+l+" + "+(h+a)+")";break;case"color":case"backgroundColor":case"borderColor":var v=d(s,t),m=v[0],w=v[1],x=v[2];n[o]="rgba("+m.map(function(t,e){return t+=x*(w[e]-t),3===e?c(t):parseInt(t,10)}).join(",")+")";break;case"blur":n.filter+=" blur("+h+"px)";break;case"hue":n.filter+=" hue-rotate("+h+"deg)";break;case"fopacity":n.filter+=" opacity("+h+"%)";break;case"grayscale":case"invert":case"saturate":case"sepia":n.filter+=" "+o+"("+h+"%)";break;default:n[o]=h}return n},{transform:"",filter:""})}}}}function d(t,e){var i=t.length-1,n=Math.min(Math.floor(i*e),i-1),o=t.slice(n,n+2);return o.push(1===e?1:e%(1/i)*i),o}function f(t,e){var i=d(t,e),n=i[0],o=i[1],r=i[2];return(l(n)?n+Math.abs(n-o)*r*(n<o?1:-1):+o).toFixed(2)}}function zn(t){var e=t.util.removeClass;return{update:[{write:function(){if(!this.stack.length&&!this.dragging){var t=this.getValidIndex();delete this.index,e(this.slides,this.clsActive,this.clsActivated),this.show(t)}},events:["load","resize"]}]}}function Hn(t,e){t.use(Dn);var i=t.mixin,n=t.util,o=n.closest,r=n.css,s=n.endsWith,a=n.noop,l=n.Transition;return{mixins:[i.parallax],computed:{item:function(){var i=t.getComponent(o(this.$el,".uk-"+e),e);return i&&o(this.$el,i.slidesSelector)}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){r(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,i=t.detail,n=i.percent,o=i.duration,s=i.timing,u=i.dir;l.cancel(this.$el),r(this.$el,this.getCss(c(e,u,n))),l.start(this.$el,this.getCss(h(e)?.5:u>0?1:0),o,s).catch(a)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){l.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,i=t.detail,n=i.percent,o=i.dir;l.cancel(this.$el),r(this.$el,this.getCss(c(e,o,n)))}}]};function h(t){return s(t,"in")}function c(t,e,i){return i/=2,h(t)?e<0?1-i:i:e<0?i:1-i}}return Ti.version="3.0.0-beta.42",function(t){t.mixin.class=Ai,t.mixin.container=Si,t.mixin.modal=Ni,t.mixin.position=Di,t.mixin.togglable=Oi}(Ti),function(t){t.use(In),t.use(zi),t.use(Hi),t.use(Tn),t.use(ji),t.use(Wi),t.use(Zi),t.use(Fi),t.use(qi),t.use(Yi),t.use(gn),t.use(Vi),t.use(Ri),t.use(fn),t.use(pn),t.use(vn),t.use(mn),t.use(wn),t.use(xn),t.use(yn),t.use(Cn),t.use(kn),t.use(bn),t.use($n),t.use(dn),t.use(Mn),t.use(Bn),t.use(Pi)}(Ti),Ti.use(function t(e){if(!t.installed){var i=e.util,n=i.$,o=i.empty,r=i.html;e.component("countdown",{mixins:[e.mixin.class],attrs:!0,props:{date:String,clsWrapper:String},defaults:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","days"),e)},hours:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","hours"),e)},minutes:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","minutes"),e)},seconds:function(t,e){var i=t.clsWrapper;return n(i.replace("%unit%","seconds"),e)},units:function(){var t=this;return["days","hours","minutes","seconds"].filter(function(e){return t[e]})}},connected:function(){this.start()},disconnected:function(){var t=this;this.stop(),this.units.forEach(function(e){return o(t[e])})},events:[{name:"visibilitychange",el:document,handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e=this,i={total:t=this.date-Date.now(),seconds:t/1e3%60,minutes:t/1e3/60%60,hours:t/1e3/60/60%24,days:t/1e3/60/60/24};i.total<=0&&(this.stop(),i.days=i.hours=i.minutes=i.seconds=0),this.units.forEach(function(t){var n=String(Math.floor(i[t]));n=n.length<2?"0"+n:n;var o=e[t];o.textContent!==n&&((n=n.split("")).length!==o.children.length&&r(o,n.map(function(){return"<span></span>"}).join("")),n.forEach(function(t,e){return o.children[e].textContent=t}))})}},methods:{start:function(){var t=this;this.stop(),this.date&&this.units.length&&(this.$emit(),this.timer=setInterval(function(){return t.$emit()},1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}})}}),Ti.use(function t(e){if(!t.installed){var i=e.util,n=i.addClass,o=i.css,r=i.scrolledOver,s=i.sortBy,a=i.toFloat;e.component("grid-parallax",e.components.grid.extend({props:{target:String,translate:Number},defaults:{target:!1,translate:150},computed:{translate:function(t){var e=t.translate;return Math.abs(e)}},init:function(){n(this.$el,"uk-grid")},disconnected:function(){this.reset(),o(this.$el,"marginBottom","")},update:[{read:function(t){var e=t.rows;return{columns:e&&e[0]&&e[0].length||0,rows:e&&e.map(function(t){return s(t,"offsetLeft")})}},write:function(t){var e=t.columns;o(this.$el,"marginBottom",e>1?this.translate+a(o(o(this.$el,"marginBottom",""),"marginBottom")):"")},events:["load","resize"]},{read:function(){return{scrolled:r(this.$el)*this.translate}},write:function(t){var e=t.rows,i=t.columns,n=t.scrolled;if(!e||1===i||!n)return this.reset();e.forEach(function(t){return t.forEach(function(t,e){return o(t,"transform","translateY("+(e%2?n:n/8)+"px)")})})},events:["scroll","load","resize"]}],methods:{reset:function(){o(this.$el.children,"transform","")}}})),e.components.gridParallax.options.update.unshift({read:function(){this.reset()},events:["load","resize"]})}}),Ti.use(function t(e){if(!t.installed){e.use(Nn);var i=e.util,n=i.$$,o=i.assign,r=i.data,s=i.index,a=e.components.lightboxPanel.options;e.component("lightbox",{attrs:!0,props:o({toggle:String},a.props),defaults:o({toggle:"a"},Object.keys(a.props).reduce(function(t,e){return t[e]=a.defaults[e],t},{})),computed:{toggles:function(t,e){var i=t.toggle;return n(i,e)}},disconnected:function(){this._destroy()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),t.current.blur(),this.show(s(this.toggles,t.current))}}],update:function(t){var e,i;t.toggles=t.toggles||this.toggles,this.panel&&this.animation&&(this.panel.$props.animation=this.animation,this.panel.$emit()),this.panel&&(e=t.toggles,i=this.toggles,e.length!==i.length||!e.every(function(t,e){return t===i[e]}))&&(t.toggles=this.toggles,this._destroy(),this._init())},methods:{_init:function(){return this.panel=this.panel||e.lightboxPanel(o({},this.$props,{items:this.toggles.reduce(function(t,e){return t.push(["href","caption","type","poster","alt"].reduce(function(t,i){return t["href"===i?"source":i]=r(e,i),t},{})),t},[])}))},_destroy:function(){this.panel&&(this.panel.$destroy(!0),this.panel=null)},show:function(t){return this.panel||this._init(),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}})}}),Ti.use(function t(e){var i;if(!t.installed){var n=e.util,o=n.append,r=n.apply,s=n.closest,a=n.css,l=n.pointerEnter,h=n.pointerLeave,c=n.remove,u=n.toFloat,d=n.Transition,f=n.trigger,g={};e.component("notification",{functional:!0,args:["message","status"],defaults:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},created:function(){g[this.pos]||(g[this.pos]=o(e.container,'<div class="uk-notification uk-notification-'+this.pos+'"></div>'));var t=a(g[this.pos],"display","block");this.$mount(o(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href="#" class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},ready:function(){var t=this,e=u(a(this.$el,"marginBottom"));d.start(a(this.$el,{opacity:0,marginTop:-this.$el.offsetHeight,marginBottom:0}),{opacity:1,marginTop:0,marginBottom:e}).then(function(){t.timeout&&(t.timer=setTimeout(t.close,t.timeout))})},events:(i={click:function(t){s(t.target,'a[href="#"]')&&t.preventDefault(),this.close()}},i[l]=function(){this.timer&&clearTimeout(this.timer)},i[h]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},i),methods:{close:function(t){var e=this,i=function(){f(e.$el,"close",[e]),c(e.$el),g[e.pos].children.length||a(g[e.pos],"display","none")};this.timer&&clearTimeout(this.timer),t?i():d.start(this.$el,{opacity:0,marginTop:-this.$el.offsetHeight,marginBottom:0}).then(i)}}}),e.notification.closeAll=function(t,i){r(document.body,function(n){var o=e.getComponent(n,"notification");!o||t&&t!==o.group||o.close(i)})}}}),Ti.use(function t(e){if(!t.installed){e.use(Dn);var i=e.mixin,n=e.util,o=n.clamp,r=n.css,s=n.scrolledOver,a=n.query;e.component("parallax",{mixins:[i.parallax],props:{target:String,viewport:Number,easing:Number},defaults:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var i=t.target;return i&&a(i,e)||e}},update:[{read:function(t){return{prev:t.percent,percent:function(t,e){return o(t*(1-(e-e*t)))}(s(this.target)/(this.viewport||1),this.easing)}},write:function(t,e){var i=t.prev,n=t.percent,o=t.active;"scroll"!==e.type&&(i=!1),o?i!==n&&r(this.$el,this.getCss(n)):this.reset()},events:["scroll","load","resize"]}]})}}),Ti.use(function t(e){if(!t.installed){e.use(An);var i=e.mixin,n=e.util,o=n.$,r=n.$$,s=n.addClass,a=n.css,l=n.data,h=n.includes,c=n.isNumeric,u=n.isUndefined,d=n.offset,f=n.toggleClass,g=n.toFloat,p=function(t){var e=t.util,i=e.assign,n=e.clamp,o=e.createEvent,r=e.css,s=e.Deferred,a=e.includes,l=e.index,h=e.isRtl,c=e.noop,u=e.sortBy,d=e.toNodes,f=e.Transition,g=e.trigger,p=i(function(t,e,i,o){var d=o.center,g=o.easing,w=o.list,x=new s,y=t?p.getLeft(t,w,d):p.getLeft(e,w,d)+e.offsetWidth*i,C=e?p.getLeft(e,w,d):y+t.offsetWidth*i*(h?-1:1);return{dir:i,show:function(e,o,r){void 0===o&&(o=0);var s=r?"linear":g;return e-=Math.round(e*n(o,-1,1)),this.translate(o),t&&this.updateTranslates(),o=t?o:n(o,0,1),v(this.getItemIn(),"itemin",{percent:o,duration:e,timing:s,dir:i}),t&&v(this.getItemIn(!0),"itemout",{percent:1-o,duration:e,timing:s,dir:i}),f.start(w,{transform:En(-C*(h?-1:1),"px")},e,s).then(x.resolve,c),x.promise},stop:function(){return f.stop(w)},cancel:function(){f.cancel(w)},reset:function(){r(w,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),f.cancel(w),this.show(t,e,!0)},translate:function(e){var o=this.getDistance()*i*(h?-1:1);r(w,"transform",En(n(o-o*e-C,-p.getWidth(w),w.offsetWidth)*(h?-1:1),"px")),this.updateTranslates(),t&&(e=n(e,-1,1),v(this.getItemIn(),"itemtranslatein",{percent:e,dir:i}),v(this.getItemIn(!0),"itemtranslateout",{percent:1-e,dir:i}))},percent:function(){return Math.abs((r(w,"transform").split(",")[4]*(h?-1:1)+y)/(C-y))},getDistance:function(){return Math.abs(C-y)},getItemIn:function(e){void 0===e&&(e=!1);var n=this.getActives(),o=u(m(w),"offsetLeft"),r=l(o,n[i*(e?-1:1)>0?n.length-1:0]);return~r&&o[r+(t&&!e?i:0)]},getActives:function(){var i=p.getLeft(t||e,w,d);return u(m(w).filter(function(t){var e=p.getElLeft(t,w);return e>=i&&e+t.offsetWidth<=w.offsetWidth+i}),"offsetLeft")},updateTranslates:function(){var t=this.getActives();m(w).forEach(function(i){var n=a(t,i);v(i,"itemtranslate"+(n?"in":"out"),{percent:n?1:0,dir:i.offsetLeft<=e.offsetLeft?1:-1})})}}},{getLeft:function(t,e,i){var n=this.getElLeft(t,e);return i?n-this.center(t,e):Math.min(n,this.getMax(e))},getMax:function(t){return Math.max(0,this.getWidth(t)-t.offsetWidth)},getWidth:function(t){return m(t).reduce(function(t,e){return e.offsetWidth+t},0)},getMaxWidth:function(t){return m(t).reduce(function(t,e){return Math.max(t,e.offsetWidth)},0)},center:function(t,e){return e.offsetWidth/2-t.offsetWidth/2},getElLeft:function(t,e){return(t.offsetLeft+(h?t.offsetWidth-e.offsetWidth:0))*(h?-1:1)}});function v(t,e,i){g(t,o(e,!1,!1,i))}function m(t){return d(t.children)}return p}(e);e.component("slider-parallax",Hn(e,"slider")),e.component("slider",{mixins:[i.class,i.slider,zn(e)],props:{center:Boolean,sets:Boolean},defaults:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:p},computed:{avgWidth:function(){return p.getWidth(this.list)/this.length},finite:function(t){return t.finite||p.getWidth(this.list)<this.list.offsetWidth+p.getMaxWidth(this.list)+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return this.sets[this.sets.length-1];a(this.slides,"order","");for(var t=p.getMax(this.list),e=this.length;e--;)if(p.getElLeft(this.list.children[e],this.list)<t)return Math.min(e+1,this.length-1);return 0},sets:function(t){var e=this,i=t.sets,n=this.list.offsetWidth/(this.center?2:1),o=0,r=n;return(i=i&&this.slides.reduce(function(t,i,s){var a=d(i);if(a.right>o&&(!e.center&&s>e.maxIndex&&(s=e.maxIndex),!h(t,s))){var l=e.slides[s+1];e.center&&l&&a.width<r-d(l).width/2?r-=a.width:(r=n,t.push(s),o=a.left+n+(e.center?a.width/2:0))}return t},[]))&&i.length&&i},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){f(this.$el,this.clsContainer,!o("."+this.clsContainer,this.$el))},update:{write:function(){var t=this;r("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el).forEach(function(e){var i=l(e,t.attrItem);t.maxIndex&&f(e,"uk-hidden",c(i)&&(t.sets&&!h(t.sets,g(i))||i>t.maxIndex))})},events:["load","resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!h(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(this.dir>0&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&e>1){for(var i=0;i<e;i++)this.stack.splice(1,0,this.dir>0?"next":"previous");t.preventDefault()}else this.duration=Sn(this.avgWidth/this.velocity)*((this.dir<0||!this.slides[this.prevIndex]?this.slides[this.index]:this.slides[this.prevIndex]).offsetWidth/this.avgWidth),this.reorder()},itemshow:function(){!u(this.prevIndex)&&s(this._getTransitioner().getItemIn(),this.clsActive)},itemshown:function(){var t=this,e=this._getTransitioner(this.index).getActives();this.slides.forEach(function(i){return f(i,t.clsActive,h(e,i))}),(!this.sets||h(this.sets,g(this.index)))&&this.slides.forEach(function(i){return f(i,t.clsActivated,h(e,i))})}},methods:{reorder:function(){var t=this;if(a(this.slides,"order",""),!this.finite){var e=this.dir>0&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach(function(i,n){return a(i,"order",t.dir>0&&n<e?1:t.dir<0&&n>=t.index?-1:"")}),this.center)for(var i=this.slides[e],n=this.list.offsetWidth/2-i.offsetWidth/2,o=0;n>0;){var r=t.getIndex(--o+e,e),s=t.slides[r];a(s,"order",r>e?-2:-1),n-=s.offsetWidth}}},getValidIndex:function(t,e){var i;if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;do{if(h(this.sets,t))return t;i=t,t=this.getIndex(t+this.dir,e)}while(t!==i);return t}}})}}),Ti.use(function t(e){if(!t.installed){e.use(On);var i=e.mixin,n=e.util.height,o=function(t){var e=t.mixin,i=t.util,n=i.assign,o=i.css,r=n({},e.slideshow.defaults.Animations,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:_n(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-o(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:_n(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:En(30),zIndex:-1},{transform:En(),zIndex:0}]:[{transform:En(-100),zIndex:0},{transform:En(),zIndex:-1}]},percent:function(t,e,i){return i<0?1-r.translated(e):r.translated(t)},translate:function(t,e){return e<0?[{transform:En(30*t),zIndex:-1},{transform:En(-100*(1-t)),zIndex:0}]:[{transform:En(100*-t),zIndex:0},{transform:En(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:En(100),zIndex:0},{transform:En(),zIndex:-1}]:[{transform:En(-30),zIndex:-1},{transform:En(),zIndex:0}]},percent:function(t,e,i){return i>0?1-r.translated(e):r.translated(t)},translate:function(t,e){return e<0?[{transform:En(100*t),zIndex:0},{transform:En(-30*(1-t)),zIndex:-1}]:[{transform:En(-30*t),zIndex:-1},{transform:En(100*(1-t)),zIndex:0}]}}});return r}(e);e.component("slideshow-parallax",Hn(e,"slideshow")),e.component("slideshow",{mixins:[i.class,i.slideshow,zn(e)],props:{ratio:String,minHeight:Boolean,maxHeight:Boolean},defaults:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:o},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],i=t[1];return i=i*this.$el.offsetWidth/e,this.minHeight&&(i=Math.max(this.minHeight,i)),this.maxHeight&&(i=Math.min(this.maxHeight,i)),{height:i}},write:function(t){var e=t.height;n(this.list,Math.floor(e))},events:["load","resize"]}})}}),Ti.use(function t(e){var i;if(!t.installed){var n=e.mixin,o=e.util,r=o.addClass,s=o.after,a=o.assign,l=o.append,h=o.attr,c=o.before,u=o.closest,d=o.css,f=o.height,g=o.fastdom,p=o.getPos,v=o.includes,m=o.index,w=o.isInput,x=o.noop,y=o.offset,C=o.off,k=o.on,b=o.pointerDown,L=o.pointerMove,$=o.pointerUp,M=o.position,B=o.preventClick,I=o.Promise,T=o.remove,E=o.removeClass,_=o.toggleClass,A=o.toNodes,S=o.Transition,O=o.trigger,N=o.within;e.component("sortable",{mixins:[n.class],props:{group:String,animation:Number,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},defaults:{group:!1,animation:150,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1},init:function(){var t=this;["init","start","move","end"].forEach(function(e){var i=t[e];t[e]=function(e){t.scrollY=window.pageYOffset;var n=p(e),o=n.x,r=n.y;t.pos={x:o,y:r},i(e)}})},events:(i={},i[b]="init",i),update:{write:function(){if(this.clsEmpty&&_(this.$el,this.clsEmpty,!this.$el.children.length),this.drag){y(this.drag,{top:this.pos.y+this.origin.top,left:this.pos.x+this.origin.left});var t,e=y(this.drag).top,i=e+this.drag.offsetHeight;e>0&&e<this.scrollY?t=this.scrollY-5:i<f(document)&&i>f(window)+this.scrollY&&(t=this.scrollY+5),t&&setTimeout(function(){return window.scrollTo(window.scrollX,t)},5)}}},methods:{init:function(t){var e=t.target,i=t.button,n=t.defaultPrevented,o=A(this.$el.children).filter(function(t){return N(e,t)})[0];!o||w(t.target)||this.handle&&!N(e,this.handle)||i>0||N(e,"."+this.clsNoDrag)||n||(t.preventDefault(),this.touched=[this],this.placeholder=o,this.origin=a({target:e,index:m(o)},this.pos),k(document,L,this.move),k(document,$,this.end),k(window,"scroll",this.scroll),this.threshold||this.start(t))},start:function(t){this.drag=l(e.container,this.placeholder.outerHTML.replace(/^<li/i,"<div").replace(/li>$/i,"div>")),d(this.drag,a({boxSizing:"border-box",width:this.placeholder.offsetWidth,height:this.placeholder.offsetHeight},d(this.placeholder,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),h(this.drag,"uk-no-boot",""),r(this.drag,this.clsDrag,this.clsCustom),f(this.drag.firstElementChild,f(this.placeholder.firstElementChild));var i=y(this.placeholder),n=i.left,o=i.top;a(this.origin,{left:n-this.pos.x,top:o-this.pos.y}),r(this.placeholder,this.clsPlaceholder),r(this.$el.children,this.clsItem),r(document.documentElement,this.clsDragState),O(this.$el,"start",[this,this.placeholder,this.drag]),this.move(t)},move:function(t){if(this.drag){this.$emit();var e="mousemove"===t.type?t.target:document.elementFromPoint(this.pos.x-document.body.scrollLeft,this.pos.y-document.body.scrollTop),i=D(e),n=D(this.placeholder),o=i!==n;if(i&&!N(e,this.placeholder)&&(!o||i.group&&i.group===n.group)){if(e=i.$el===e.parentNode&&e||A(i.$el.children).filter(function(t){return N(e,t)})[0],o)n.remove(this.placeholder);else if(!e)return;i.insert(this.placeholder,e),v(this.touched,i)||this.touched.push(i)}}else(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},scroll:function(){var t=window.pageYOffset;t!==this.scrollY&&(this.pos.y+=t-this.scrollY,this.scrollY=t,this.$emit())},end:function(t){if(C(document,L,this.move),C(document,$,this.end),C(window,"scroll",this.scroll),this.drag){B();var e=D(this.placeholder);this===e?this.origin.index!==m(this.placeholder)&&O(this.$el,"moved",[this,this.placeholder]):(O(e.$el,"added",[e,this.placeholder]),O(this.$el,"removed",[this,this.placeholder])),O(this.$el,"stop",[this]),T(this.drag),this.drag=null;var i=this.touched.map(function(t){return t.clsPlaceholder+" "+t.clsItem}).join(" ");this.touched.forEach(function(t){return E(t.$el.children,i)}),E(document.documentElement,this.clsDragState)}else"mouseup"!==t.type&&N(t.target,"a[href]")&&(location.href=u(t.target,"a[href]").href)},insert:function(t,e){var i=this;r(this.$el.children,this.clsItem);var n=function(){e?!N(t,i.$el)||function(t,e){return t.parentNode===e.parentNode&&m(t)>m(e)}(t,e)?c(e,t):s(e,t):l(i.$el,t)};this.animation?this.animate(n):n()},remove:function(t){N(t,this.$el)&&(this.animation?this.animate(function(){return T(t)}):T(t))},animate:function(t){var i=this,n=[],o=A(this.$el.children),r={position:"",width:"",height:"",pointerEvents:"",top:"",left:"",bottom:"",right:""};o.forEach(function(t){n.push(a({position:"absolute",pointerEvents:"none",width:t.offsetWidth,height:t.offsetHeight},M(t)))}),t(),o.forEach(S.cancel),d(this.$el.children,r),e.update(this.$el),g.flush(),d(this.$el,"minHeight",f(this.$el));var s=o.map(function(t){return M(t)});I.all(o.map(function(t,e){return S.start(d(t,n[e]),s[e],i.animation)})).then(function(){d(i.$el,"minHeight",""),d(o,r),e.update(i.$el),g.flush()},x)}}})}function D(t){return t&&(e.getComponent(t,"sortable")||D(t.parentNode))}}),Ti.use(function t(e){var i;if(!t.installed){var n=e.util,o=e.mixin,r=n.append,s=n.attr,a=n.flipPosition,l=n.hasAttr,h=n.includes,c=n.isTouch,u=n.isVisible,d=n.matches,f=n.on,g=n.pointerDown,p=n.pointerEnter,v=n.pointerLeave,m=n.remove,w=n.within,x=[];e.component("tooltip",{attrs:!0,args:"title",mixins:[o.container,o.togglable,o.position],props:{delay:Number,title:String},defaults:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){this._hasTitle=l(this.$el,"title"),s(this.$el,{title:"","aria-expanded":!1})},disconnected:function(){this.hide(),s(this.$el,{title:this._hasTitle?this.title:null,"aria-expanded":null})},methods:{show:function(){var t=this;h(x,this)||(x.forEach(function(t){return t.hide()}),x.push(this),this._unbind=f(document,"click",function(e){return!w(e.target,t.$el)&&t.hide()}),clearTimeout(this.showTimer),this.tooltip=r(this.container,'<div class="'+this.clsPos+'" aria-hidden><div class="'+this.clsPos+'-inner">'+this.title+"</div></div>"),s(this.$el,"aria-expanded",!0),this.positionAt(this.tooltip,this.$el),this.origin="y"===this.getAxis()?a(this.dir)+"-"+this.align:this.align+"-"+a(this.dir),this.showTimer=setTimeout(function(){t.toggleElement(t.tooltip,!0),t.hideTimer=setInterval(function(){u(t.$el)||t.hide()},150)},this.delay))},hide:function(){var t=x.indexOf(this);!~t||d(this.$el,"input")&&this.$el===document.activeElement||(x.splice(t,1),clearTimeout(this.showTimer),clearInterval(this.hideTimer),s(this.$el,"aria-expanded",!1),this.toggleElement(this.tooltip,!1),this.tooltip&&m(this.tooltip),this.tooltip=!1,this._unbind())}},events:(i={},i["focus "+p+" "+g]=function(t){t.type===g&&c(t)||this.show()},i.blur="hide",i[v]=function(t){c(t)||this.hide()},i)})}}),Ti.use(function t(e){if(!t.installed){var i=e.util,n=i.addClass,o=i.ajax,r=i.matches,s=i.noop,a=i.on,l=i.removeClass,h=i.trigger;e.component("upload",{props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},defaults:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Bytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:s,beforeAll:s,beforeSend:s,complete:s,completeAll:s,error:s,fail:s,load:s,loadEnd:s,loadStart:s,progress:s},events:{change:function(t){r(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){u(t);var e=t.dataTransfer;e&&e.files&&(l(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){u(t)},dragover:function(t){u(t),n(this.$el,this.clsDragover)},dragleave:function(t){u(t),l(this.$el,this.clsDragover)}},methods:{upload:function(t){var e=this;if(t.length){h(this.$el,"upload",[t]);for(var i=0;i<t.length;i++){if(e.maxSize&&1e3*e.maxSize<t[i].size)return void e.fail(e.msgInvalidSize.replace("%s",e.allow));if(e.allow&&!c(e.allow,t[i].name))return void e.fail(e.msgInvalidName.replace("%s",e.allow));if(e.mime&&!c(e.mime,t[i].type))return void e.fail(e.msgInvalidMime.replace("%s",e.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var n=function(t,e){for(var i=[],n=0;n<t.length;n+=e){for(var o=[],r=0;r<e;r++)o.push(t[n+r]);i.push(o)}return i}(t,this.concurrent),r=function(t){var i=new FormData;for(var s in t.forEach(function(t){return i.append(e.name,t)}),e.params)i.append(s,e.params[s]);o(e.url,{data:i,method:e.method,responseType:e.type,beforeSend:function(t){var i=t.xhr;i.upload&&a(i.upload,"progress",e.progress),["loadStart","load","loadEnd","abort"].forEach(function(t){return a(i,t.toLowerCase(),e[t])}),e.beforeSend(t)}}).then(function(t){e.complete(t),n.length?r(n.shift()):e.completeAll(t)},function(t){return e.error(t.message)})};r(n.shift())}}}})}function c(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function u(t){t.preventDefault(),t.stopPropagation()}}),function(t){var e=t.connect,i=t.disconnect;function n(){r(document.body,e),oi.flush(),new MutationObserver(function(t){return t.forEach(o)}).observe(document,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),t._initialized=!0}function o(n){var o=n.target;("attributes"!==n.type?function(t){for(var n=t.addedNodes,o=t.removedNodes,s=0;s<n.length;s++)r(n[s],e);for(var a=0;a<o.length;a++)r(o[a],i);return!0}(n):function(e){var i=e.target,n=e.attributeName;if("href"===n)return!0;var o=Bi(n);if(o&&o in t.components){if(J(i,n))return t[o](i),!0;var r=t.getComponent(i,o);return r?(r.$destroy(),!0):void 0}}(n))&&t.update(o)}function r(t,e){if(1===t.nodeType&&!J(t,"uk-no-boot"))for(e(t),t=t.firstElementChild;t;){var i=t.nextElementSibling;r(t,e),t=i}}"MutationObserver"in window&&(document.body?n():new MutationObserver(function(){document.body&&(this.disconnect(),n())}).observe(document,{childList:!0,subtree:!0}))}(Ti),Ti}()}).call(this,i(4).setImmediate)},function(t,e,i){"use strict";var n=r(i(5)),o=r(i(1));function r(t){return t&&t.__esModule?t:{default:t}}i(11),n.default.use(o.default)},,,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,